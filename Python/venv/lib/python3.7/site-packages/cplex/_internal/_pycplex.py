# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _pycplex_platform
else:
    import _pycplex_platform

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


CPX_FEATURES_H = _pycplex_platform.CPX_FEATURES_H
CPX_CPXAUTOINTTYPES_H_H = _pycplex_platform.CPX_CPXAUTOINTTYPES_H_H
CPXBYTE_DEFINED = _pycplex_platform.CPXBYTE_DEFINED
CPXINT_DEFINED = _pycplex_platform.CPXINT_DEFINED
CPXLONG_DEFINED = _pycplex_platform.CPXLONG_DEFINED
CPXSHORT_DEFINED = _pycplex_platform.CPXSHORT_DEFINED
CPXULONG_DEFINED = _pycplex_platform.CPXULONG_DEFINED
CPX_STR_PARAM_MAX = _pycplex_platform.CPX_STR_PARAM_MAX
class cpxiodevice(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    cpxiodev_eof = property(_pycplex_platform.cpxiodevice_cpxiodev_eof_get, _pycplex_platform.cpxiodevice_cpxiodev_eof_set)
    cpxiodev_error = property(_pycplex_platform.cpxiodevice_cpxiodev_error_get, _pycplex_platform.cpxiodevice_cpxiodev_error_set)
    cpxiodev_rewind = property(_pycplex_platform.cpxiodevice_cpxiodev_rewind_get, _pycplex_platform.cpxiodevice_cpxiodev_rewind_set)
    cpxiodev_flush = property(_pycplex_platform.cpxiodevice_cpxiodev_flush_get, _pycplex_platform.cpxiodevice_cpxiodev_flush_set)
    cpxiodev_close = property(_pycplex_platform.cpxiodevice_cpxiodev_close_get, _pycplex_platform.cpxiodevice_cpxiodev_close_set)
    cpxiodev_putc = property(_pycplex_platform.cpxiodevice_cpxiodev_putc_get, _pycplex_platform.cpxiodevice_cpxiodev_putc_set)
    cpxiodev_puts = property(_pycplex_platform.cpxiodevice_cpxiodev_puts_get, _pycplex_platform.cpxiodevice_cpxiodev_puts_set)
    cpxiodev_read = property(_pycplex_platform.cpxiodevice_cpxiodev_read_get, _pycplex_platform.cpxiodevice_cpxiodev_read_set)
    cpxiodev_write = property(_pycplex_platform.cpxiodevice_cpxiodev_write_get, _pycplex_platform.cpxiodevice_cpxiodev_write_set)

    def __init__(self):
        _pycplex_platform.cpxiodevice_swiginit(self, _pycplex_platform.new_cpxiodevice())
    __swig_destroy__ = _pycplex_platform.delete_cpxiodevice

# Register cpxiodevice in _pycplex_platform:
_pycplex_platform.cpxiodevice_swigregister(cpxiodevice)
cvar = _pycplex_platform.cvar
CPX_NULL = cvar.CPX_NULL
ext_name = cvar.ext_name

CPX_VERSION = _pycplex_platform.CPX_VERSION
CPX_VERSION_VERSION = _pycplex_platform.CPX_VERSION_VERSION
CPX_VERSION_RELEASE = _pycplex_platform.CPX_VERSION_RELEASE
CPX_VERSION_MODIFICATION = _pycplex_platform.CPX_VERSION_MODIFICATION
CPX_VERSION_FIX = _pycplex_platform.CPX_VERSION_FIX
CPX_INFBOUND = _pycplex_platform.CPX_INFBOUND
CPX_MINBOUND = _pycplex_platform.CPX_MINBOUND
CPX_PWL_MAXSLOPE = _pycplex_platform.CPX_PWL_MAXSLOPE
CPX_PWL_MINSLOPE = _pycplex_platform.CPX_PWL_MINSLOPE
CPX_PARAMTYPE_NONE = _pycplex_platform.CPX_PARAMTYPE_NONE
CPX_PARAMTYPE_INT = _pycplex_platform.CPX_PARAMTYPE_INT
CPX_PARAMTYPE_DOUBLE = _pycplex_platform.CPX_PARAMTYPE_DOUBLE
CPX_PARAMTYPE_STRING = _pycplex_platform.CPX_PARAMTYPE_STRING
CPX_PARAMTYPE_LONG = _pycplex_platform.CPX_PARAMTYPE_LONG
CPX_NO_SOLN = _pycplex_platform.CPX_NO_SOLN
CPX_AUTO_SOLN = _pycplex_platform.CPX_AUTO_SOLN
CPX_BASIC_SOLN = _pycplex_platform.CPX_BASIC_SOLN
CPX_NONBASIC_SOLN = _pycplex_platform.CPX_NONBASIC_SOLN
CPX_PRIMAL_SOLN = _pycplex_platform.CPX_PRIMAL_SOLN
CPX_PRECOL_LOW = _pycplex_platform.CPX_PRECOL_LOW
CPX_PRECOL_UP = _pycplex_platform.CPX_PRECOL_UP
CPX_PRECOL_FIX = _pycplex_platform.CPX_PRECOL_FIX
CPX_PRECOL_AGG = _pycplex_platform.CPX_PRECOL_AGG
CPX_PRECOL_OTHER = _pycplex_platform.CPX_PRECOL_OTHER
CPX_PREROW_RED = _pycplex_platform.CPX_PREROW_RED
CPX_PREROW_AGG = _pycplex_platform.CPX_PREROW_AGG
CPX_PREROW_OTHER = _pycplex_platform.CPX_PREROW_OTHER
CPX_AUTO = _pycplex_platform.CPX_AUTO
CPX_ON = _pycplex_platform.CPX_ON
CPX_OFF = _pycplex_platform.CPX_OFF
CPX_MAX = _pycplex_platform.CPX_MAX
CPX_MIN = _pycplex_platform.CPX_MIN
CPX_DATACHECK_OFF = _pycplex_platform.CPX_DATACHECK_OFF
CPX_DATACHECK_WARN = _pycplex_platform.CPX_DATACHECK_WARN
CPX_DATACHECK_ASSIST = _pycplex_platform.CPX_DATACHECK_ASSIST
CPX_PPRIIND_PARTIAL = _pycplex_platform.CPX_PPRIIND_PARTIAL
CPX_PPRIIND_AUTO = _pycplex_platform.CPX_PPRIIND_AUTO
CPX_PPRIIND_DEVEX = _pycplex_platform.CPX_PPRIIND_DEVEX
CPX_PPRIIND_STEEP = _pycplex_platform.CPX_PPRIIND_STEEP
CPX_PPRIIND_STEEPQSTART = _pycplex_platform.CPX_PPRIIND_STEEPQSTART
CPX_PPRIIND_FULL = _pycplex_platform.CPX_PPRIIND_FULL
CPX_DPRIIND_AUTO = _pycplex_platform.CPX_DPRIIND_AUTO
CPX_DPRIIND_FULL = _pycplex_platform.CPX_DPRIIND_FULL
CPX_DPRIIND_STEEP = _pycplex_platform.CPX_DPRIIND_STEEP
CPX_DPRIIND_FULLSTEEP = _pycplex_platform.CPX_DPRIIND_FULLSTEEP
CPX_DPRIIND_STEEPQSTART = _pycplex_platform.CPX_DPRIIND_STEEPQSTART
CPX_DPRIIND_DEVEX = _pycplex_platform.CPX_DPRIIND_DEVEX
CPX_PARALLEL_DETERMINISTIC = _pycplex_platform.CPX_PARALLEL_DETERMINISTIC
CPX_PARALLEL_AUTO = _pycplex_platform.CPX_PARALLEL_AUTO
CPX_PARALLEL_OPPORTUNISTIC = _pycplex_platform.CPX_PARALLEL_OPPORTUNISTIC
CPX_WRITELEVEL_AUTO = _pycplex_platform.CPX_WRITELEVEL_AUTO
CPX_WRITELEVEL_ALLVARS = _pycplex_platform.CPX_WRITELEVEL_ALLVARS
CPX_WRITELEVEL_DISCRETEVARS = _pycplex_platform.CPX_WRITELEVEL_DISCRETEVARS
CPX_WRITELEVEL_NONZEROVARS = _pycplex_platform.CPX_WRITELEVEL_NONZEROVARS
CPX_WRITELEVEL_NONZERODISCRETEVARS = _pycplex_platform.CPX_WRITELEVEL_NONZERODISCRETEVARS
CPX_OPTIMALITYTARGET_AUTO = _pycplex_platform.CPX_OPTIMALITYTARGET_AUTO
CPX_OPTIMALITYTARGET_OPTIMALCONVEX = _pycplex_platform.CPX_OPTIMALITYTARGET_OPTIMALCONVEX
CPX_OPTIMALITYTARGET_FIRSTORDER = _pycplex_platform.CPX_OPTIMALITYTARGET_FIRSTORDER
CPX_OPTIMALITYTARGET_OPTIMALGLOBAL = _pycplex_platform.CPX_OPTIMALITYTARGET_OPTIMALGLOBAL
CPX_ALG_NONE = _pycplex_platform.CPX_ALG_NONE
CPX_ALG_AUTOMATIC = _pycplex_platform.CPX_ALG_AUTOMATIC
CPX_ALG_PRIMAL = _pycplex_platform.CPX_ALG_PRIMAL
CPX_ALG_DUAL = _pycplex_platform.CPX_ALG_DUAL
CPX_ALG_NET = _pycplex_platform.CPX_ALG_NET
CPX_ALG_BARRIER = _pycplex_platform.CPX_ALG_BARRIER
CPX_ALG_SIFTING = _pycplex_platform.CPX_ALG_SIFTING
CPX_ALG_CONCURRENT = _pycplex_platform.CPX_ALG_CONCURRENT
CPX_ALG_BAROPT = _pycplex_platform.CPX_ALG_BAROPT
CPX_ALG_PIVOTIN = _pycplex_platform.CPX_ALG_PIVOTIN
CPX_ALG_PIVOTOUT = _pycplex_platform.CPX_ALG_PIVOTOUT
CPX_ALG_PIVOT = _pycplex_platform.CPX_ALG_PIVOT
CPX_ALG_FEASOPT = _pycplex_platform.CPX_ALG_FEASOPT
CPX_ALG_MIP = _pycplex_platform.CPX_ALG_MIP
CPX_ALG_BENDERS = _pycplex_platform.CPX_ALG_BENDERS
CPX_ALG_MULTIOBJ = _pycplex_platform.CPX_ALG_MULTIOBJ
CPX_ALG_ROBUST = _pycplex_platform.CPX_ALG_ROBUST
CPX_AT_LOWER = _pycplex_platform.CPX_AT_LOWER
CPX_BASIC = _pycplex_platform.CPX_BASIC
CPX_AT_UPPER = _pycplex_platform.CPX_AT_UPPER
CPX_FREE_SUPER = _pycplex_platform.CPX_FREE_SUPER
CPX_NO_VARIABLE = _pycplex_platform.CPX_NO_VARIABLE
CPX_CONTINUOUS = _pycplex_platform.CPX_CONTINUOUS
CPX_BINARY = _pycplex_platform.CPX_BINARY
CPX_INTEGER = _pycplex_platform.CPX_INTEGER
CPX_SEMICONT = _pycplex_platform.CPX_SEMICONT
CPX_SEMIINT = _pycplex_platform.CPX_SEMIINT
CPX_PREREDUCE_PRIMALANDDUAL = _pycplex_platform.CPX_PREREDUCE_PRIMALANDDUAL
CPX_PREREDUCE_DUALONLY = _pycplex_platform.CPX_PREREDUCE_DUALONLY
CPX_PREREDUCE_PRIMALONLY = _pycplex_platform.CPX_PREREDUCE_PRIMALONLY
CPX_PREREDUCE_NOPRIMALORDUAL = _pycplex_platform.CPX_PREREDUCE_NOPRIMALORDUAL
CPX_PREREFORM_ALL = _pycplex_platform.CPX_PREREFORM_ALL
CPX_PREREFORM_INTERFERE_CRUSH = _pycplex_platform.CPX_PREREFORM_INTERFERE_CRUSH
CPX_PREREFORM_INTERFERE_UNCRUSH = _pycplex_platform.CPX_PREREFORM_INTERFERE_UNCRUSH
CPX_PREREFORM_NONE = _pycplex_platform.CPX_PREREFORM_NONE
CPX_CONFLICT_EXCLUDED = _pycplex_platform.CPX_CONFLICT_EXCLUDED
CPX_CONFLICT_POSSIBLE_MEMBER = _pycplex_platform.CPX_CONFLICT_POSSIBLE_MEMBER
CPX_CONFLICT_POSSIBLE_LB = _pycplex_platform.CPX_CONFLICT_POSSIBLE_LB
CPX_CONFLICT_POSSIBLE_UB = _pycplex_platform.CPX_CONFLICT_POSSIBLE_UB
CPX_CONFLICT_MEMBER = _pycplex_platform.CPX_CONFLICT_MEMBER
CPX_CONFLICT_LB = _pycplex_platform.CPX_CONFLICT_LB
CPX_CONFLICT_UB = _pycplex_platform.CPX_CONFLICT_UB
CPX_CONFLICTALG_AUTO = _pycplex_platform.CPX_CONFLICTALG_AUTO
CPX_CONFLICTALG_FAST = _pycplex_platform.CPX_CONFLICTALG_FAST
CPX_CONFLICTALG_PROPAGATE = _pycplex_platform.CPX_CONFLICTALG_PROPAGATE
CPX_CONFLICTALG_PRESOLVE = _pycplex_platform.CPX_CONFLICTALG_PRESOLVE
CPX_CONFLICTALG_IIS = _pycplex_platform.CPX_CONFLICTALG_IIS
CPX_CONFLICTALG_LIMITSOLVE = _pycplex_platform.CPX_CONFLICTALG_LIMITSOLVE
CPX_CONFLICTALG_SOLVE = _pycplex_platform.CPX_CONFLICTALG_SOLVE
CPXPROB_LP = _pycplex_platform.CPXPROB_LP
CPXPROB_MILP = _pycplex_platform.CPXPROB_MILP
CPXPROB_FIXEDMILP = _pycplex_platform.CPXPROB_FIXEDMILP
CPXPROB_NODELP = _pycplex_platform.CPXPROB_NODELP
CPXPROB_QP = _pycplex_platform.CPXPROB_QP
CPXPROB_MIQP = _pycplex_platform.CPXPROB_MIQP
CPXPROB_FIXEDMIQP = _pycplex_platform.CPXPROB_FIXEDMIQP
CPXPROB_NODEQP = _pycplex_platform.CPXPROB_NODEQP
CPXPROB_QCP = _pycplex_platform.CPXPROB_QCP
CPXPROB_MIQCP = _pycplex_platform.CPXPROB_MIQCP
CPXPROB_NODEQCP = _pycplex_platform.CPXPROB_NODEQCP
CPX_LPREADER_LEGACY = _pycplex_platform.CPX_LPREADER_LEGACY
CPX_LPREADER_NEW = _pycplex_platform.CPX_LPREADER_NEW
CPX_PARAM_ALL_MIN = _pycplex_platform.CPX_PARAM_ALL_MIN
CPX_PARAM_ALL_MAX = _pycplex_platform.CPX_PARAM_ALL_MAX
CPX_CALLBACK_PRIMAL = _pycplex_platform.CPX_CALLBACK_PRIMAL
CPX_CALLBACK_DUAL = _pycplex_platform.CPX_CALLBACK_DUAL
CPX_CALLBACK_NETWORK = _pycplex_platform.CPX_CALLBACK_NETWORK
CPX_CALLBACK_PRIMAL_CROSSOVER = _pycplex_platform.CPX_CALLBACK_PRIMAL_CROSSOVER
CPX_CALLBACK_DUAL_CROSSOVER = _pycplex_platform.CPX_CALLBACK_DUAL_CROSSOVER
CPX_CALLBACK_BARRIER = _pycplex_platform.CPX_CALLBACK_BARRIER
CPX_CALLBACK_PRESOLVE = _pycplex_platform.CPX_CALLBACK_PRESOLVE
CPX_CALLBACK_QPBARRIER = _pycplex_platform.CPX_CALLBACK_QPBARRIER
CPX_CALLBACK_QPSIMPLEX = _pycplex_platform.CPX_CALLBACK_QPSIMPLEX
CPX_CALLBACK_TUNING = _pycplex_platform.CPX_CALLBACK_TUNING
CPX_CALLBACK_INFO_PRIMAL_OBJ = _pycplex_platform.CPX_CALLBACK_INFO_PRIMAL_OBJ
CPX_CALLBACK_INFO_DUAL_OBJ = _pycplex_platform.CPX_CALLBACK_INFO_DUAL_OBJ
CPX_CALLBACK_INFO_PRIMAL_INFMEAS = _pycplex_platform.CPX_CALLBACK_INFO_PRIMAL_INFMEAS
CPX_CALLBACK_INFO_DUAL_INFMEAS = _pycplex_platform.CPX_CALLBACK_INFO_DUAL_INFMEAS
CPX_CALLBACK_INFO_PRIMAL_FEAS = _pycplex_platform.CPX_CALLBACK_INFO_PRIMAL_FEAS
CPX_CALLBACK_INFO_DUAL_FEAS = _pycplex_platform.CPX_CALLBACK_INFO_DUAL_FEAS
CPX_CALLBACK_INFO_ITCOUNT = _pycplex_platform.CPX_CALLBACK_INFO_ITCOUNT
CPX_CALLBACK_INFO_CROSSOVER_PPUSH = _pycplex_platform.CPX_CALLBACK_INFO_CROSSOVER_PPUSH
CPX_CALLBACK_INFO_CROSSOVER_PEXCH = _pycplex_platform.CPX_CALLBACK_INFO_CROSSOVER_PEXCH
CPX_CALLBACK_INFO_CROSSOVER_DPUSH = _pycplex_platform.CPX_CALLBACK_INFO_CROSSOVER_DPUSH
CPX_CALLBACK_INFO_CROSSOVER_DEXCH = _pycplex_platform.CPX_CALLBACK_INFO_CROSSOVER_DEXCH
CPX_CALLBACK_INFO_CROSSOVER_SBCNT = _pycplex_platform.CPX_CALLBACK_INFO_CROSSOVER_SBCNT
CPX_CALLBACK_INFO_PRESOLVE_ROWSGONE = _pycplex_platform.CPX_CALLBACK_INFO_PRESOLVE_ROWSGONE
CPX_CALLBACK_INFO_PRESOLVE_COLSGONE = _pycplex_platform.CPX_CALLBACK_INFO_PRESOLVE_COLSGONE
CPX_CALLBACK_INFO_PRESOLVE_AGGSUBST = _pycplex_platform.CPX_CALLBACK_INFO_PRESOLVE_AGGSUBST
CPX_CALLBACK_INFO_PRESOLVE_COEFFS = _pycplex_platform.CPX_CALLBACK_INFO_PRESOLVE_COEFFS
CPX_CALLBACK_INFO_USER_PROBLEM = _pycplex_platform.CPX_CALLBACK_INFO_USER_PROBLEM
CPX_CALLBACK_INFO_TUNING_PROGRESS = _pycplex_platform.CPX_CALLBACK_INFO_TUNING_PROGRESS
CPX_CALLBACK_INFO_ENDTIME = _pycplex_platform.CPX_CALLBACK_INFO_ENDTIME
CPX_CALLBACK_INFO_ITCOUNT_LONG = _pycplex_platform.CPX_CALLBACK_INFO_ITCOUNT_LONG
CPX_CALLBACK_INFO_CROSSOVER_PPUSH_LONG = _pycplex_platform.CPX_CALLBACK_INFO_CROSSOVER_PPUSH_LONG
CPX_CALLBACK_INFO_CROSSOVER_PEXCH_LONG = _pycplex_platform.CPX_CALLBACK_INFO_CROSSOVER_PEXCH_LONG
CPX_CALLBACK_INFO_CROSSOVER_DPUSH_LONG = _pycplex_platform.CPX_CALLBACK_INFO_CROSSOVER_DPUSH_LONG
CPX_CALLBACK_INFO_CROSSOVER_DEXCH_LONG = _pycplex_platform.CPX_CALLBACK_INFO_CROSSOVER_DEXCH_LONG
CPX_CALLBACK_INFO_PRESOLVE_AGGSUBST_LONG = _pycplex_platform.CPX_CALLBACK_INFO_PRESOLVE_AGGSUBST_LONG
CPX_CALLBACK_INFO_PRESOLVE_COEFFS_LONG = _pycplex_platform.CPX_CALLBACK_INFO_PRESOLVE_COEFFS_LONG
CPX_CALLBACK_INFO_ENDDETTIME = _pycplex_platform.CPX_CALLBACK_INFO_ENDDETTIME
CPX_CALLBACK_INFO_STARTTIME = _pycplex_platform.CPX_CALLBACK_INFO_STARTTIME
CPX_CALLBACK_INFO_STARTDETTIME = _pycplex_platform.CPX_CALLBACK_INFO_STARTDETTIME
CPX_TUNE_AVERAGE = _pycplex_platform.CPX_TUNE_AVERAGE
CPX_TUNE_MINMAX = _pycplex_platform.CPX_TUNE_MINMAX
CPX_TUNE_ABORT = _pycplex_platform.CPX_TUNE_ABORT
CPX_TUNE_TILIM = _pycplex_platform.CPX_TUNE_TILIM
CPX_TUNE_DETTILIM = _pycplex_platform.CPX_TUNE_DETTILIM
CPX_FEASOPT_MIN_SUM = _pycplex_platform.CPX_FEASOPT_MIN_SUM
CPX_FEASOPT_OPT_SUM = _pycplex_platform.CPX_FEASOPT_OPT_SUM
CPX_FEASOPT_MIN_INF = _pycplex_platform.CPX_FEASOPT_MIN_INF
CPX_FEASOPT_OPT_INF = _pycplex_platform.CPX_FEASOPT_OPT_INF
CPX_FEASOPT_MIN_QUAD = _pycplex_platform.CPX_FEASOPT_MIN_QUAD
CPX_FEASOPT_OPT_QUAD = _pycplex_platform.CPX_FEASOPT_OPT_QUAD
CPX_BENDERSSTRATEGY_OFF = _pycplex_platform.CPX_BENDERSSTRATEGY_OFF
CPX_BENDERSSTRATEGY_AUTO = _pycplex_platform.CPX_BENDERSSTRATEGY_AUTO
CPX_BENDERSSTRATEGY_USER = _pycplex_platform.CPX_BENDERSSTRATEGY_USER
CPX_BENDERSSTRATEGY_WORKERS = _pycplex_platform.CPX_BENDERSSTRATEGY_WORKERS
CPX_BENDERSSTRATEGY_FULL = _pycplex_platform.CPX_BENDERSSTRATEGY_FULL
CPX_ANNOTATIONDATA_LONG = _pycplex_platform.CPX_ANNOTATIONDATA_LONG
CPX_ANNOTATIONDATA_DOUBLE = _pycplex_platform.CPX_ANNOTATIONDATA_DOUBLE
CPX_ANNOTATIONOBJ_OBJ = _pycplex_platform.CPX_ANNOTATIONOBJ_OBJ
CPX_ANNOTATIONOBJ_COL = _pycplex_platform.CPX_ANNOTATIONOBJ_COL
CPX_ANNOTATIONOBJ_ROW = _pycplex_platform.CPX_ANNOTATIONOBJ_ROW
CPX_ANNOTATIONOBJ_SOS = _pycplex_platform.CPX_ANNOTATIONOBJ_SOS
CPX_ANNOTATIONOBJ_IND = _pycplex_platform.CPX_ANNOTATIONOBJ_IND
CPX_ANNOTATIONOBJ_QC = _pycplex_platform.CPX_ANNOTATIONOBJ_QC
CPX_ANNOTATIONOBJ_LAST = _pycplex_platform.CPX_ANNOTATIONOBJ_LAST
CPXIIS_COMPLETE = _pycplex_platform.CPXIIS_COMPLETE
CPXIIS_PARTIAL = _pycplex_platform.CPXIIS_PARTIAL
CPXIIS_AT_LOWER = _pycplex_platform.CPXIIS_AT_LOWER
CPXIIS_FIXED = _pycplex_platform.CPXIIS_FIXED
CPXIIS_AT_UPPER = _pycplex_platform.CPXIIS_AT_UPPER
CPX_BARORDER_AUTO = _pycplex_platform.CPX_BARORDER_AUTO
CPX_BARORDER_AMD = _pycplex_platform.CPX_BARORDER_AMD
CPX_BARORDER_AMF = _pycplex_platform.CPX_BARORDER_AMF
CPX_BARORDER_ND = _pycplex_platform.CPX_BARORDER_ND
CPX_MIPEMPHASIS_BALANCED = _pycplex_platform.CPX_MIPEMPHASIS_BALANCED
CPX_MIPEMPHASIS_FEASIBILITY = _pycplex_platform.CPX_MIPEMPHASIS_FEASIBILITY
CPX_MIPEMPHASIS_OPTIMALITY = _pycplex_platform.CPX_MIPEMPHASIS_OPTIMALITY
CPX_MIPEMPHASIS_BESTBOUND = _pycplex_platform.CPX_MIPEMPHASIS_BESTBOUND
CPX_MIPEMPHASIS_HIDDENFEAS = _pycplex_platform.CPX_MIPEMPHASIS_HIDDENFEAS
CPX_MIPEMPHASIS_HEURISTIC = _pycplex_platform.CPX_MIPEMPHASIS_HEURISTIC
CPX_TYPE_VAR = _pycplex_platform.CPX_TYPE_VAR
CPX_TYPE_SOS1 = _pycplex_platform.CPX_TYPE_SOS1
CPX_TYPE_SOS2 = _pycplex_platform.CPX_TYPE_SOS2
CPX_TYPE_USER = _pycplex_platform.CPX_TYPE_USER
CPX_TYPE_ANY = _pycplex_platform.CPX_TYPE_ANY
CPX_VARSEL_MININFEAS = _pycplex_platform.CPX_VARSEL_MININFEAS
CPX_VARSEL_DEFAULT = _pycplex_platform.CPX_VARSEL_DEFAULT
CPX_VARSEL_MAXINFEAS = _pycplex_platform.CPX_VARSEL_MAXINFEAS
CPX_VARSEL_PSEUDO = _pycplex_platform.CPX_VARSEL_PSEUDO
CPX_VARSEL_STRONG = _pycplex_platform.CPX_VARSEL_STRONG
CPX_VARSEL_PSEUDOREDUCED = _pycplex_platform.CPX_VARSEL_PSEUDOREDUCED
CPX_NODESEL_DFS = _pycplex_platform.CPX_NODESEL_DFS
CPX_NODESEL_BESTBOUND = _pycplex_platform.CPX_NODESEL_BESTBOUND
CPX_NODESEL_BESTEST = _pycplex_platform.CPX_NODESEL_BESTEST
CPX_NODESEL_BESTEST_ALT = _pycplex_platform.CPX_NODESEL_BESTEST_ALT
CPX_MIPORDER_COST = _pycplex_platform.CPX_MIPORDER_COST
CPX_MIPORDER_BOUNDS = _pycplex_platform.CPX_MIPORDER_BOUNDS
CPX_MIPORDER_SCALEDCOST = _pycplex_platform.CPX_MIPORDER_SCALEDCOST
CPX_BRANCH_GLOBAL = _pycplex_platform.CPX_BRANCH_GLOBAL
CPX_BRANCH_DOWN = _pycplex_platform.CPX_BRANCH_DOWN
CPX_BRANCH_UP = _pycplex_platform.CPX_BRANCH_UP
CPX_BRDIR_DOWN = _pycplex_platform.CPX_BRDIR_DOWN
CPX_BRDIR_AUTO = _pycplex_platform.CPX_BRDIR_AUTO
CPX_BRDIR_UP = _pycplex_platform.CPX_BRDIR_UP
CPX_CUT_COVER = _pycplex_platform.CPX_CUT_COVER
CPX_CUT_GUBCOVER = _pycplex_platform.CPX_CUT_GUBCOVER
CPX_CUT_FLOWCOVER = _pycplex_platform.CPX_CUT_FLOWCOVER
CPX_CUT_CLIQUE = _pycplex_platform.CPX_CUT_CLIQUE
CPX_CUT_FRAC = _pycplex_platform.CPX_CUT_FRAC
CPX_CUT_MIR = _pycplex_platform.CPX_CUT_MIR
CPX_CUT_FLOWPATH = _pycplex_platform.CPX_CUT_FLOWPATH
CPX_CUT_DISJ = _pycplex_platform.CPX_CUT_DISJ
CPX_CUT_IMPLBD = _pycplex_platform.CPX_CUT_IMPLBD
CPX_CUT_ZEROHALF = _pycplex_platform.CPX_CUT_ZEROHALF
CPX_CUT_MCF = _pycplex_platform.CPX_CUT_MCF
CPX_CUT_LOCALCOVER = _pycplex_platform.CPX_CUT_LOCALCOVER
CPX_CUT_TIGHTEN = _pycplex_platform.CPX_CUT_TIGHTEN
CPX_CUT_OBJDISJ = _pycplex_platform.CPX_CUT_OBJDISJ
CPX_CUT_LANDP = _pycplex_platform.CPX_CUT_LANDP
CPX_CUT_USER = _pycplex_platform.CPX_CUT_USER
CPX_CUT_TABLE = _pycplex_platform.CPX_CUT_TABLE
CPX_CUT_SOLNPOOL = _pycplex_platform.CPX_CUT_SOLNPOOL
CPX_CUT_LOCALIMPLBD = _pycplex_platform.CPX_CUT_LOCALIMPLBD
CPX_CUT_BQP = _pycplex_platform.CPX_CUT_BQP
CPX_CUT_RLT = _pycplex_platform.CPX_CUT_RLT
CPX_CUT_BENDERS = _pycplex_platform.CPX_CUT_BENDERS
CPX_CUT_NUM_TYPES = _pycplex_platform.CPX_CUT_NUM_TYPES
CPX_MIPSEARCH_AUTO = _pycplex_platform.CPX_MIPSEARCH_AUTO
CPX_MIPSEARCH_TRADITIONAL = _pycplex_platform.CPX_MIPSEARCH_TRADITIONAL
CPX_MIPSEARCH_DYNAMIC = _pycplex_platform.CPX_MIPSEARCH_DYNAMIC
CPX_MIPKAPPA_OFF = _pycplex_platform.CPX_MIPKAPPA_OFF
CPX_MIPKAPPA_AUTO = _pycplex_platform.CPX_MIPKAPPA_AUTO
CPX_MIPKAPPA_SAMPLE = _pycplex_platform.CPX_MIPKAPPA_SAMPLE
CPX_MIPKAPPA_FULL = _pycplex_platform.CPX_MIPKAPPA_FULL
CPX_MIPSTART_AUTO = _pycplex_platform.CPX_MIPSTART_AUTO
CPX_MIPSTART_CHECKFEAS = _pycplex_platform.CPX_MIPSTART_CHECKFEAS
CPX_MIPSTART_SOLVEFIXED = _pycplex_platform.CPX_MIPSTART_SOLVEFIXED
CPX_MIPSTART_SOLVEMIP = _pycplex_platform.CPX_MIPSTART_SOLVEMIP
CPX_MIPSTART_REPAIR = _pycplex_platform.CPX_MIPSTART_REPAIR
CPX_MIPSTART_NOCHECK = _pycplex_platform.CPX_MIPSTART_NOCHECK
CPX_CALLBACK_MIP = _pycplex_platform.CPX_CALLBACK_MIP
CPX_CALLBACK_MIP_BRANCH = _pycplex_platform.CPX_CALLBACK_MIP_BRANCH
CPX_CALLBACK_MIP_NODE = _pycplex_platform.CPX_CALLBACK_MIP_NODE
CPX_CALLBACK_MIP_HEURISTIC = _pycplex_platform.CPX_CALLBACK_MIP_HEURISTIC
CPX_CALLBACK_MIP_SOLVE = _pycplex_platform.CPX_CALLBACK_MIP_SOLVE
CPX_CALLBACK_MIP_CUT_LOOP = _pycplex_platform.CPX_CALLBACK_MIP_CUT_LOOP
CPX_CALLBACK_MIP_PROBE = _pycplex_platform.CPX_CALLBACK_MIP_PROBE
CPX_CALLBACK_MIP_FRACCUT = _pycplex_platform.CPX_CALLBACK_MIP_FRACCUT
CPX_CALLBACK_MIP_DISJCUT = _pycplex_platform.CPX_CALLBACK_MIP_DISJCUT
CPX_CALLBACK_MIP_FLOWMIR = _pycplex_platform.CPX_CALLBACK_MIP_FLOWMIR
CPX_CALLBACK_MIP_INCUMBENT_NODESOLN = _pycplex_platform.CPX_CALLBACK_MIP_INCUMBENT_NODESOLN
CPX_CALLBACK_MIP_DELETENODE = _pycplex_platform.CPX_CALLBACK_MIP_DELETENODE
CPX_CALLBACK_MIP_BRANCH_NOSOLN = _pycplex_platform.CPX_CALLBACK_MIP_BRANCH_NOSOLN
CPX_CALLBACK_MIP_CUT_LAST = _pycplex_platform.CPX_CALLBACK_MIP_CUT_LAST
CPX_CALLBACK_MIP_CUT_FEAS = _pycplex_platform.CPX_CALLBACK_MIP_CUT_FEAS
CPX_CALLBACK_MIP_CUT_UNBD = _pycplex_platform.CPX_CALLBACK_MIP_CUT_UNBD
CPX_CALLBACK_MIP_INCUMBENT_HEURSOLN = _pycplex_platform.CPX_CALLBACK_MIP_INCUMBENT_HEURSOLN
CPX_CALLBACK_MIP_INCUMBENT_USERSOLN = _pycplex_platform.CPX_CALLBACK_MIP_INCUMBENT_USERSOLN
CPX_CALLBACK_MIP_INCUMBENT_MIPSTART = _pycplex_platform.CPX_CALLBACK_MIP_INCUMBENT_MIPSTART
CPX_CALLBACK_INFO_BEST_INTEGER = _pycplex_platform.CPX_CALLBACK_INFO_BEST_INTEGER
CPX_CALLBACK_INFO_BEST_REMAINING = _pycplex_platform.CPX_CALLBACK_INFO_BEST_REMAINING
CPX_CALLBACK_INFO_NODE_COUNT = _pycplex_platform.CPX_CALLBACK_INFO_NODE_COUNT
CPX_CALLBACK_INFO_NODES_LEFT = _pycplex_platform.CPX_CALLBACK_INFO_NODES_LEFT
CPX_CALLBACK_INFO_MIP_ITERATIONS = _pycplex_platform.CPX_CALLBACK_INFO_MIP_ITERATIONS
CPX_CALLBACK_INFO_CUTOFF = _pycplex_platform.CPX_CALLBACK_INFO_CUTOFF
CPX_CALLBACK_INFO_CLIQUE_COUNT = _pycplex_platform.CPX_CALLBACK_INFO_CLIQUE_COUNT
CPX_CALLBACK_INFO_COVER_COUNT = _pycplex_platform.CPX_CALLBACK_INFO_COVER_COUNT
CPX_CALLBACK_INFO_MIP_FEAS = _pycplex_platform.CPX_CALLBACK_INFO_MIP_FEAS
CPX_CALLBACK_INFO_FLOWCOVER_COUNT = _pycplex_platform.CPX_CALLBACK_INFO_FLOWCOVER_COUNT
CPX_CALLBACK_INFO_GUBCOVER_COUNT = _pycplex_platform.CPX_CALLBACK_INFO_GUBCOVER_COUNT
CPX_CALLBACK_INFO_IMPLBD_COUNT = _pycplex_platform.CPX_CALLBACK_INFO_IMPLBD_COUNT
CPX_CALLBACK_INFO_PROBE_PHASE = _pycplex_platform.CPX_CALLBACK_INFO_PROBE_PHASE
CPX_CALLBACK_INFO_PROBE_PROGRESS = _pycplex_platform.CPX_CALLBACK_INFO_PROBE_PROGRESS
CPX_CALLBACK_INFO_FRACCUT_COUNT = _pycplex_platform.CPX_CALLBACK_INFO_FRACCUT_COUNT
CPX_CALLBACK_INFO_FRACCUT_PROGRESS = _pycplex_platform.CPX_CALLBACK_INFO_FRACCUT_PROGRESS
CPX_CALLBACK_INFO_DISJCUT_COUNT = _pycplex_platform.CPX_CALLBACK_INFO_DISJCUT_COUNT
CPX_CALLBACK_INFO_DISJCUT_PROGRESS = _pycplex_platform.CPX_CALLBACK_INFO_DISJCUT_PROGRESS
CPX_CALLBACK_INFO_FLOWPATH_COUNT = _pycplex_platform.CPX_CALLBACK_INFO_FLOWPATH_COUNT
CPX_CALLBACK_INFO_MIRCUT_COUNT = _pycplex_platform.CPX_CALLBACK_INFO_MIRCUT_COUNT
CPX_CALLBACK_INFO_FLOWMIR_PROGRESS = _pycplex_platform.CPX_CALLBACK_INFO_FLOWMIR_PROGRESS
CPX_CALLBACK_INFO_ZEROHALFCUT_COUNT = _pycplex_platform.CPX_CALLBACK_INFO_ZEROHALFCUT_COUNT
CPX_CALLBACK_INFO_MY_THREAD_NUM = _pycplex_platform.CPX_CALLBACK_INFO_MY_THREAD_NUM
CPX_CALLBACK_INFO_USER_THREADS = _pycplex_platform.CPX_CALLBACK_INFO_USER_THREADS
CPX_CALLBACK_INFO_MIP_REL_GAP = _pycplex_platform.CPX_CALLBACK_INFO_MIP_REL_GAP
CPX_CALLBACK_INFO_MCFCUT_COUNT = _pycplex_platform.CPX_CALLBACK_INFO_MCFCUT_COUNT
CPX_CALLBACK_INFO_KAPPA_STABLE = _pycplex_platform.CPX_CALLBACK_INFO_KAPPA_STABLE
CPX_CALLBACK_INFO_KAPPA_SUSPICIOUS = _pycplex_platform.CPX_CALLBACK_INFO_KAPPA_SUSPICIOUS
CPX_CALLBACK_INFO_KAPPA_UNSTABLE = _pycplex_platform.CPX_CALLBACK_INFO_KAPPA_UNSTABLE
CPX_CALLBACK_INFO_KAPPA_ILLPOSED = _pycplex_platform.CPX_CALLBACK_INFO_KAPPA_ILLPOSED
CPX_CALLBACK_INFO_KAPPA_MAX = _pycplex_platform.CPX_CALLBACK_INFO_KAPPA_MAX
CPX_CALLBACK_INFO_KAPPA_ATTENTION = _pycplex_platform.CPX_CALLBACK_INFO_KAPPA_ATTENTION
CPX_CALLBACK_INFO_LANDPCUT_COUNT = _pycplex_platform.CPX_CALLBACK_INFO_LANDPCUT_COUNT
CPX_CALLBACK_INFO_USERCUT_COUNT = _pycplex_platform.CPX_CALLBACK_INFO_USERCUT_COUNT
CPX_CALLBACK_INFO_TABLECUT_COUNT = _pycplex_platform.CPX_CALLBACK_INFO_TABLECUT_COUNT
CPX_CALLBACK_INFO_SOLNPOOLCUT_COUNT = _pycplex_platform.CPX_CALLBACK_INFO_SOLNPOOLCUT_COUNT
CPX_CALLBACK_INFO_BENDERS_COUNT = _pycplex_platform.CPX_CALLBACK_INFO_BENDERS_COUNT
CPX_CALLBACK_INFO_NODE_COUNT_LONG = _pycplex_platform.CPX_CALLBACK_INFO_NODE_COUNT_LONG
CPX_CALLBACK_INFO_NODES_LEFT_LONG = _pycplex_platform.CPX_CALLBACK_INFO_NODES_LEFT_LONG
CPX_CALLBACK_INFO_MIP_ITERATIONS_LONG = _pycplex_platform.CPX_CALLBACK_INFO_MIP_ITERATIONS_LONG
CPX_CALLBACK_INFO_LAZY_SOURCE = _pycplex_platform.CPX_CALLBACK_INFO_LAZY_SOURCE
CPX_CALLBACK_INFO_NODE_SIINF = _pycplex_platform.CPX_CALLBACK_INFO_NODE_SIINF
CPX_CALLBACK_INFO_NODE_NIINF = _pycplex_platform.CPX_CALLBACK_INFO_NODE_NIINF
CPX_CALLBACK_INFO_NODE_ESTIMATE = _pycplex_platform.CPX_CALLBACK_INFO_NODE_ESTIMATE
CPX_CALLBACK_INFO_NODE_DEPTH = _pycplex_platform.CPX_CALLBACK_INFO_NODE_DEPTH
CPX_CALLBACK_INFO_NODE_OBJVAL = _pycplex_platform.CPX_CALLBACK_INFO_NODE_OBJVAL
CPX_CALLBACK_INFO_NODE_TYPE = _pycplex_platform.CPX_CALLBACK_INFO_NODE_TYPE
CPX_CALLBACK_INFO_NODE_VAR = _pycplex_platform.CPX_CALLBACK_INFO_NODE_VAR
CPX_CALLBACK_INFO_NODE_SOS = _pycplex_platform.CPX_CALLBACK_INFO_NODE_SOS
CPX_CALLBACK_INFO_NODE_SEQNUM = _pycplex_platform.CPX_CALLBACK_INFO_NODE_SEQNUM
CPX_CALLBACK_INFO_NODE_USERHANDLE = _pycplex_platform.CPX_CALLBACK_INFO_NODE_USERHANDLE
CPX_CALLBACK_INFO_NODE_NODENUM = _pycplex_platform.CPX_CALLBACK_INFO_NODE_NODENUM
CPX_CALLBACK_INFO_NODE_SEQNUM_LONG = _pycplex_platform.CPX_CALLBACK_INFO_NODE_SEQNUM_LONG
CPX_CALLBACK_INFO_NODE_NODENUM_LONG = _pycplex_platform.CPX_CALLBACK_INFO_NODE_NODENUM_LONG
CPX_CALLBACK_INFO_NODE_DEPTH_LONG = _pycplex_platform.CPX_CALLBACK_INFO_NODE_DEPTH_LONG
CPX_CALLBACK_INFO_SOS_TYPE = _pycplex_platform.CPX_CALLBACK_INFO_SOS_TYPE
CPX_CALLBACK_INFO_SOS_SIZE = _pycplex_platform.CPX_CALLBACK_INFO_SOS_SIZE
CPX_CALLBACK_INFO_SOS_IS_FEASIBLE = _pycplex_platform.CPX_CALLBACK_INFO_SOS_IS_FEASIBLE
CPX_CALLBACK_INFO_SOS_MEMBER_INDEX = _pycplex_platform.CPX_CALLBACK_INFO_SOS_MEMBER_INDEX
CPX_CALLBACK_INFO_SOS_MEMBER_REFVAL = _pycplex_platform.CPX_CALLBACK_INFO_SOS_MEMBER_REFVAL
CPX_CALLBACK_INFO_SOS_NUM = _pycplex_platform.CPX_CALLBACK_INFO_SOS_NUM
CPX_CALLBACK_INFO_IC_NUM = _pycplex_platform.CPX_CALLBACK_INFO_IC_NUM
CPX_CALLBACK_INFO_IC_IMPLYING_VAR = _pycplex_platform.CPX_CALLBACK_INFO_IC_IMPLYING_VAR
CPX_CALLBACK_INFO_IC_IMPLIED_VAR = _pycplex_platform.CPX_CALLBACK_INFO_IC_IMPLIED_VAR
CPX_CALLBACK_INFO_IC_SENSE = _pycplex_platform.CPX_CALLBACK_INFO_IC_SENSE
CPX_CALLBACK_INFO_IC_COMPL = _pycplex_platform.CPX_CALLBACK_INFO_IC_COMPL
CPX_CALLBACK_INFO_IC_RHS = _pycplex_platform.CPX_CALLBACK_INFO_IC_RHS
CPX_CALLBACK_INFO_IC_IS_FEASIBLE = _pycplex_platform.CPX_CALLBACK_INFO_IC_IS_FEASIBLE
CPX_INCUMBENT_ID = _pycplex_platform.CPX_INCUMBENT_ID
CPX_CALLBACK_DEFAULT = _pycplex_platform.CPX_CALLBACK_DEFAULT
CPX_CALLBACK_FAIL = _pycplex_platform.CPX_CALLBACK_FAIL
CPX_CALLBACK_SET = _pycplex_platform.CPX_CALLBACK_SET
CPX_CALLBACK_ABORT_CUT_LOOP = _pycplex_platform.CPX_CALLBACK_ABORT_CUT_LOOP
CPX_USECUT_FORCE = _pycplex_platform.CPX_USECUT_FORCE
CPX_USECUT_PURGE = _pycplex_platform.CPX_USECUT_PURGE
CPX_USECUT_FILTER = _pycplex_platform.CPX_USECUT_FILTER
CPX_INTEGER_FEASIBLE = _pycplex_platform.CPX_INTEGER_FEASIBLE
CPX_INTEGER_INFEASIBLE = _pycplex_platform.CPX_INTEGER_INFEASIBLE
CPX_IMPLIED_INTEGER_FEASIBLE = _pycplex_platform.CPX_IMPLIED_INTEGER_FEASIBLE
CPX_CON_LOWER_BOUND = _pycplex_platform.CPX_CON_LOWER_BOUND
CPX_CON_UPPER_BOUND = _pycplex_platform.CPX_CON_UPPER_BOUND
CPX_CON_LINEAR = _pycplex_platform.CPX_CON_LINEAR
CPX_CON_QUADRATIC = _pycplex_platform.CPX_CON_QUADRATIC
CPX_CON_SOS = _pycplex_platform.CPX_CON_SOS
CPX_CON_INDICATOR = _pycplex_platform.CPX_CON_INDICATOR
CPX_CON_PWL = _pycplex_platform.CPX_CON_PWL
CPX_CON_ABS = _pycplex_platform.CPX_CON_ABS
CPX_CON_MINEXPR = _pycplex_platform.CPX_CON_MINEXPR
CPX_CON_MAXEXPR = _pycplex_platform.CPX_CON_MAXEXPR
CPX_CON_LAST_CONTYPE = _pycplex_platform.CPX_CON_LAST_CONTYPE
CPX_INDICATOR_IF = _pycplex_platform.CPX_INDICATOR_IF
CPX_INDICATOR_ONLYIF = _pycplex_platform.CPX_INDICATOR_ONLYIF
CPX_INDICATOR_IFANDONLYIF = _pycplex_platform.CPX_INDICATOR_IFANDONLYIF
CPXNET_NO_DISPLAY_OBJECTIVE = _pycplex_platform.CPXNET_NO_DISPLAY_OBJECTIVE
CPXNET_TRUE_OBJECTIVE = _pycplex_platform.CPXNET_TRUE_OBJECTIVE
CPXNET_PENALIZED_OBJECTIVE = _pycplex_platform.CPXNET_PENALIZED_OBJECTIVE
CPXNET_PRICE_AUTO = _pycplex_platform.CPXNET_PRICE_AUTO
CPXNET_PRICE_PARTIAL = _pycplex_platform.CPXNET_PRICE_PARTIAL
CPXNET_PRICE_MULT_PART = _pycplex_platform.CPXNET_PRICE_MULT_PART
CPXNET_PRICE_SORT_MULT_PART = _pycplex_platform.CPXNET_PRICE_SORT_MULT_PART
CPX_NETFIND_PURE = _pycplex_platform.CPX_NETFIND_PURE
CPX_NETFIND_REFLECT = _pycplex_platform.CPX_NETFIND_REFLECT
CPX_NETFIND_SCALE = _pycplex_platform.CPX_NETFIND_SCALE
CPX_QCPDUALS_NO = _pycplex_platform.CPX_QCPDUALS_NO
CPX_QCPDUALS_IFPOSSIBLE = _pycplex_platform.CPX_QCPDUALS_IFPOSSIBLE
CPX_QCPDUALS_FORCE = _pycplex_platform.CPX_QCPDUALS_FORCE
CPX_CPXAUTOCONSTANTS_H_H = _pycplex_platform.CPX_CPXAUTOCONSTANTS_H_H
CPX_BENDERS_ANNOTATION = _pycplex_platform.CPX_BENDERS_ANNOTATION
CPX_BENDERS_MASTERVALUE = _pycplex_platform.CPX_BENDERS_MASTERVALUE
CPX_BIGINT = _pycplex_platform.CPX_BIGINT
CPX_BIGLONG = _pycplex_platform.CPX_BIGLONG
CPX_CALLBACKCONTEXT_BRANCHING = _pycplex_platform.CPX_CALLBACKCONTEXT_BRANCHING
CPX_CALLBACKCONTEXT_CANDIDATE = _pycplex_platform.CPX_CALLBACKCONTEXT_CANDIDATE
CPX_CALLBACKCONTEXT_GLOBAL_PROGRESS = _pycplex_platform.CPX_CALLBACKCONTEXT_GLOBAL_PROGRESS
CPX_CALLBACKCONTEXT_LOCAL_PROGRESS = _pycplex_platform.CPX_CALLBACKCONTEXT_LOCAL_PROGRESS
CPX_CALLBACKCONTEXT_RELAXATION = _pycplex_platform.CPX_CALLBACKCONTEXT_RELAXATION
CPX_CALLBACKCONTEXT_THREAD_DOWN = _pycplex_platform.CPX_CALLBACKCONTEXT_THREAD_DOWN
CPX_CALLBACKCONTEXT_THREAD_UP = _pycplex_platform.CPX_CALLBACKCONTEXT_THREAD_UP
CPX_DUAL_OBJ = _pycplex_platform.CPX_DUAL_OBJ
CPX_EXACT_KAPPA = _pycplex_platform.CPX_EXACT_KAPPA
CPX_KAPPA = _pycplex_platform.CPX_KAPPA
CPX_KAPPA_ATTENTION = _pycplex_platform.CPX_KAPPA_ATTENTION
CPX_KAPPA_ILLPOSED = _pycplex_platform.CPX_KAPPA_ILLPOSED
CPX_KAPPA_MAX = _pycplex_platform.CPX_KAPPA_MAX
CPX_KAPPA_STABLE = _pycplex_platform.CPX_KAPPA_STABLE
CPX_KAPPA_SUSPICIOUS = _pycplex_platform.CPX_KAPPA_SUSPICIOUS
CPX_KAPPA_UNSTABLE = _pycplex_platform.CPX_KAPPA_UNSTABLE
CPX_LAZYCONSTRAINTCALLBACK_HEUR = _pycplex_platform.CPX_LAZYCONSTRAINTCALLBACK_HEUR
CPX_LAZYCONSTRAINTCALLBACK_MIPSTART = _pycplex_platform.CPX_LAZYCONSTRAINTCALLBACK_MIPSTART
CPX_LAZYCONSTRAINTCALLBACK_NODE = _pycplex_platform.CPX_LAZYCONSTRAINTCALLBACK_NODE
CPX_LAZYCONSTRAINTCALLBACK_USER = _pycplex_platform.CPX_LAZYCONSTRAINTCALLBACK_USER
CPX_MAX_COMP_SLACK = _pycplex_platform.CPX_MAX_COMP_SLACK
CPX_MAX_DUAL_INFEAS = _pycplex_platform.CPX_MAX_DUAL_INFEAS
CPX_MAX_DUAL_RESIDUAL = _pycplex_platform.CPX_MAX_DUAL_RESIDUAL
CPX_MAX_INDSLACK_INFEAS = _pycplex_platform.CPX_MAX_INDSLACK_INFEAS
CPX_MAX_INT_INFEAS = _pycplex_platform.CPX_MAX_INT_INFEAS
CPX_MAX_PI = _pycplex_platform.CPX_MAX_PI
CPX_MAX_PRIMAL_INFEAS = _pycplex_platform.CPX_MAX_PRIMAL_INFEAS
CPX_MAX_PRIMAL_RESIDUAL = _pycplex_platform.CPX_MAX_PRIMAL_RESIDUAL
CPX_MAX_PWLSLACK_INFEAS = _pycplex_platform.CPX_MAX_PWLSLACK_INFEAS
CPX_MAX_QCPRIMAL_RESIDUAL = _pycplex_platform.CPX_MAX_QCPRIMAL_RESIDUAL
CPX_MAX_QCSLACK = _pycplex_platform.CPX_MAX_QCSLACK
CPX_MAX_QCSLACK_INFEAS = _pycplex_platform.CPX_MAX_QCSLACK_INFEAS
CPX_MAX_RED_COST = _pycplex_platform.CPX_MAX_RED_COST
CPX_MAX_SCALED_DUAL_INFEAS = _pycplex_platform.CPX_MAX_SCALED_DUAL_INFEAS
CPX_MAX_SCALED_DUAL_RESIDUAL = _pycplex_platform.CPX_MAX_SCALED_DUAL_RESIDUAL
CPX_MAX_SCALED_PI = _pycplex_platform.CPX_MAX_SCALED_PI
CPX_MAX_SCALED_PRIMAL_INFEAS = _pycplex_platform.CPX_MAX_SCALED_PRIMAL_INFEAS
CPX_MAX_SCALED_PRIMAL_RESIDUAL = _pycplex_platform.CPX_MAX_SCALED_PRIMAL_RESIDUAL
CPX_MAX_SCALED_RED_COST = _pycplex_platform.CPX_MAX_SCALED_RED_COST
CPX_MAX_SCALED_SLACK = _pycplex_platform.CPX_MAX_SCALED_SLACK
CPX_MAX_SCALED_X = _pycplex_platform.CPX_MAX_SCALED_X
CPX_MAX_SLACK = _pycplex_platform.CPX_MAX_SLACK
CPX_MAX_X = _pycplex_platform.CPX_MAX_X
CPX_MULTIOBJ_BARITCNT = _pycplex_platform.CPX_MULTIOBJ_BARITCNT
CPX_MULTIOBJ_BESTOBJVAL = _pycplex_platform.CPX_MULTIOBJ_BESTOBJVAL
CPX_MULTIOBJ_BLEND = _pycplex_platform.CPX_MULTIOBJ_BLEND
CPX_MULTIOBJ_DEGCNT = _pycplex_platform.CPX_MULTIOBJ_DEGCNT
CPX_MULTIOBJ_DETTIME = _pycplex_platform.CPX_MULTIOBJ_DETTIME
CPX_MULTIOBJ_DEXCH = _pycplex_platform.CPX_MULTIOBJ_DEXCH
CPX_MULTIOBJ_DFEAS = _pycplex_platform.CPX_MULTIOBJ_DFEAS
CPX_MULTIOBJ_DPUSH = _pycplex_platform.CPX_MULTIOBJ_DPUSH
CPX_MULTIOBJ_ERROR = _pycplex_platform.CPX_MULTIOBJ_ERROR
CPX_MULTIOBJ_ITCNT = _pycplex_platform.CPX_MULTIOBJ_ITCNT
CPX_MULTIOBJ_METHOD = _pycplex_platform.CPX_MULTIOBJ_METHOD
CPX_MULTIOBJ_NODECNT = _pycplex_platform.CPX_MULTIOBJ_NODECNT
CPX_MULTIOBJ_NODELEFTCNT = _pycplex_platform.CPX_MULTIOBJ_NODELEFTCNT
CPX_MULTIOBJ_OBJVAL = _pycplex_platform.CPX_MULTIOBJ_OBJVAL
CPX_MULTIOBJ_PEXCH = _pycplex_platform.CPX_MULTIOBJ_PEXCH
CPX_MULTIOBJ_PFEAS = _pycplex_platform.CPX_MULTIOBJ_PFEAS
CPX_MULTIOBJ_PHASE1CNT = _pycplex_platform.CPX_MULTIOBJ_PHASE1CNT
CPX_MULTIOBJ_PPUSH = _pycplex_platform.CPX_MULTIOBJ_PPUSH
CPX_MULTIOBJ_PRIORITY = _pycplex_platform.CPX_MULTIOBJ_PRIORITY
CPX_MULTIOBJ_SIFTITCNT = _pycplex_platform.CPX_MULTIOBJ_SIFTITCNT
CPX_MULTIOBJ_SIFTPHASE1CNT = _pycplex_platform.CPX_MULTIOBJ_SIFTPHASE1CNT
CPX_MULTIOBJ_STATUS = _pycplex_platform.CPX_MULTIOBJ_STATUS
CPX_MULTIOBJ_TIME = _pycplex_platform.CPX_MULTIOBJ_TIME
CPX_NO_PRIORITY_CHANGE = _pycplex_platform.CPX_NO_PRIORITY_CHANGE
CPX_OBJ_GAP = _pycplex_platform.CPX_OBJ_GAP
CPX_PRIMAL_OBJ = _pycplex_platform.CPX_PRIMAL_OBJ
CPX_RELAXATION_FLAG_NOSOLVE = _pycplex_platform.CPX_RELAXATION_FLAG_NOSOLVE
CPX_SOLNPOOL_DIV = _pycplex_platform.CPX_SOLNPOOL_DIV
CPX_SOLNPOOL_FIFO = _pycplex_platform.CPX_SOLNPOOL_FIFO
CPX_SOLNPOOL_FILTER_DIVERSITY = _pycplex_platform.CPX_SOLNPOOL_FILTER_DIVERSITY
CPX_SOLNPOOL_FILTER_RANGE = _pycplex_platform.CPX_SOLNPOOL_FILTER_RANGE
CPX_SOLNPOOL_OBJ = _pycplex_platform.CPX_SOLNPOOL_OBJ
CPX_STAT_ABORT_DETTIME_LIM = _pycplex_platform.CPX_STAT_ABORT_DETTIME_LIM
CPX_STAT_ABORT_DUAL_OBJ_LIM = _pycplex_platform.CPX_STAT_ABORT_DUAL_OBJ_LIM
CPX_STAT_ABORT_IT_LIM = _pycplex_platform.CPX_STAT_ABORT_IT_LIM
CPX_STAT_ABORT_OBJ_LIM = _pycplex_platform.CPX_STAT_ABORT_OBJ_LIM
CPX_STAT_ABORT_PRIM_OBJ_LIM = _pycplex_platform.CPX_STAT_ABORT_PRIM_OBJ_LIM
CPX_STAT_ABORT_TIME_LIM = _pycplex_platform.CPX_STAT_ABORT_TIME_LIM
CPX_STAT_ABORT_USER = _pycplex_platform.CPX_STAT_ABORT_USER
CPX_STAT_BENDERS_NUM_BEST = _pycplex_platform.CPX_STAT_BENDERS_NUM_BEST
CPX_STAT_CONFLICT_ABORT_CONTRADICTION = _pycplex_platform.CPX_STAT_CONFLICT_ABORT_CONTRADICTION
CPX_STAT_CONFLICT_ABORT_DETTIME_LIM = _pycplex_platform.CPX_STAT_CONFLICT_ABORT_DETTIME_LIM
CPX_STAT_CONFLICT_ABORT_IT_LIM = _pycplex_platform.CPX_STAT_CONFLICT_ABORT_IT_LIM
CPX_STAT_CONFLICT_ABORT_MEM_LIM = _pycplex_platform.CPX_STAT_CONFLICT_ABORT_MEM_LIM
CPX_STAT_CONFLICT_ABORT_NODE_LIM = _pycplex_platform.CPX_STAT_CONFLICT_ABORT_NODE_LIM
CPX_STAT_CONFLICT_ABORT_OBJ_LIM = _pycplex_platform.CPX_STAT_CONFLICT_ABORT_OBJ_LIM
CPX_STAT_CONFLICT_ABORT_TIME_LIM = _pycplex_platform.CPX_STAT_CONFLICT_ABORT_TIME_LIM
CPX_STAT_CONFLICT_ABORT_USER = _pycplex_platform.CPX_STAT_CONFLICT_ABORT_USER
CPX_STAT_CONFLICT_FEASIBLE = _pycplex_platform.CPX_STAT_CONFLICT_FEASIBLE
CPX_STAT_CONFLICT_MINIMAL = _pycplex_platform.CPX_STAT_CONFLICT_MINIMAL
CPX_STAT_FEASIBLE = _pycplex_platform.CPX_STAT_FEASIBLE
CPX_STAT_FEASIBLE_RELAXED_INF = _pycplex_platform.CPX_STAT_FEASIBLE_RELAXED_INF
CPX_STAT_FEASIBLE_RELAXED_QUAD = _pycplex_platform.CPX_STAT_FEASIBLE_RELAXED_QUAD
CPX_STAT_FEASIBLE_RELAXED_SUM = _pycplex_platform.CPX_STAT_FEASIBLE_RELAXED_SUM
CPX_STAT_FIRSTORDER = _pycplex_platform.CPX_STAT_FIRSTORDER
CPX_STAT_INFEASIBLE = _pycplex_platform.CPX_STAT_INFEASIBLE
CPX_STAT_INForUNBD = _pycplex_platform.CPX_STAT_INForUNBD
CPX_STAT_MULTIOBJ_INFEASIBLE = _pycplex_platform.CPX_STAT_MULTIOBJ_INFEASIBLE
CPX_STAT_MULTIOBJ_INForUNBD = _pycplex_platform.CPX_STAT_MULTIOBJ_INForUNBD
CPX_STAT_MULTIOBJ_NON_OPTIMAL = _pycplex_platform.CPX_STAT_MULTIOBJ_NON_OPTIMAL
CPX_STAT_MULTIOBJ_OPTIMAL = _pycplex_platform.CPX_STAT_MULTIOBJ_OPTIMAL
CPX_STAT_MULTIOBJ_STOPPED = _pycplex_platform.CPX_STAT_MULTIOBJ_STOPPED
CPX_STAT_MULTIOBJ_UNBOUNDED = _pycplex_platform.CPX_STAT_MULTIOBJ_UNBOUNDED
CPX_STAT_NUM_BEST = _pycplex_platform.CPX_STAT_NUM_BEST
CPX_STAT_OPTIMAL = _pycplex_platform.CPX_STAT_OPTIMAL
CPX_STAT_OPTIMAL_FACE_UNBOUNDED = _pycplex_platform.CPX_STAT_OPTIMAL_FACE_UNBOUNDED
CPX_STAT_OPTIMAL_INFEAS = _pycplex_platform.CPX_STAT_OPTIMAL_INFEAS
CPX_STAT_OPTIMAL_RELAXED_INF = _pycplex_platform.CPX_STAT_OPTIMAL_RELAXED_INF
CPX_STAT_OPTIMAL_RELAXED_QUAD = _pycplex_platform.CPX_STAT_OPTIMAL_RELAXED_QUAD
CPX_STAT_OPTIMAL_RELAXED_SUM = _pycplex_platform.CPX_STAT_OPTIMAL_RELAXED_SUM
CPX_STAT_UNBOUNDED = _pycplex_platform.CPX_STAT_UNBOUNDED
CPX_STAT_UNKNOWN = _pycplex_platform.CPX_STAT_UNKNOWN
CPX_SUM_COMP_SLACK = _pycplex_platform.CPX_SUM_COMP_SLACK
CPX_SUM_DUAL_INFEAS = _pycplex_platform.CPX_SUM_DUAL_INFEAS
CPX_SUM_DUAL_RESIDUAL = _pycplex_platform.CPX_SUM_DUAL_RESIDUAL
CPX_SUM_INDSLACK_INFEAS = _pycplex_platform.CPX_SUM_INDSLACK_INFEAS
CPX_SUM_INT_INFEAS = _pycplex_platform.CPX_SUM_INT_INFEAS
CPX_SUM_PI = _pycplex_platform.CPX_SUM_PI
CPX_SUM_PRIMAL_INFEAS = _pycplex_platform.CPX_SUM_PRIMAL_INFEAS
CPX_SUM_PRIMAL_RESIDUAL = _pycplex_platform.CPX_SUM_PRIMAL_RESIDUAL
CPX_SUM_PWLSLACK_INFEAS = _pycplex_platform.CPX_SUM_PWLSLACK_INFEAS
CPX_SUM_QCPRIMAL_RESIDUAL = _pycplex_platform.CPX_SUM_QCPRIMAL_RESIDUAL
CPX_SUM_QCSLACK = _pycplex_platform.CPX_SUM_QCSLACK
CPX_SUM_QCSLACK_INFEAS = _pycplex_platform.CPX_SUM_QCSLACK_INFEAS
CPX_SUM_RED_COST = _pycplex_platform.CPX_SUM_RED_COST
CPX_SUM_SCALED_DUAL_INFEAS = _pycplex_platform.CPX_SUM_SCALED_DUAL_INFEAS
CPX_SUM_SCALED_DUAL_RESIDUAL = _pycplex_platform.CPX_SUM_SCALED_DUAL_RESIDUAL
CPX_SUM_SCALED_PI = _pycplex_platform.CPX_SUM_SCALED_PI
CPX_SUM_SCALED_PRIMAL_INFEAS = _pycplex_platform.CPX_SUM_SCALED_PRIMAL_INFEAS
CPX_SUM_SCALED_PRIMAL_RESIDUAL = _pycplex_platform.CPX_SUM_SCALED_PRIMAL_RESIDUAL
CPX_SUM_SCALED_RED_COST = _pycplex_platform.CPX_SUM_SCALED_RED_COST
CPX_SUM_SCALED_SLACK = _pycplex_platform.CPX_SUM_SCALED_SLACK
CPX_SUM_SCALED_X = _pycplex_platform.CPX_SUM_SCALED_X
CPX_SUM_SLACK = _pycplex_platform.CPX_SUM_SLACK
CPX_SUM_X = _pycplex_platform.CPX_SUM_X
CPXERR_ABORT_STRONGBRANCH = _pycplex_platform.CPXERR_ABORT_STRONGBRANCH
CPXERR_ADJ_SIGN_QUAD = _pycplex_platform.CPXERR_ADJ_SIGN_QUAD
CPXERR_ADJ_SIGN_SENSE = _pycplex_platform.CPXERR_ADJ_SIGN_SENSE
CPXERR_ADJ_SIGNS = _pycplex_platform.CPXERR_ADJ_SIGNS
CPXERR_ARC_INDEX_RANGE = _pycplex_platform.CPXERR_ARC_INDEX_RANGE
CPXERR_ARRAY_BAD_SOS_TYPE = _pycplex_platform.CPXERR_ARRAY_BAD_SOS_TYPE
CPXERR_ARRAY_NOT_ASCENDING = _pycplex_platform.CPXERR_ARRAY_NOT_ASCENDING
CPXERR_ARRAY_TOO_LONG = _pycplex_platform.CPXERR_ARRAY_TOO_LONG
CPXERR_BAD_ARGUMENT = _pycplex_platform.CPXERR_BAD_ARGUMENT
CPXERR_BAD_BOUND_SENSE = _pycplex_platform.CPXERR_BAD_BOUND_SENSE
CPXERR_BAD_BOUND_TYPE = _pycplex_platform.CPXERR_BAD_BOUND_TYPE
CPXERR_BAD_CHAR = _pycplex_platform.CPXERR_BAD_CHAR
CPXERR_BAD_CTYPE = _pycplex_platform.CPXERR_BAD_CTYPE
CPXERR_BAD_DECOMPOSITION = _pycplex_platform.CPXERR_BAD_DECOMPOSITION
CPXERR_BAD_DIRECTION = _pycplex_platform.CPXERR_BAD_DIRECTION
CPXERR_BAD_EXPO_RANGE = _pycplex_platform.CPXERR_BAD_EXPO_RANGE
CPXERR_BAD_EXPONENT = _pycplex_platform.CPXERR_BAD_EXPONENT
CPXERR_BAD_FILETYPE = _pycplex_platform.CPXERR_BAD_FILETYPE
CPXERR_BAD_ID = _pycplex_platform.CPXERR_BAD_ID
CPXERR_BAD_INDCONSTR = _pycplex_platform.CPXERR_BAD_INDCONSTR
CPXERR_BAD_INDICATOR = _pycplex_platform.CPXERR_BAD_INDICATOR
CPXERR_BAD_INDTYPE = _pycplex_platform.CPXERR_BAD_INDTYPE
CPXERR_BAD_LAZY_UCUT = _pycplex_platform.CPXERR_BAD_LAZY_UCUT
CPXERR_BAD_LUB = _pycplex_platform.CPXERR_BAD_LUB
CPXERR_BAD_METHOD = _pycplex_platform.CPXERR_BAD_METHOD
CPXERR_BAD_MULTIOBJ_ATTR = _pycplex_platform.CPXERR_BAD_MULTIOBJ_ATTR
CPXERR_BAD_NAME = _pycplex_platform.CPXERR_BAD_NAME
CPXERR_BAD_NUMBER = _pycplex_platform.CPXERR_BAD_NUMBER
CPXERR_BAD_OBJ_SENSE = _pycplex_platform.CPXERR_BAD_OBJ_SENSE
CPXERR_BAD_PARAM_NAME = _pycplex_platform.CPXERR_BAD_PARAM_NAME
CPXERR_BAD_PARAM_NUM = _pycplex_platform.CPXERR_BAD_PARAM_NUM
CPXERR_BAD_PIVOT = _pycplex_platform.CPXERR_BAD_PIVOT
CPXERR_BAD_PRIORITY = _pycplex_platform.CPXERR_BAD_PRIORITY
CPXERR_BAD_PROB_TYPE = _pycplex_platform.CPXERR_BAD_PROB_TYPE
CPXERR_BAD_ROW_ID = _pycplex_platform.CPXERR_BAD_ROW_ID
CPXERR_BAD_SECTION_BOUNDS = _pycplex_platform.CPXERR_BAD_SECTION_BOUNDS
CPXERR_BAD_SECTION_ENDATA = _pycplex_platform.CPXERR_BAD_SECTION_ENDATA
CPXERR_BAD_SECTION_QMATRIX = _pycplex_platform.CPXERR_BAD_SECTION_QMATRIX
CPXERR_BAD_SENSE = _pycplex_platform.CPXERR_BAD_SENSE
CPXERR_BAD_SOS_TYPE = _pycplex_platform.CPXERR_BAD_SOS_TYPE
CPXERR_BAD_STATUS = _pycplex_platform.CPXERR_BAD_STATUS
CPXERR_BAS_FILE_SHORT = _pycplex_platform.CPXERR_BAS_FILE_SHORT
CPXERR_BAS_FILE_SIZE = _pycplex_platform.CPXERR_BAS_FILE_SIZE
CPXERR_BENDERS_MASTER_SOLVE = _pycplex_platform.CPXERR_BENDERS_MASTER_SOLVE
CPXERR_CALLBACK = _pycplex_platform.CPXERR_CALLBACK
CPXERR_CALLBACK_INCONSISTENT = _pycplex_platform.CPXERR_CALLBACK_INCONSISTENT
CPXERR_CAND_NOT_POINT = _pycplex_platform.CPXERR_CAND_NOT_POINT
CPXERR_CAND_NOT_RAY = _pycplex_platform.CPXERR_CAND_NOT_RAY
CPXERR_CNTRL_IN_NAME = _pycplex_platform.CPXERR_CNTRL_IN_NAME
CPXERR_COL_INDEX_RANGE = _pycplex_platform.CPXERR_COL_INDEX_RANGE
CPXERR_COL_REPEAT_PRINT = _pycplex_platform.CPXERR_COL_REPEAT_PRINT
CPXERR_COL_REPEATS = _pycplex_platform.CPXERR_COL_REPEATS
CPXERR_COL_ROW_REPEATS = _pycplex_platform.CPXERR_COL_ROW_REPEATS
CPXERR_COL_UNKNOWN = _pycplex_platform.CPXERR_COL_UNKNOWN
CPXERR_CONFLICT_UNSTABLE = _pycplex_platform.CPXERR_CONFLICT_UNSTABLE
CPXERR_COUNT_OVERLAP = _pycplex_platform.CPXERR_COUNT_OVERLAP
CPXERR_COUNT_RANGE = _pycplex_platform.CPXERR_COUNT_RANGE
CPXERR_CPUBINDING_FAILURE = _pycplex_platform.CPXERR_CPUBINDING_FAILURE
CPXERR_DBL_MAX = _pycplex_platform.CPXERR_DBL_MAX
CPXERR_DECOMPRESSION = _pycplex_platform.CPXERR_DECOMPRESSION
CPXERR_DETTILIM_STRONGBRANCH = _pycplex_platform.CPXERR_DETTILIM_STRONGBRANCH
CPXERR_DUP_ENTRY = _pycplex_platform.CPXERR_DUP_ENTRY
CPXERR_DYNFUNC = _pycplex_platform.CPXERR_DYNFUNC
CPXERR_DYNLOAD = _pycplex_platform.CPXERR_DYNLOAD
CPXERR_ENCODING_CONVERSION = _pycplex_platform.CPXERR_ENCODING_CONVERSION
CPXERR_EXTRA_BV_BOUND = _pycplex_platform.CPXERR_EXTRA_BV_BOUND
CPXERR_EXTRA_FR_BOUND = _pycplex_platform.CPXERR_EXTRA_FR_BOUND
CPXERR_EXTRA_FX_BOUND = _pycplex_platform.CPXERR_EXTRA_FX_BOUND
CPXERR_EXTRA_INTEND = _pycplex_platform.CPXERR_EXTRA_INTEND
CPXERR_EXTRA_INTORG = _pycplex_platform.CPXERR_EXTRA_INTORG
CPXERR_EXTRA_SOSEND = _pycplex_platform.CPXERR_EXTRA_SOSEND
CPXERR_EXTRA_SOSORG = _pycplex_platform.CPXERR_EXTRA_SOSORG
CPXERR_FAIL_OPEN_READ = _pycplex_platform.CPXERR_FAIL_OPEN_READ
CPXERR_FAIL_OPEN_WRITE = _pycplex_platform.CPXERR_FAIL_OPEN_WRITE
CPXERR_FILE_ENTRIES = _pycplex_platform.CPXERR_FILE_ENTRIES
CPXERR_FILE_FORMAT = _pycplex_platform.CPXERR_FILE_FORMAT
CPXERR_FILE_IO = _pycplex_platform.CPXERR_FILE_IO
CPXERR_FILTER_VARIABLE_TYPE = _pycplex_platform.CPXERR_FILTER_VARIABLE_TYPE
CPXERR_ILL_DEFINED_PWL = _pycplex_platform.CPXERR_ILL_DEFINED_PWL
CPXERR_IN_INFOCALLBACK = _pycplex_platform.CPXERR_IN_INFOCALLBACK
CPXERR_INDEX_NOT_BASIC = _pycplex_platform.CPXERR_INDEX_NOT_BASIC
CPXERR_INDEX_RANGE = _pycplex_platform.CPXERR_INDEX_RANGE
CPXERR_INDEX_RANGE_HIGH = _pycplex_platform.CPXERR_INDEX_RANGE_HIGH
CPXERR_INDEX_RANGE_LOW = _pycplex_platform.CPXERR_INDEX_RANGE_LOW
CPXERR_INT_TOO_BIG = _pycplex_platform.CPXERR_INT_TOO_BIG
CPXERR_INT_TOO_BIG_INPUT = _pycplex_platform.CPXERR_INT_TOO_BIG_INPUT
CPXERR_INVALID_NUMBER = _pycplex_platform.CPXERR_INVALID_NUMBER
CPXERR_LIMITS_TOO_BIG = _pycplex_platform.CPXERR_LIMITS_TOO_BIG
CPXERR_LINE_TOO_LONG = _pycplex_platform.CPXERR_LINE_TOO_LONG
CPXERR_LO_BOUND_REPEATS = _pycplex_platform.CPXERR_LO_BOUND_REPEATS
CPXERR_LOCK_CREATE = _pycplex_platform.CPXERR_LOCK_CREATE
CPXERR_LP_NOT_IN_ENVIRONMENT = _pycplex_platform.CPXERR_LP_NOT_IN_ENVIRONMENT
CPXERR_LP_PARSE = _pycplex_platform.CPXERR_LP_PARSE
CPXERR_MASTER_SOLVE = _pycplex_platform.CPXERR_MASTER_SOLVE
CPXERR_MIPSEARCH_WITH_CALLBACKS = _pycplex_platform.CPXERR_MIPSEARCH_WITH_CALLBACKS
CPXERR_MISS_SOS_TYPE = _pycplex_platform.CPXERR_MISS_SOS_TYPE
CPXERR_MSG_NO_CHANNEL = _pycplex_platform.CPXERR_MSG_NO_CHANNEL
CPXERR_MSG_NO_FILEPTR = _pycplex_platform.CPXERR_MSG_NO_FILEPTR
CPXERR_MSG_NO_FUNCTION = _pycplex_platform.CPXERR_MSG_NO_FUNCTION
CPXERR_MULTIOBJ_SUBPROB_SOLVE = _pycplex_platform.CPXERR_MULTIOBJ_SUBPROB_SOLVE
CPXERR_NAME_CREATION = _pycplex_platform.CPXERR_NAME_CREATION
CPXERR_NAME_NOT_FOUND = _pycplex_platform.CPXERR_NAME_NOT_FOUND
CPXERR_NAME_TOO_LONG = _pycplex_platform.CPXERR_NAME_TOO_LONG
CPXERR_NAN = _pycplex_platform.CPXERR_NAN
CPXERR_NEED_OPT_SOLN = _pycplex_platform.CPXERR_NEED_OPT_SOLN
CPXERR_NEGATIVE_SURPLUS = _pycplex_platform.CPXERR_NEGATIVE_SURPLUS
CPXERR_NET_DATA = _pycplex_platform.CPXERR_NET_DATA
CPXERR_NET_FILE_SHORT = _pycplex_platform.CPXERR_NET_FILE_SHORT
CPXERR_NO_BARRIER_SOLN = _pycplex_platform.CPXERR_NO_BARRIER_SOLN
CPXERR_NO_BASIC_SOLN = _pycplex_platform.CPXERR_NO_BASIC_SOLN
CPXERR_NO_BASIS = _pycplex_platform.CPXERR_NO_BASIS
CPXERR_NO_BOUND_SENSE = _pycplex_platform.CPXERR_NO_BOUND_SENSE
CPXERR_NO_BOUND_TYPE = _pycplex_platform.CPXERR_NO_BOUND_TYPE
CPXERR_NO_COLUMNS_SECTION = _pycplex_platform.CPXERR_NO_COLUMNS_SECTION
CPXERR_NO_CONFLICT = _pycplex_platform.CPXERR_NO_CONFLICT
CPXERR_NO_DECOMPOSITION = _pycplex_platform.CPXERR_NO_DECOMPOSITION
CPXERR_NO_DUAL_SOLN = _pycplex_platform.CPXERR_NO_DUAL_SOLN
CPXERR_NO_ENDATA = _pycplex_platform.CPXERR_NO_ENDATA
CPXERR_NO_ENVIRONMENT = _pycplex_platform.CPXERR_NO_ENVIRONMENT
CPXERR_NO_FILENAME = _pycplex_platform.CPXERR_NO_FILENAME
CPXERR_NO_ID = _pycplex_platform.CPXERR_NO_ID
CPXERR_NO_ID_FIRST = _pycplex_platform.CPXERR_NO_ID_FIRST
CPXERR_NO_INT_X = _pycplex_platform.CPXERR_NO_INT_X
CPXERR_NO_KAPPASTATS = _pycplex_platform.CPXERR_NO_KAPPASTATS
CPXERR_NO_LU_FACTOR = _pycplex_platform.CPXERR_NO_LU_FACTOR
CPXERR_NO_MEMORY = _pycplex_platform.CPXERR_NO_MEMORY
CPXERR_NO_MIPSTART = _pycplex_platform.CPXERR_NO_MIPSTART
CPXERR_NO_NAME_SECTION = _pycplex_platform.CPXERR_NO_NAME_SECTION
CPXERR_NO_NAMES = _pycplex_platform.CPXERR_NO_NAMES
CPXERR_NO_NORMS = _pycplex_platform.CPXERR_NO_NORMS
CPXERR_NO_NUMBER = _pycplex_platform.CPXERR_NO_NUMBER
CPXERR_NO_NUMBER_BOUND = _pycplex_platform.CPXERR_NO_NUMBER_BOUND
CPXERR_NO_NUMBER_FIRST = _pycplex_platform.CPXERR_NO_NUMBER_FIRST
CPXERR_NO_OBJ_NAME = _pycplex_platform.CPXERR_NO_OBJ_NAME
CPXERR_NO_OBJ_SENSE = _pycplex_platform.CPXERR_NO_OBJ_SENSE
CPXERR_NO_OBJECTIVE = _pycplex_platform.CPXERR_NO_OBJECTIVE
CPXERR_NO_OP_OR_SENSE = _pycplex_platform.CPXERR_NO_OP_OR_SENSE
CPXERR_NO_OPERATOR = _pycplex_platform.CPXERR_NO_OPERATOR
CPXERR_NO_ORDER = _pycplex_platform.CPXERR_NO_ORDER
CPXERR_NO_PROBLEM = _pycplex_platform.CPXERR_NO_PROBLEM
CPXERR_NO_QP_OPERATOR = _pycplex_platform.CPXERR_NO_QP_OPERATOR
CPXERR_NO_QUAD_EXP = _pycplex_platform.CPXERR_NO_QUAD_EXP
CPXERR_NO_RHS_COEFF = _pycplex_platform.CPXERR_NO_RHS_COEFF
CPXERR_NO_RHS_IN_OBJ = _pycplex_platform.CPXERR_NO_RHS_IN_OBJ
CPXERR_NO_ROW_NAME = _pycplex_platform.CPXERR_NO_ROW_NAME
CPXERR_NO_ROW_SENSE = _pycplex_platform.CPXERR_NO_ROW_SENSE
CPXERR_NO_ROWS_SECTION = _pycplex_platform.CPXERR_NO_ROWS_SECTION
CPXERR_NO_SENSIT = _pycplex_platform.CPXERR_NO_SENSIT
CPXERR_NO_SOLN = _pycplex_platform.CPXERR_NO_SOLN
CPXERR_NO_SOLNPOOL = _pycplex_platform.CPXERR_NO_SOLNPOOL
CPXERR_NO_SOS = _pycplex_platform.CPXERR_NO_SOS
CPXERR_NO_TREE = _pycplex_platform.CPXERR_NO_TREE
CPXERR_NO_VECTOR_SOLN = _pycplex_platform.CPXERR_NO_VECTOR_SOLN
CPXERR_NODE_INDEX_RANGE = _pycplex_platform.CPXERR_NODE_INDEX_RANGE
CPXERR_NODE_ON_DISK = _pycplex_platform.CPXERR_NODE_ON_DISK
CPXERR_NOT_DUAL_UNBOUNDED = _pycplex_platform.CPXERR_NOT_DUAL_UNBOUNDED
CPXERR_NOT_FIXED = _pycplex_platform.CPXERR_NOT_FIXED
CPXERR_NOT_FOR_BENDERS = _pycplex_platform.CPXERR_NOT_FOR_BENDERS
CPXERR_NOT_FOR_DISTMIP = _pycplex_platform.CPXERR_NOT_FOR_DISTMIP
CPXERR_NOT_FOR_MIP = _pycplex_platform.CPXERR_NOT_FOR_MIP
CPXERR_NOT_FOR_MULTIOBJ = _pycplex_platform.CPXERR_NOT_FOR_MULTIOBJ
CPXERR_NOT_FOR_QCP = _pycplex_platform.CPXERR_NOT_FOR_QCP
CPXERR_NOT_FOR_QP = _pycplex_platform.CPXERR_NOT_FOR_QP
CPXERR_NOT_MILPCLASS = _pycplex_platform.CPXERR_NOT_MILPCLASS
CPXERR_NOT_MIN_COST_FLOW = _pycplex_platform.CPXERR_NOT_MIN_COST_FLOW
CPXERR_NOT_MIP = _pycplex_platform.CPXERR_NOT_MIP
CPXERR_NOT_MIQPCLASS = _pycplex_platform.CPXERR_NOT_MIQPCLASS
CPXERR_NOT_ONE_PROBLEM = _pycplex_platform.CPXERR_NOT_ONE_PROBLEM
CPXERR_NOT_QP = _pycplex_platform.CPXERR_NOT_QP
CPXERR_NOT_SAV_FILE = _pycplex_platform.CPXERR_NOT_SAV_FILE
CPXERR_NOT_UNBOUNDED = _pycplex_platform.CPXERR_NOT_UNBOUNDED
CPXERR_NULL_POINTER = _pycplex_platform.CPXERR_NULL_POINTER
CPXERR_ORDER_BAD_DIRECTION = _pycplex_platform.CPXERR_ORDER_BAD_DIRECTION
CPXERR_OVERFLOW = _pycplex_platform.CPXERR_OVERFLOW
CPXERR_PARAM_INCOMPATIBLE = _pycplex_platform.CPXERR_PARAM_INCOMPATIBLE
CPXERR_PARAM_TOO_BIG = _pycplex_platform.CPXERR_PARAM_TOO_BIG
CPXERR_PARAM_TOO_SMALL = _pycplex_platform.CPXERR_PARAM_TOO_SMALL
CPXERR_PRESLV_ABORT = _pycplex_platform.CPXERR_PRESLV_ABORT
CPXERR_PRESLV_BASIS_MEM = _pycplex_platform.CPXERR_PRESLV_BASIS_MEM
CPXERR_PRESLV_COPYORDER = _pycplex_platform.CPXERR_PRESLV_COPYORDER
CPXERR_PRESLV_COPYSOS = _pycplex_platform.CPXERR_PRESLV_COPYSOS
CPXERR_PRESLV_CRUSHFORM = _pycplex_platform.CPXERR_PRESLV_CRUSHFORM
CPXERR_PRESLV_DETTIME_LIM = _pycplex_platform.CPXERR_PRESLV_DETTIME_LIM
CPXERR_PRESLV_DUAL = _pycplex_platform.CPXERR_PRESLV_DUAL
CPXERR_PRESLV_FAIL_BASIS = _pycplex_platform.CPXERR_PRESLV_FAIL_BASIS
CPXERR_PRESLV_INF = _pycplex_platform.CPXERR_PRESLV_INF
CPXERR_PRESLV_INForUNBD = _pycplex_platform.CPXERR_PRESLV_INForUNBD
CPXERR_PRESLV_NO_BASIS = _pycplex_platform.CPXERR_PRESLV_NO_BASIS
CPXERR_PRESLV_NO_PROB = _pycplex_platform.CPXERR_PRESLV_NO_PROB
CPXERR_PRESLV_SOLN_MIP = _pycplex_platform.CPXERR_PRESLV_SOLN_MIP
CPXERR_PRESLV_SOLN_QP = _pycplex_platform.CPXERR_PRESLV_SOLN_QP
CPXERR_PRESLV_START_LP = _pycplex_platform.CPXERR_PRESLV_START_LP
CPXERR_PRESLV_TIME_LIM = _pycplex_platform.CPXERR_PRESLV_TIME_LIM
CPXERR_PRESLV_UNBD = _pycplex_platform.CPXERR_PRESLV_UNBD
CPXERR_PRESLV_UNCRUSHFORM = _pycplex_platform.CPXERR_PRESLV_UNCRUSHFORM
CPXERR_PRIIND = _pycplex_platform.CPXERR_PRIIND
CPXERR_PRM_DATA = _pycplex_platform.CPXERR_PRM_DATA
CPXERR_Q_DIVISOR = _pycplex_platform.CPXERR_Q_DIVISOR
CPXERR_Q_DUP_ENTRY = _pycplex_platform.CPXERR_Q_DUP_ENTRY
CPXERR_Q_NOT_INDEF = _pycplex_platform.CPXERR_Q_NOT_INDEF
CPXERR_Q_NOT_POS_DEF = _pycplex_platform.CPXERR_Q_NOT_POS_DEF
CPXERR_Q_NOT_SYMMETRIC = _pycplex_platform.CPXERR_Q_NOT_SYMMETRIC
CPXERR_QCP_SENSE = _pycplex_platform.CPXERR_QCP_SENSE
CPXERR_QCP_SENSE_FILE = _pycplex_platform.CPXERR_QCP_SENSE_FILE
CPXERR_QUAD_EXP_NOT_2 = _pycplex_platform.CPXERR_QUAD_EXP_NOT_2
CPXERR_QUAD_IN_ROW = _pycplex_platform.CPXERR_QUAD_IN_ROW
CPXERR_RANGE_SECTION_ORDER = _pycplex_platform.CPXERR_RANGE_SECTION_ORDER
CPXERR_RESTRICTED_VERSION = _pycplex_platform.CPXERR_RESTRICTED_VERSION
CPXERR_RHS_IN_OBJ = _pycplex_platform.CPXERR_RHS_IN_OBJ
CPXERR_RIM_REPEATS = _pycplex_platform.CPXERR_RIM_REPEATS
CPXERR_RIM_ROW_REPEATS = _pycplex_platform.CPXERR_RIM_ROW_REPEATS
CPXERR_RIMNZ_REPEATS = _pycplex_platform.CPXERR_RIMNZ_REPEATS
CPXERR_ROW_INDEX_RANGE = _pycplex_platform.CPXERR_ROW_INDEX_RANGE
CPXERR_ROW_REPEAT_PRINT = _pycplex_platform.CPXERR_ROW_REPEAT_PRINT
CPXERR_ROW_REPEATS = _pycplex_platform.CPXERR_ROW_REPEATS
CPXERR_ROW_UNKNOWN = _pycplex_platform.CPXERR_ROW_UNKNOWN
CPXERR_SAV_FILE_DATA = _pycplex_platform.CPXERR_SAV_FILE_DATA
CPXERR_SAV_FILE_VALUE = _pycplex_platform.CPXERR_SAV_FILE_VALUE
CPXERR_SAV_FILE_WRITE = _pycplex_platform.CPXERR_SAV_FILE_WRITE
CPXERR_SBASE_ILLEGAL = _pycplex_platform.CPXERR_SBASE_ILLEGAL
CPXERR_SBASE_INCOMPAT = _pycplex_platform.CPXERR_SBASE_INCOMPAT
CPXERR_SINGULAR = _pycplex_platform.CPXERR_SINGULAR
CPXERR_STR_PARAM_TOO_LONG = _pycplex_platform.CPXERR_STR_PARAM_TOO_LONG
CPXERR_SUBPROB_SOLVE = _pycplex_platform.CPXERR_SUBPROB_SOLVE
CPXERR_SYNCPRIM_CREATE = _pycplex_platform.CPXERR_SYNCPRIM_CREATE
CPXERR_SYSCALL = _pycplex_platform.CPXERR_SYSCALL
CPXERR_THREAD_FAILED = _pycplex_platform.CPXERR_THREAD_FAILED
CPXERR_TILIM_CONDITION_NO = _pycplex_platform.CPXERR_TILIM_CONDITION_NO
CPXERR_TILIM_STRONGBRANCH = _pycplex_platform.CPXERR_TILIM_STRONGBRANCH
CPXERR_TOO_MANY_COEFFS = _pycplex_platform.CPXERR_TOO_MANY_COEFFS
CPXERR_TOO_MANY_COLS = _pycplex_platform.CPXERR_TOO_MANY_COLS
CPXERR_TOO_MANY_RIMNZ = _pycplex_platform.CPXERR_TOO_MANY_RIMNZ
CPXERR_TOO_MANY_RIMS = _pycplex_platform.CPXERR_TOO_MANY_RIMS
CPXERR_TOO_MANY_ROWS = _pycplex_platform.CPXERR_TOO_MANY_ROWS
CPXERR_TOO_MANY_THREADS = _pycplex_platform.CPXERR_TOO_MANY_THREADS
CPXERR_TREE_MEMORY_LIMIT = _pycplex_platform.CPXERR_TREE_MEMORY_LIMIT
CPXERR_TUNE_MIXED = _pycplex_platform.CPXERR_TUNE_MIXED
CPXERR_UNIQUE_WEIGHTS = _pycplex_platform.CPXERR_UNIQUE_WEIGHTS
CPXERR_UNSUPPORTED_CONSTRAINT_TYPE = _pycplex_platform.CPXERR_UNSUPPORTED_CONSTRAINT_TYPE
CPXERR_UNSUPPORTED_OPERATION = _pycplex_platform.CPXERR_UNSUPPORTED_OPERATION
CPXERR_UP_BOUND_REPEATS = _pycplex_platform.CPXERR_UP_BOUND_REPEATS
CPXERR_WORK_FILE_OPEN = _pycplex_platform.CPXERR_WORK_FILE_OPEN
CPXERR_WORK_FILE_READ = _pycplex_platform.CPXERR_WORK_FILE_READ
CPXERR_WORK_FILE_WRITE = _pycplex_platform.CPXERR_WORK_FILE_WRITE
CPXERR_XMLPARSE = _pycplex_platform.CPXERR_XMLPARSE
CPXMESSAGEBUFSIZE = _pycplex_platform.CPXMESSAGEBUFSIZE
CPXMI_BIGM_COEF = _pycplex_platform.CPXMI_BIGM_COEF
CPXMI_BIGM_TO_IND = _pycplex_platform.CPXMI_BIGM_TO_IND
CPXMI_BIGM_VARBOUND = _pycplex_platform.CPXMI_BIGM_VARBOUND
CPXMI_CANCEL_TOL = _pycplex_platform.CPXMI_CANCEL_TOL
CPXMI_EPGAP_LARGE = _pycplex_platform.CPXMI_EPGAP_LARGE
CPXMI_EPGAP_OBJOFFSET = _pycplex_platform.CPXMI_EPGAP_OBJOFFSET
CPXMI_FEAS_TOL = _pycplex_platform.CPXMI_FEAS_TOL
CPXMI_FRACTION_SCALING = _pycplex_platform.CPXMI_FRACTION_SCALING
CPXMI_IND_NZ_LARGE_NUM = _pycplex_platform.CPXMI_IND_NZ_LARGE_NUM
CPXMI_IND_NZ_SMALL_NUM = _pycplex_platform.CPXMI_IND_NZ_SMALL_NUM
CPXMI_IND_RHS_LARGE_NUM = _pycplex_platform.CPXMI_IND_RHS_LARGE_NUM
CPXMI_IND_RHS_SMALL_NUM = _pycplex_platform.CPXMI_IND_RHS_SMALL_NUM
CPXMI_KAPPA_ILLPOSED = _pycplex_platform.CPXMI_KAPPA_ILLPOSED
CPXMI_KAPPA_SUSPICIOUS = _pycplex_platform.CPXMI_KAPPA_SUSPICIOUS
CPXMI_KAPPA_UNSTABLE = _pycplex_platform.CPXMI_KAPPA_UNSTABLE
CPXMI_LB_LARGE_NUM = _pycplex_platform.CPXMI_LB_LARGE_NUM
CPXMI_LB_SMALL_NUM = _pycplex_platform.CPXMI_LB_SMALL_NUM
CPXMI_LC_NZ_LARGE_NUM = _pycplex_platform.CPXMI_LC_NZ_LARGE_NUM
CPXMI_LC_NZ_SMALL_NUM = _pycplex_platform.CPXMI_LC_NZ_SMALL_NUM
CPXMI_LC_RHS_LARGE_NUM = _pycplex_platform.CPXMI_LC_RHS_LARGE_NUM
CPXMI_LC_RHS_SMALL_NUM = _pycplex_platform.CPXMI_LC_RHS_SMALL_NUM
CPXMI_MULTIOBJ_COEFFS = _pycplex_platform.CPXMI_MULTIOBJ_COEFFS
CPXMI_MULTIOBJ_LARGE_NUM = _pycplex_platform.CPXMI_MULTIOBJ_LARGE_NUM
CPXMI_MULTIOBJ_MIX = _pycplex_platform.CPXMI_MULTIOBJ_MIX
CPXMI_MULTIOBJ_OPT_TOL = _pycplex_platform.CPXMI_MULTIOBJ_OPT_TOL
CPXMI_MULTIOBJ_SMALL_NUM = _pycplex_platform.CPXMI_MULTIOBJ_SMALL_NUM
CPXMI_NZ_LARGE_NUM = _pycplex_platform.CPXMI_NZ_LARGE_NUM
CPXMI_NZ_SMALL_NUM = _pycplex_platform.CPXMI_NZ_SMALL_NUM
CPXMI_OBJ_LARGE_NUM = _pycplex_platform.CPXMI_OBJ_LARGE_NUM
CPXMI_OBJ_SMALL_NUM = _pycplex_platform.CPXMI_OBJ_SMALL_NUM
CPXMI_OPT_TOL = _pycplex_platform.CPXMI_OPT_TOL
CPXMI_PWL_SLOPE_LARGE_NUM = _pycplex_platform.CPXMI_PWL_SLOPE_LARGE_NUM
CPXMI_PWL_SLOPE_SMALL_NUM = _pycplex_platform.CPXMI_PWL_SLOPE_SMALL_NUM
CPXMI_QC_LINNZ_LARGE_NUM = _pycplex_platform.CPXMI_QC_LINNZ_LARGE_NUM
CPXMI_QC_LINNZ_SMALL_NUM = _pycplex_platform.CPXMI_QC_LINNZ_SMALL_NUM
CPXMI_QC_QNZ_LARGE_NUM = _pycplex_platform.CPXMI_QC_QNZ_LARGE_NUM
CPXMI_QC_QNZ_SMALL_NUM = _pycplex_platform.CPXMI_QC_QNZ_SMALL_NUM
CPXMI_QC_RHS_LARGE_NUM = _pycplex_platform.CPXMI_QC_RHS_LARGE_NUM
CPXMI_QC_RHS_SMALL_NUM = _pycplex_platform.CPXMI_QC_RHS_SMALL_NUM
CPXMI_QOBJ_LARGE_NUM = _pycplex_platform.CPXMI_QOBJ_LARGE_NUM
CPXMI_QOBJ_SMALL_NUM = _pycplex_platform.CPXMI_QOBJ_SMALL_NUM
CPXMI_QOPT_TOL = _pycplex_platform.CPXMI_QOPT_TOL
CPXMI_RHS_LARGE_NUM = _pycplex_platform.CPXMI_RHS_LARGE_NUM
CPXMI_RHS_SMALL_NUM = _pycplex_platform.CPXMI_RHS_SMALL_NUM
CPXMI_SAMECOEFF_COL = _pycplex_platform.CPXMI_SAMECOEFF_COL
CPXMI_SAMECOEFF_IND = _pycplex_platform.CPXMI_SAMECOEFF_IND
CPXMI_SAMECOEFF_LAZY = _pycplex_platform.CPXMI_SAMECOEFF_LAZY
CPXMI_SAMECOEFF_MULTIOBJ = _pycplex_platform.CPXMI_SAMECOEFF_MULTIOBJ
CPXMI_SAMECOEFF_OBJ = _pycplex_platform.CPXMI_SAMECOEFF_OBJ
CPXMI_SAMECOEFF_QLIN = _pycplex_platform.CPXMI_SAMECOEFF_QLIN
CPXMI_SAMECOEFF_QUAD = _pycplex_platform.CPXMI_SAMECOEFF_QUAD
CPXMI_SAMECOEFF_RHS = _pycplex_platform.CPXMI_SAMECOEFF_RHS
CPXMI_SAMECOEFF_ROW = _pycplex_platform.CPXMI_SAMECOEFF_ROW
CPXMI_SAMECOEFF_UCUT = _pycplex_platform.CPXMI_SAMECOEFF_UCUT
CPXMI_SINGLE_PRECISION = _pycplex_platform.CPXMI_SINGLE_PRECISION
CPXMI_SYMMETRY_BREAKING_INEQ = _pycplex_platform.CPXMI_SYMMETRY_BREAKING_INEQ
CPXMI_UB_LARGE_NUM = _pycplex_platform.CPXMI_UB_LARGE_NUM
CPXMI_UB_SMALL_NUM = _pycplex_platform.CPXMI_UB_SMALL_NUM
CPXMI_UC_NZ_LARGE_NUM = _pycplex_platform.CPXMI_UC_NZ_LARGE_NUM
CPXMI_UC_NZ_SMALL_NUM = _pycplex_platform.CPXMI_UC_NZ_SMALL_NUM
CPXMI_UC_RHS_LARGE_NUM = _pycplex_platform.CPXMI_UC_RHS_LARGE_NUM
CPXMI_UC_RHS_SMALL_NUM = _pycplex_platform.CPXMI_UC_RHS_SMALL_NUM
CPXMI_WIDE_COEFF_RANGE = _pycplex_platform.CPXMI_WIDE_COEFF_RANGE
CPXMIP_ABORT_FEAS = _pycplex_platform.CPXMIP_ABORT_FEAS
CPXMIP_ABORT_INFEAS = _pycplex_platform.CPXMIP_ABORT_INFEAS
CPXMIP_ABORT_RELAXATION_UNBOUNDED = _pycplex_platform.CPXMIP_ABORT_RELAXATION_UNBOUNDED
CPXMIP_ABORT_RELAXED = _pycplex_platform.CPXMIP_ABORT_RELAXED
CPXMIP_DETTIME_LIM_FEAS = _pycplex_platform.CPXMIP_DETTIME_LIM_FEAS
CPXMIP_DETTIME_LIM_INFEAS = _pycplex_platform.CPXMIP_DETTIME_LIM_INFEAS
CPXMIP_FAIL_FEAS = _pycplex_platform.CPXMIP_FAIL_FEAS
CPXMIP_FAIL_FEAS_NO_TREE = _pycplex_platform.CPXMIP_FAIL_FEAS_NO_TREE
CPXMIP_FAIL_INFEAS = _pycplex_platform.CPXMIP_FAIL_INFEAS
CPXMIP_FAIL_INFEAS_NO_TREE = _pycplex_platform.CPXMIP_FAIL_INFEAS_NO_TREE
CPXMIP_FEASIBLE = _pycplex_platform.CPXMIP_FEASIBLE
CPXMIP_FEASIBLE_RELAXED_INF = _pycplex_platform.CPXMIP_FEASIBLE_RELAXED_INF
CPXMIP_FEASIBLE_RELAXED_QUAD = _pycplex_platform.CPXMIP_FEASIBLE_RELAXED_QUAD
CPXMIP_FEASIBLE_RELAXED_SUM = _pycplex_platform.CPXMIP_FEASIBLE_RELAXED_SUM
CPXMIP_INFEASIBLE = _pycplex_platform.CPXMIP_INFEASIBLE
CPXMIP_INForUNBD = _pycplex_platform.CPXMIP_INForUNBD
CPXMIP_MEM_LIM_FEAS = _pycplex_platform.CPXMIP_MEM_LIM_FEAS
CPXMIP_MEM_LIM_INFEAS = _pycplex_platform.CPXMIP_MEM_LIM_INFEAS
CPXMIP_NODE_LIM_FEAS = _pycplex_platform.CPXMIP_NODE_LIM_FEAS
CPXMIP_NODE_LIM_INFEAS = _pycplex_platform.CPXMIP_NODE_LIM_INFEAS
CPXMIP_OPTIMAL = _pycplex_platform.CPXMIP_OPTIMAL
CPXMIP_OPTIMAL_INFEAS = _pycplex_platform.CPXMIP_OPTIMAL_INFEAS
CPXMIP_OPTIMAL_POPULATED = _pycplex_platform.CPXMIP_OPTIMAL_POPULATED
CPXMIP_OPTIMAL_POPULATED_TOL = _pycplex_platform.CPXMIP_OPTIMAL_POPULATED_TOL
CPXMIP_OPTIMAL_RELAXED_INF = _pycplex_platform.CPXMIP_OPTIMAL_RELAXED_INF
CPXMIP_OPTIMAL_RELAXED_QUAD = _pycplex_platform.CPXMIP_OPTIMAL_RELAXED_QUAD
CPXMIP_OPTIMAL_RELAXED_SUM = _pycplex_platform.CPXMIP_OPTIMAL_RELAXED_SUM
CPXMIP_OPTIMAL_TOL = _pycplex_platform.CPXMIP_OPTIMAL_TOL
CPXMIP_POPULATESOL_LIM = _pycplex_platform.CPXMIP_POPULATESOL_LIM
CPXMIP_SOL_LIM = _pycplex_platform.CPXMIP_SOL_LIM
CPXMIP_TIME_LIM_FEAS = _pycplex_platform.CPXMIP_TIME_LIM_FEAS
CPXMIP_TIME_LIM_INFEAS = _pycplex_platform.CPXMIP_TIME_LIM_INFEAS
CPXMIP_UNBOUNDED = _pycplex_platform.CPXMIP_UNBOUNDED
CPX_CPXAUTOENUMS_H_H = _pycplex_platform.CPX_CPXAUTOENUMS_H_H
CPXCALLBACKINFO_THREADID = _pycplex_platform.CPXCALLBACKINFO_THREADID
CPXCALLBACKINFO_NODECOUNT = _pycplex_platform.CPXCALLBACKINFO_NODECOUNT
CPXCALLBACKINFO_ITCOUNT = _pycplex_platform.CPXCALLBACKINFO_ITCOUNT
CPXCALLBACKINFO_BEST_SOL = _pycplex_platform.CPXCALLBACKINFO_BEST_SOL
CPXCALLBACKINFO_BEST_BND = _pycplex_platform.CPXCALLBACKINFO_BEST_BND
CPXCALLBACKINFO_THREADS = _pycplex_platform.CPXCALLBACKINFO_THREADS
CPXCALLBACKINFO_FEASIBLE = _pycplex_platform.CPXCALLBACKINFO_FEASIBLE
CPXCALLBACKINFO_TIME = _pycplex_platform.CPXCALLBACKINFO_TIME
CPXCALLBACKINFO_DETTIME = _pycplex_platform.CPXCALLBACKINFO_DETTIME
CPXCALLBACKINFO_NODEUID = _pycplex_platform.CPXCALLBACKINFO_NODEUID
CPXCALLBACKINFO_NODEDEPTH = _pycplex_platform.CPXCALLBACKINFO_NODEDEPTH
CPXCALLBACKINFO_CANDIDATE_SOURCE = _pycplex_platform.CPXCALLBACKINFO_CANDIDATE_SOURCE
CPXCALLBACKINFO_RESTARTS = _pycplex_platform.CPXCALLBACKINFO_RESTARTS
CPXCALLBACKINFO_AFTERCUTLOOP = _pycplex_platform.CPXCALLBACKINFO_AFTERCUTLOOP
CPXCALLBACKINFO_NODESLEFT = _pycplex_platform.CPXCALLBACKINFO_NODESLEFT
CPXCALLBACKSOLUTION_NOCHECK = _pycplex_platform.CPXCALLBACKSOLUTION_NOCHECK
CPXCALLBACKSOLUTION_CHECKFEAS = _pycplex_platform.CPXCALLBACKSOLUTION_CHECKFEAS
CPXCALLBACKSOLUTION_PROPAGATE = _pycplex_platform.CPXCALLBACKSOLUTION_PROPAGATE
CPXCALLBACKSOLUTION_SOLVE = _pycplex_platform.CPXCALLBACKSOLUTION_SOLVE
CPXPUBLICPARAMS_H = _pycplex_platform.CPXPUBLICPARAMS_H
CPX_PARAM_ADVIND = _pycplex_platform.CPX_PARAM_ADVIND
CPX_PARAM_AGGFILL = _pycplex_platform.CPX_PARAM_AGGFILL
CPX_PARAM_AGGIND = _pycplex_platform.CPX_PARAM_AGGIND
CPX_PARAM_CLOCKTYPE = _pycplex_platform.CPX_PARAM_CLOCKTYPE
CPX_PARAM_CRAIND = _pycplex_platform.CPX_PARAM_CRAIND
CPX_PARAM_DEPIND = _pycplex_platform.CPX_PARAM_DEPIND
CPX_PARAM_DPRIIND = _pycplex_platform.CPX_PARAM_DPRIIND
CPX_PARAM_PRICELIM = _pycplex_platform.CPX_PARAM_PRICELIM
CPX_PARAM_EPMRK = _pycplex_platform.CPX_PARAM_EPMRK
CPX_PARAM_EPOPT = _pycplex_platform.CPX_PARAM_EPOPT
CPX_PARAM_EPPER = _pycplex_platform.CPX_PARAM_EPPER
CPX_PARAM_EPRHS = _pycplex_platform.CPX_PARAM_EPRHS
CPX_PARAM_SIMDISPLAY = _pycplex_platform.CPX_PARAM_SIMDISPLAY
CPX_PARAM_ITLIM = _pycplex_platform.CPX_PARAM_ITLIM
CPX_PARAM_ROWREADLIM = _pycplex_platform.CPX_PARAM_ROWREADLIM
CPX_PARAM_NETFIND = _pycplex_platform.CPX_PARAM_NETFIND
CPX_PARAM_COLREADLIM = _pycplex_platform.CPX_PARAM_COLREADLIM
CPX_PARAM_NZREADLIM = _pycplex_platform.CPX_PARAM_NZREADLIM
CPX_PARAM_OBJLLIM = _pycplex_platform.CPX_PARAM_OBJLLIM
CPX_PARAM_OBJULIM = _pycplex_platform.CPX_PARAM_OBJULIM
CPX_PARAM_PERIND = _pycplex_platform.CPX_PARAM_PERIND
CPX_PARAM_PERLIM = _pycplex_platform.CPX_PARAM_PERLIM
CPX_PARAM_PPRIIND = _pycplex_platform.CPX_PARAM_PPRIIND
CPX_PARAM_PREIND = _pycplex_platform.CPX_PARAM_PREIND
CPX_PARAM_REINV = _pycplex_platform.CPX_PARAM_REINV
CPX_PARAM_SCAIND = _pycplex_platform.CPX_PARAM_SCAIND
CPX_PARAM_SCRIND = _pycplex_platform.CPX_PARAM_SCRIND
CPX_PARAM_SINGLIM = _pycplex_platform.CPX_PARAM_SINGLIM
CPX_PARAM_TILIM = _pycplex_platform.CPX_PARAM_TILIM
CPX_PARAM_PREDUAL = _pycplex_platform.CPX_PARAM_PREDUAL
CPX_PARAM_PREPASS = _pycplex_platform.CPX_PARAM_PREPASS
CPX_PARAM_DATACHECK = _pycplex_platform.CPX_PARAM_DATACHECK
CPX_PARAM_REDUCE = _pycplex_platform.CPX_PARAM_REDUCE
CPX_PARAM_PRELINEAR = _pycplex_platform.CPX_PARAM_PRELINEAR
CPX_PARAM_LPMETHOD = _pycplex_platform.CPX_PARAM_LPMETHOD
CPX_PARAM_QPMETHOD = _pycplex_platform.CPX_PARAM_QPMETHOD
CPX_PARAM_WORKDIR = _pycplex_platform.CPX_PARAM_WORKDIR
CPX_PARAM_WORKMEM = _pycplex_platform.CPX_PARAM_WORKMEM
CPX_PARAM_THREADS = _pycplex_platform.CPX_PARAM_THREADS
CPX_PARAM_CONFLICTALG = _pycplex_platform.CPX_PARAM_CONFLICTALG
CPX_PARAM_CONFLICTDISPLAY = _pycplex_platform.CPX_PARAM_CONFLICTDISPLAY
CPX_PARAM_SIFTDISPLAY = _pycplex_platform.CPX_PARAM_SIFTDISPLAY
CPX_PARAM_SIFTALG = _pycplex_platform.CPX_PARAM_SIFTALG
CPX_PARAM_SIFTITLIM = _pycplex_platform.CPX_PARAM_SIFTITLIM
CPX_PARAM_MPSLONGNUM = _pycplex_platform.CPX_PARAM_MPSLONGNUM
CPX_PARAM_MEMORYEMPHASIS = _pycplex_platform.CPX_PARAM_MEMORYEMPHASIS
CPX_PARAM_NUMERICALEMPHASIS = _pycplex_platform.CPX_PARAM_NUMERICALEMPHASIS
CPX_PARAM_FEASOPTMODE = _pycplex_platform.CPX_PARAM_FEASOPTMODE
CPX_PARAM_PARALLELMODE = _pycplex_platform.CPX_PARAM_PARALLELMODE
CPX_PARAM_TUNINGMEASURE = _pycplex_platform.CPX_PARAM_TUNINGMEASURE
CPX_PARAM_TUNINGREPEAT = _pycplex_platform.CPX_PARAM_TUNINGREPEAT
CPX_PARAM_TUNINGTILIM = _pycplex_platform.CPX_PARAM_TUNINGTILIM
CPX_PARAM_TUNINGDISPLAY = _pycplex_platform.CPX_PARAM_TUNINGDISPLAY
CPX_PARAM_WRITELEVEL = _pycplex_platform.CPX_PARAM_WRITELEVEL
CPX_PARAM_RANDOMSEED = _pycplex_platform.CPX_PARAM_RANDOMSEED
CPX_PARAM_DETTILIM = _pycplex_platform.CPX_PARAM_DETTILIM
CPX_PARAM_FILEENCODING = _pycplex_platform.CPX_PARAM_FILEENCODING
CPX_PARAM_APIENCODING = _pycplex_platform.CPX_PARAM_APIENCODING
CPX_PARAM_OPTIMALITYTARGET = _pycplex_platform.CPX_PARAM_OPTIMALITYTARGET
CPX_PARAM_CLONELOG = _pycplex_platform.CPX_PARAM_CLONELOG
CPX_PARAM_TUNINGDETTILIM = _pycplex_platform.CPX_PARAM_TUNINGDETTILIM
CPX_PARAM_CPUMASK = _pycplex_platform.CPX_PARAM_CPUMASK
CPX_PARAM_SOLUTIONTYPE = _pycplex_platform.CPX_PARAM_SOLUTIONTYPE
CPX_PARAM_WARNLIM = _pycplex_platform.CPX_PARAM_WARNLIM
CPX_PARAM_SIFTSIM = _pycplex_platform.CPX_PARAM_SIFTSIM
CPX_PARAM_DYNAMICROWS = _pycplex_platform.CPX_PARAM_DYNAMICROWS
CPX_PARAM_RECORD = _pycplex_platform.CPX_PARAM_RECORD
CPX_PARAM_PARAMDISPLAY = _pycplex_platform.CPX_PARAM_PARAMDISPLAY
CPX_PARAM_FOLDING = _pycplex_platform.CPX_PARAM_FOLDING
CPX_PARAM_PREREFORM = _pycplex_platform.CPX_PARAM_PREREFORM
CPX_PARAM_WORKERALG = _pycplex_platform.CPX_PARAM_WORKERALG
CPX_PARAM_BENDERSSTRATEGY = _pycplex_platform.CPX_PARAM_BENDERSSTRATEGY
CPX_PARAM_BENDERSFEASCUTTOL = _pycplex_platform.CPX_PARAM_BENDERSFEASCUTTOL
CPX_PARAM_BENDERSOPTCUTTOL = _pycplex_platform.CPX_PARAM_BENDERSOPTCUTTOL
CPX_PARAM_MULTIOBJDISPLAY = _pycplex_platform.CPX_PARAM_MULTIOBJDISPLAY
CPX_PARAM_BRDIR = _pycplex_platform.CPX_PARAM_BRDIR
CPX_PARAM_BTTOL = _pycplex_platform.CPX_PARAM_BTTOL
CPX_PARAM_CLIQUES = _pycplex_platform.CPX_PARAM_CLIQUES
CPX_PARAM_COEREDIND = _pycplex_platform.CPX_PARAM_COEREDIND
CPX_PARAM_COVERS = _pycplex_platform.CPX_PARAM_COVERS
CPX_PARAM_CUTLO = _pycplex_platform.CPX_PARAM_CUTLO
CPX_PARAM_CUTUP = _pycplex_platform.CPX_PARAM_CUTUP
CPX_PARAM_EPAGAP = _pycplex_platform.CPX_PARAM_EPAGAP
CPX_PARAM_EPGAP = _pycplex_platform.CPX_PARAM_EPGAP
CPX_PARAM_EPINT = _pycplex_platform.CPX_PARAM_EPINT
CPX_PARAM_MIPDISPLAY = _pycplex_platform.CPX_PARAM_MIPDISPLAY
CPX_PARAM_MIPINTERVAL = _pycplex_platform.CPX_PARAM_MIPINTERVAL
CPX_PARAM_INTSOLLIM = _pycplex_platform.CPX_PARAM_INTSOLLIM
CPX_PARAM_NODEFILEIND = _pycplex_platform.CPX_PARAM_NODEFILEIND
CPX_PARAM_NODELIM = _pycplex_platform.CPX_PARAM_NODELIM
CPX_PARAM_NODESEL = _pycplex_platform.CPX_PARAM_NODESEL
CPX_PARAM_OBJDIF = _pycplex_platform.CPX_PARAM_OBJDIF
CPX_PARAM_MIPORDIND = _pycplex_platform.CPX_PARAM_MIPORDIND
CPX_PARAM_RELOBJDIF = _pycplex_platform.CPX_PARAM_RELOBJDIF
CPX_PARAM_STARTALG = _pycplex_platform.CPX_PARAM_STARTALG
CPX_PARAM_SUBALG = _pycplex_platform.CPX_PARAM_SUBALG
CPX_PARAM_TRELIM = _pycplex_platform.CPX_PARAM_TRELIM
CPX_PARAM_VARSEL = _pycplex_platform.CPX_PARAM_VARSEL
CPX_PARAM_BNDSTRENIND = _pycplex_platform.CPX_PARAM_BNDSTRENIND
CPX_PARAM_HEURFREQ = _pycplex_platform.CPX_PARAM_HEURFREQ
CPX_PARAM_MIPORDTYPE = _pycplex_platform.CPX_PARAM_MIPORDTYPE
CPX_PARAM_CUTSFACTOR = _pycplex_platform.CPX_PARAM_CUTSFACTOR
CPX_PARAM_RELAXPREIND = _pycplex_platform.CPX_PARAM_RELAXPREIND
CPX_PARAM_PRESLVND = _pycplex_platform.CPX_PARAM_PRESLVND
CPX_PARAM_BBINTERVAL = _pycplex_platform.CPX_PARAM_BBINTERVAL
CPX_PARAM_FLOWCOVERS = _pycplex_platform.CPX_PARAM_FLOWCOVERS
CPX_PARAM_IMPLBD = _pycplex_platform.CPX_PARAM_IMPLBD
CPX_PARAM_PROBE = _pycplex_platform.CPX_PARAM_PROBE
CPX_PARAM_GUBCOVERS = _pycplex_platform.CPX_PARAM_GUBCOVERS
CPX_PARAM_STRONGCANDLIM = _pycplex_platform.CPX_PARAM_STRONGCANDLIM
CPX_PARAM_STRONGITLIM = _pycplex_platform.CPX_PARAM_STRONGITLIM
CPX_PARAM_FRACCAND = _pycplex_platform.CPX_PARAM_FRACCAND
CPX_PARAM_FRACCUTS = _pycplex_platform.CPX_PARAM_FRACCUTS
CPX_PARAM_FRACPASS = _pycplex_platform.CPX_PARAM_FRACPASS
CPX_PARAM_FLOWPATHS = _pycplex_platform.CPX_PARAM_FLOWPATHS
CPX_PARAM_MIRCUTS = _pycplex_platform.CPX_PARAM_MIRCUTS
CPX_PARAM_DISJCUTS = _pycplex_platform.CPX_PARAM_DISJCUTS
CPX_PARAM_AGGCUTLIM = _pycplex_platform.CPX_PARAM_AGGCUTLIM
CPX_PARAM_MIPCBREDLP = _pycplex_platform.CPX_PARAM_MIPCBREDLP
CPX_PARAM_CUTPASS = _pycplex_platform.CPX_PARAM_CUTPASS
CPX_PARAM_MIPEMPHASIS = _pycplex_platform.CPX_PARAM_MIPEMPHASIS
CPX_PARAM_SYMMETRY = _pycplex_platform.CPX_PARAM_SYMMETRY
CPX_PARAM_DIVETYPE = _pycplex_platform.CPX_PARAM_DIVETYPE
CPX_PARAM_RINSHEUR = _pycplex_platform.CPX_PARAM_RINSHEUR
CPX_PARAM_LBHEUR = _pycplex_platform.CPX_PARAM_LBHEUR
CPX_PARAM_REPEATPRESOLVE = _pycplex_platform.CPX_PARAM_REPEATPRESOLVE
CPX_PARAM_PROBETIME = _pycplex_platform.CPX_PARAM_PROBETIME
CPX_PARAM_REPAIRTRIES = _pycplex_platform.CPX_PARAM_REPAIRTRIES
CPX_PARAM_EPLIN = _pycplex_platform.CPX_PARAM_EPLIN
CPX_PARAM_EPRELAX = _pycplex_platform.CPX_PARAM_EPRELAX
CPX_PARAM_FPHEUR = _pycplex_platform.CPX_PARAM_FPHEUR
CPX_PARAM_EACHCUTLIM = _pycplex_platform.CPX_PARAM_EACHCUTLIM
CPX_PARAM_SOLNPOOLCAPACITY = _pycplex_platform.CPX_PARAM_SOLNPOOLCAPACITY
CPX_PARAM_SOLNPOOLREPLACE = _pycplex_platform.CPX_PARAM_SOLNPOOLREPLACE
CPX_PARAM_SOLNPOOLGAP = _pycplex_platform.CPX_PARAM_SOLNPOOLGAP
CPX_PARAM_SOLNPOOLAGAP = _pycplex_platform.CPX_PARAM_SOLNPOOLAGAP
CPX_PARAM_SOLNPOOLINTENSITY = _pycplex_platform.CPX_PARAM_SOLNPOOLINTENSITY
CPX_PARAM_POPULATELIM = _pycplex_platform.CPX_PARAM_POPULATELIM
CPX_PARAM_MIPSEARCH = _pycplex_platform.CPX_PARAM_MIPSEARCH
CPX_PARAM_MIQCPSTRAT = _pycplex_platform.CPX_PARAM_MIQCPSTRAT
CPX_PARAM_ZEROHALFCUTS = _pycplex_platform.CPX_PARAM_ZEROHALFCUTS
CPX_PARAM_HEUREFFORT = _pycplex_platform.CPX_PARAM_HEUREFFORT
CPX_PARAM_POLISHAFTEREPAGAP = _pycplex_platform.CPX_PARAM_POLISHAFTEREPAGAP
CPX_PARAM_POLISHAFTEREPGAP = _pycplex_platform.CPX_PARAM_POLISHAFTEREPGAP
CPX_PARAM_POLISHAFTERNODE = _pycplex_platform.CPX_PARAM_POLISHAFTERNODE
CPX_PARAM_POLISHAFTERINTSOL = _pycplex_platform.CPX_PARAM_POLISHAFTERINTSOL
CPX_PARAM_POLISHAFTERTIME = _pycplex_platform.CPX_PARAM_POLISHAFTERTIME
CPX_PARAM_MCFCUTS = _pycplex_platform.CPX_PARAM_MCFCUTS
CPX_PARAM_MIPKAPPASTATS = _pycplex_platform.CPX_PARAM_MIPKAPPASTATS
CPX_PARAM_AUXROOTTHREADS = _pycplex_platform.CPX_PARAM_AUXROOTTHREADS
CPX_PARAM_INTSOLFILEPREFIX = _pycplex_platform.CPX_PARAM_INTSOLFILEPREFIX
CPX_PARAM_PROBEDETTIME = _pycplex_platform.CPX_PARAM_PROBEDETTIME
CPX_PARAM_POLISHAFTERDETTIME = _pycplex_platform.CPX_PARAM_POLISHAFTERDETTIME
CPX_PARAM_LANDPCUTS = _pycplex_platform.CPX_PARAM_LANDPCUTS
CPX_PARAM_NODECUTS = _pycplex_platform.CPX_PARAM_NODECUTS
CPX_PARAM_LOCALIMPLBD = _pycplex_platform.CPX_PARAM_LOCALIMPLBD
CPX_PARAM_BQPCUTS = _pycplex_platform.CPX_PARAM_BQPCUTS
CPX_PARAM_RLTCUTS = _pycplex_platform.CPX_PARAM_RLTCUTS
CPX_PARAM_SUBMIPSTARTALG = _pycplex_platform.CPX_PARAM_SUBMIPSTARTALG
CPX_PARAM_SUBMIPSUBALG = _pycplex_platform.CPX_PARAM_SUBMIPSUBALG
CPX_PARAM_SUBMIPSCAIND = _pycplex_platform.CPX_PARAM_SUBMIPSCAIND
CPX_PARAM_SUBMIPNODELIMIT = _pycplex_platform.CPX_PARAM_SUBMIPNODELIMIT
CPX_PARAM_SOS1REFORM = _pycplex_platform.CPX_PARAM_SOS1REFORM
CPX_PARAM_SOS2REFORM = _pycplex_platform.CPX_PARAM_SOS2REFORM
CPX_PARAM_LOWEROBJSTOP = _pycplex_platform.CPX_PARAM_LOWEROBJSTOP
CPX_PARAM_UPPEROBJSTOP = _pycplex_platform.CPX_PARAM_UPPEROBJSTOP
CPX_PARAM_BAREPCOMP = _pycplex_platform.CPX_PARAM_BAREPCOMP
CPX_PARAM_BARGROWTH = _pycplex_platform.CPX_PARAM_BARGROWTH
CPX_PARAM_BAROBJRNG = _pycplex_platform.CPX_PARAM_BAROBJRNG
CPX_PARAM_BARALG = _pycplex_platform.CPX_PARAM_BARALG
CPX_PARAM_BARCOLNZ = _pycplex_platform.CPX_PARAM_BARCOLNZ
CPX_PARAM_BARDISPLAY = _pycplex_platform.CPX_PARAM_BARDISPLAY
CPX_PARAM_BARITLIM = _pycplex_platform.CPX_PARAM_BARITLIM
CPX_PARAM_BARMAXCOR = _pycplex_platform.CPX_PARAM_BARMAXCOR
CPX_PARAM_BARORDER = _pycplex_platform.CPX_PARAM_BARORDER
CPX_PARAM_BARSTARTALG = _pycplex_platform.CPX_PARAM_BARSTARTALG
CPX_PARAM_BARCROSSALG = _pycplex_platform.CPX_PARAM_BARCROSSALG
CPX_PARAM_BARQCPEPCOMP = _pycplex_platform.CPX_PARAM_BARQCPEPCOMP
CPX_PARAM_QPNZREADLIM = _pycplex_platform.CPX_PARAM_QPNZREADLIM
CPX_PARAM_CALCQCPDUALS = _pycplex_platform.CPX_PARAM_CALCQCPDUALS
CPX_PARAM_QPMAKEPSDIND = _pycplex_platform.CPX_PARAM_QPMAKEPSDIND
CPX_PARAM_QTOLININD = _pycplex_platform.CPX_PARAM_QTOLININD
CPX_PARAM_NETITLIM = _pycplex_platform.CPX_PARAM_NETITLIM
CPX_PARAM_NETEPOPT = _pycplex_platform.CPX_PARAM_NETEPOPT
CPX_PARAM_NETEPRHS = _pycplex_platform.CPX_PARAM_NETEPRHS
CPX_PARAM_NETPPRIIND = _pycplex_platform.CPX_PARAM_NETPPRIIND
CPX_PARAM_NETDISPLAY = _pycplex_platform.CPX_PARAM_NETDISPLAY
CPX_CPXAUTOTYPES_H_H = _pycplex_platform.CPX_CPXAUTOTYPES_H_H
CPX_CPXAUTOSTRUCTS_H_H = _pycplex_platform.CPX_CPXAUTOSTRUCTS_H_H
class cpxdeserializer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getbyte = property(_pycplex_platform.cpxdeserializer_getbyte_get, _pycplex_platform.cpxdeserializer_getbyte_set)
    getshort = property(_pycplex_platform.cpxdeserializer_getshort_get, _pycplex_platform.cpxdeserializer_getshort_set)
    getint = property(_pycplex_platform.cpxdeserializer_getint_get, _pycplex_platform.cpxdeserializer_getint_set)
    getlong = property(_pycplex_platform.cpxdeserializer_getlong_get, _pycplex_platform.cpxdeserializer_getlong_set)
    getfloat = property(_pycplex_platform.cpxdeserializer_getfloat_get, _pycplex_platform.cpxdeserializer_getfloat_set)
    getdouble = property(_pycplex_platform.cpxdeserializer_getdouble_get, _pycplex_platform.cpxdeserializer_getdouble_set)
    getbytes = property(_pycplex_platform.cpxdeserializer_getbytes_get, _pycplex_platform.cpxdeserializer_getbytes_set)
    getshorts = property(_pycplex_platform.cpxdeserializer_getshorts_get, _pycplex_platform.cpxdeserializer_getshorts_set)
    getints = property(_pycplex_platform.cpxdeserializer_getints_get, _pycplex_platform.cpxdeserializer_getints_set)
    getlongs = property(_pycplex_platform.cpxdeserializer_getlongs_get, _pycplex_platform.cpxdeserializer_getlongs_set)
    getfloats = property(_pycplex_platform.cpxdeserializer_getfloats_get, _pycplex_platform.cpxdeserializer_getfloats_set)
    getdoubles = property(_pycplex_platform.cpxdeserializer_getdoubles_get, _pycplex_platform.cpxdeserializer_getdoubles_set)

    def __init__(self):
        _pycplex_platform.cpxdeserializer_swiginit(self, _pycplex_platform.new_cpxdeserializer())
    __swig_destroy__ = _pycplex_platform.delete_cpxdeserializer

# Register cpxdeserializer in _pycplex_platform:
_pycplex_platform.cpxdeserializer_swigregister(cpxdeserializer)

class cpxserializer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    addbyte = property(_pycplex_platform.cpxserializer_addbyte_get, _pycplex_platform.cpxserializer_addbyte_set)
    addshort = property(_pycplex_platform.cpxserializer_addshort_get, _pycplex_platform.cpxserializer_addshort_set)
    addint = property(_pycplex_platform.cpxserializer_addint_get, _pycplex_platform.cpxserializer_addint_set)
    addlong = property(_pycplex_platform.cpxserializer_addlong_get, _pycplex_platform.cpxserializer_addlong_set)
    addfloat = property(_pycplex_platform.cpxserializer_addfloat_get, _pycplex_platform.cpxserializer_addfloat_set)
    adddouble = property(_pycplex_platform.cpxserializer_adddouble_get, _pycplex_platform.cpxserializer_adddouble_set)
    addbytes = property(_pycplex_platform.cpxserializer_addbytes_get, _pycplex_platform.cpxserializer_addbytes_set)
    addshorts = property(_pycplex_platform.cpxserializer_addshorts_get, _pycplex_platform.cpxserializer_addshorts_set)
    addints = property(_pycplex_platform.cpxserializer_addints_get, _pycplex_platform.cpxserializer_addints_set)
    addlongs = property(_pycplex_platform.cpxserializer_addlongs_get, _pycplex_platform.cpxserializer_addlongs_set)
    addfloats = property(_pycplex_platform.cpxserializer_addfloats_get, _pycplex_platform.cpxserializer_addfloats_set)
    adddoubles = property(_pycplex_platform.cpxserializer_adddoubles_get, _pycplex_platform.cpxserializer_adddoubles_set)

    def __init__(self):
        _pycplex_platform.cpxserializer_swiginit(self, _pycplex_platform.new_cpxserializer())
    __swig_destroy__ = _pycplex_platform.delete_cpxserializer

# Register cpxserializer in _pycplex_platform:
_pycplex_platform.cpxserializer_swigregister(cpxserializer)

CPX_CPLEXX_H = _pycplex_platform.CPX_CPLEXX_H
CPX_APIMODEL_SMALL = _pycplex_platform.CPX_APIMODEL_SMALL
CPX_APIMODEL_LARGE = _pycplex_platform.CPX_APIMODEL_LARGE
CPX_APIMODEL = _pycplex_platform.CPX_APIMODEL

def lpcallbackfuncwrap(arg1: 'CPXCENVptr', arg2: 'void *', arg3: 'int', arg4: 'void *') -> "int":
    return _pycplex_platform.lpcallbackfuncwrap(arg1, arg2, arg3, arg4)

def netcallbackfuncwrap(arg1: 'CPXCENVptr', arg2: 'void *', arg3: 'int', arg4: 'void *') -> "int":
    return _pycplex_platform.netcallbackfuncwrap(arg1, arg2, arg3, arg4)

def tuningcallbackfuncwrap(arg1: 'CPXCENVptr', arg2: 'void *', arg3: 'int', arg4: 'void *') -> "int":
    return _pycplex_platform.tuningcallbackfuncwrap(arg1, arg2, arg3, arg4)

def infocallbackfuncwrap(arg1: 'CPXCENVptr', arg2: 'void *', arg3: 'int', arg4: 'void *') -> "int":
    return _pycplex_platform.infocallbackfuncwrap(arg1, arg2, arg3, arg4)

def mipcallbackfuncwrap(arg1: 'CPXCENVptr', arg2: 'void *', arg3: 'int', arg4: 'void *') -> "int":
    return _pycplex_platform.mipcallbackfuncwrap(arg1, arg2, arg3, arg4)

def branchcallbackfuncwrap(xenv: 'CPXCENVptr', cbdata: 'void *', wherefrom: 'int', cbhandle: 'void *', brtype: 'int', brset: 'CPXDIM', nodecnt: 'int', bdcnt: 'CPXDIM', nodebeg: 'CPXDIM const *', xindex: 'CPXDIM const *', lu: 'char const *', bd: 'double const *', nodeest: 'double const *', useraction_p: 'int *') -> "int":
    return _pycplex_platform.branchcallbackfuncwrap(xenv, cbdata, wherefrom, cbhandle, brtype, brset, nodecnt, bdcnt, nodebeg, xindex, lu, bd, nodeest, useraction_p)

def lazyconcallbackfuncwrap(xenv: 'CPXCENVptr', cbdata: 'void *', wherefrom: 'int', cbhandle: 'void *', useraction_p: 'int *') -> "int":
    return _pycplex_platform.lazyconcallbackfuncwrap(xenv, cbdata, wherefrom, cbhandle, useraction_p)

def usercutcallbackfuncwrap(xenv: 'CPXCENVptr', cbdata: 'void *', wherefrom: 'int', cbhandle: 'void *', useraction_p: 'int *') -> "int":
    return _pycplex_platform.usercutcallbackfuncwrap(xenv, cbdata, wherefrom, cbhandle, useraction_p)

def nodecallbackfuncwrap(xenv: 'CPXCENVptr', cbdata: 'void *', wherefrom: 'int', cbhandle: 'void *', nodeindex: 'CPXCNT *', useraction: 'int *') -> "int":
    return _pycplex_platform.nodecallbackfuncwrap(xenv, cbdata, wherefrom, cbhandle, nodeindex, useraction)

def heuristiccallbackfuncwrap(xenv: 'CPXCENVptr', cbdata: 'void *', wherefrom: 'int', cbhandle: 'void *', objval_p: 'double *', x: 'double *', checkfeas_p: 'int *', useraction_p: 'int *') -> "int":
    return _pycplex_platform.heuristiccallbackfuncwrap(xenv, cbdata, wherefrom, cbhandle, objval_p, x, checkfeas_p, useraction_p)

def incumbentcallbackfuncwrap(xenv: 'CPXCENVptr', cbdata: 'void *', wherefrom: 'int', cbhandle: 'void *', objval: 'double', x: 'double *', isfeas_p: 'int *', useraction_p: 'int *') -> "int":
    return _pycplex_platform.incumbentcallbackfuncwrap(xenv, cbdata, wherefrom, cbhandle, objval, x, isfeas_p, useraction_p)

def solvecallbackfuncwrap(xenv: 'CPXCENVptr', cbdata: 'void *', wherefrom: 'int', cbhandle: 'void *', useraction: 'int *') -> "int":
    return _pycplex_platform.solvecallbackfuncwrap(xenv, cbdata, wherefrom, cbhandle, useraction)

def deletenodecallbackfuncwrap(xenv: 'CPXCENVptr', wherefrom: 'int', cbhandle: 'void *', seqnum: 'CPXCNT', handle: 'void *') -> "void":
    return _pycplex_platform.deletenodecallbackfuncwrap(xenv, wherefrom, cbhandle, seqnum, handle)

def setpydel(arg1: 'CPXENVptr') -> "int":
    return _pycplex_platform.setpydel(arg1)

def cpxpygenericcallbackfuncwrap(arg1: 'CPXCALLBACKCONTEXTptr', arg2: 'CPXLONG', arg3: 'void *') -> "int":
    return _pycplex_platform.cpxpygenericcallbackfuncwrap(arg1, arg2, arg3)

def cpxpymodelasstcallbackfuncwrap(arg1: 'int', arg2: 'char const *', arg3: 'void *') -> "int":
    return _pycplex_platform.cpxpymodelasstcallbackfuncwrap(arg1, arg2, arg3)

def messagewrap(arg1: 'void *', arg2: 'char const *') -> "void":
    return _pycplex_platform.messagewrap(arg1, arg2)

def setpyterminate(arg1: 'CPXENVptr') -> "void":
    return _pycplex_platform.setpyterminate(arg1)

def sigint_register() -> "void":
    return _pycplex_platform.sigint_register()

def sigint_unregister() -> "void":
    return _pycplex_platform.sigint_unregister()

def py_sigint_handler(signo: 'int') -> "void":
    return _pycplex_platform.py_sigint_handler(signo)

def new_native_int() -> "PyObject *":
    return _pycplex_platform.new_native_int()

def delete_native_int(o: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.delete_native_int(o)

def set_native_int(o: 'PyObject *', v: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.set_native_int(o, v)

def get_native_int(o: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.get_native_int(o)

def setterminate(pyenv: 'PyObject *', o: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.setterminate(pyenv, o)

def set_status_checker(checker: 'PyObject *') -> "void":
    return _pycplex_platform.set_status_checker(checker)

def fast_getcallbackinfo(cbstruct: 'PyObject *', pywhichinfo: 'PyObject *', CplexSolverError: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.fast_getcallbackinfo(cbstruct, pywhichinfo, CplexSolverError)

def cb_geterrorstring(cbstruct: 'PyObject *', py_status: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.cb_geterrorstring(cbstruct, py_status)

def cb_getcolindex(cbstruct: 'PyObject *', env_lp_ptr: 'PyObject *', utf8bytes: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.cb_getcolindex(cbstruct, env_lp_ptr, utf8bytes)

def cb_getrowindex(cbstruct: 'PyObject *', env_lp_ptr: 'PyObject *', utf8bytes: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.cb_getrowindex(cbstruct, env_lp_ptr, utf8bytes)

def cb_getqconstrindex(cbstruct: 'PyObject *', env_lp_ptr: 'PyObject *', utf8bytes: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.cb_getqconstrindex(cbstruct, env_lp_ptr, utf8bytes)

def cb_getsosindex(cbstruct: 'PyObject *', env_lp_ptr: 'PyObject *', utf8bytes: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.cb_getsosindex(cbstruct, env_lp_ptr, utf8bytes)

def cb_getnumcols(cbstruct: 'PyObject *', env_lp_ptr: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.cb_getnumcols(cbstruct, env_lp_ptr)

def cb_getnumrows(cbstruct: 'PyObject *', env_lp_ptr: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.cb_getnumrows(cbstruct, env_lp_ptr)

def cb_getnumqconstrs(cbstruct: 'PyObject *', env_lp_ptr: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.cb_getnumqconstrs(cbstruct, env_lp_ptr)

def cb_getnumsos(cbstruct: 'PyObject *', env_lp_ptr: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.cb_getnumsos(cbstruct, env_lp_ptr)

def cb_gettime(cbstruct: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.cb_gettime(cbstruct)

def cb_getdettime(cbstruct: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.cb_getdettime(cbstruct)

def cb_getstat(cbstruct: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.cb_getstat(cbstruct)

def cb_solninfo(cbstruct: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.cb_solninfo(cbstruct)

def cb_primopt(cbstruct: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.cb_primopt(cbstruct)

def cb_dualopt(cbstruct: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.cb_dualopt(cbstruct)

def cb_hybbaropt(cbstruct: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.cb_hybbaropt(cbstruct)

def cb_hybnetopt(cbstruct: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.cb_hybnetopt(cbstruct)

def cb_copystart(cbstruct: 'PyObject *', py_prim: 'PyObject *', py_dual: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.cb_copystart(cbstruct, py_prim, py_dual)

def cb_chgbds(cbstruct: 'PyObject *', py_ind: 'PyObject *', py_lu: 'PyObject *', py_bd: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.cb_chgbds(cbstruct, py_ind, py_lu, py_bd)

def cb_slackfromx(cbstruct: 'PyObject *', env_lp_ptr: 'PyObject *', py_x: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.cb_slackfromx(cbstruct, env_lp_ptr, py_x)

def cb_qconstrslackfromx(cbstruct: 'PyObject *', env_lp_ptr: 'PyObject *', py_x: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.cb_qconstrslackfromx(cbstruct, env_lp_ptr, py_x)

def cb_crushx(cbstruct: 'PyObject *', env_lp_ptr: 'PyObject *', py_x: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.cb_crushx(cbstruct, env_lp_ptr, py_x)

def cb_crushpi(cbstruct: 'PyObject *', env_lp_ptr: 'PyObject *', py_pi: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.cb_crushpi(cbstruct, env_lp_ptr, py_pi)

def cb_getobj(cbstruct: 'PyObject *', env_lp_ptr: 'PyObject *', py_begin: 'PyObject *', py_end: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.cb_getobj(cbstruct, env_lp_ptr, py_begin, py_end)

def cb_getprestat_c(cbstruct: 'PyObject *', env_lp_ptr: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.cb_getprestat_c(cbstruct, env_lp_ptr)
class cb_struct(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    env = property(_pycplex_platform.cb_struct_env_get, _pycplex_platform.cb_struct_env_set)
    cbdata = property(_pycplex_platform.cb_struct_cbdata_get, _pycplex_platform.cb_struct_cbdata_set)
    wherefrom = property(_pycplex_platform.cb_struct_wherefrom_get, _pycplex_platform.cb_struct_wherefrom_set)

    def __init__(self):
        _pycplex_platform.cb_struct_swiginit(self, _pycplex_platform.new_cb_struct())
    __swig_destroy__ = _pycplex_platform.delete_cb_struct

# Register cb_struct in _pycplex_platform:
_pycplex_platform.cb_struct_swigregister(cb_struct)


def get_wherefrom(Pydata: 'PyObject *') -> "int":
    return _pycplex_platform.get_wherefrom(Pydata)

def delpydel(env: 'CPXENVptr') -> "int":
    return _pycplex_platform.delpydel(env)
CPX_CPLEXE_H = _pycplex_platform.CPX_CPLEXE_H
CPXE_H = _pycplex_platform.CPXE_H
MIPE_H = _pycplex_platform.MIPE_H
CPXAUTOE_H = _pycplex_platform.CPXAUTOE_H
CPX_AUTOES_H = _pycplex_platform.CPX_AUTOES_H
CPX_AUTOEL_H = _pycplex_platform.CPX_AUTOEL_H
CPX_AUTOEX_H = _pycplex_platform.CPX_AUTOEX_H
class cpxpyiodevice(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    dev = property(_pycplex_platform.cpxpyiodevice_dev_get, _pycplex_platform.cpxpyiodevice_dev_set)
    stream = property(_pycplex_platform.cpxpyiodevice_stream_get, _pycplex_platform.cpxpyiodevice_stream_set)

    def __init__(self):
        _pycplex_platform.cpxpyiodevice_swiginit(self, _pycplex_platform.new_cpxpyiodevice())
    __swig_destroy__ = _pycplex_platform.delete_cpxpyiodevice

# Register cpxpyiodevice in _pycplex_platform:
_pycplex_platform.cpxpyiodevice_swigregister(cpxpyiodevice)


def init_callback_lock() -> "PyObject *":
    return _pycplex_platform.init_callback_lock()

def finit_callback_lock(py_lock: 'PyObject *') -> "void":
    return _pycplex_platform.finit_callback_lock(py_lock)

def CPXPyObject_AsInt(obj: 'PyObject *', val: 'int *') -> "int":
    return _pycplex_platform.CPXPyObject_AsInt(obj, val)

def CPXPyObject_AsCPXDIM(obj: 'PyObject *', val: 'CPXDIM *') -> "int":
    return _pycplex_platform.CPXPyObject_AsCPXDIM(obj, val)

def CPXPyObject_AsChar(obj: 'PyObject *', val: 'char *') -> "int":
    return _pycplex_platform.CPXPyObject_AsChar(obj, val)

def CPXPyObject_AsCPXSIZE(obj: 'PyObject *', val: 'CPXSIZE *') -> "int":
    return _pycplex_platform.CPXPyObject_AsCPXSIZE(obj, val)

def CPXPyObject_AsCPXLONG(obj: 'PyObject *', val: 'CPXLONG *') -> "int":
    return _pycplex_platform.CPXPyObject_AsCPXLONG(obj, val)

def CPXPyObject_AsCPXCNT(obj: 'PyObject *', val: 'CPXCNT *') -> "int":
    return _pycplex_platform.CPXPyObject_AsCPXCNT(obj, val)

def CPXPyObject_AsDouble(obj: 'PyObject *', val: 'double *') -> "int":
    return _pycplex_platform.CPXPyObject_AsDouble(obj, val)

def CPXPyIODevInit(dev: 'cpxpyiodevice', stream: 'PyObject *') -> "int":
    return _pycplex_platform.CPXPyIODevInit(dev, stream)

def CPXXdualopt(env: 'CPXCENVptr', lp: 'CPXLPptr') -> "int":
    return _pycplex_platform.CPXXdualopt(env, lp)

def CPXXembwrite(env: 'CPXCENVptr', lp: 'CPXLPptr', filename_str: 'char const *') -> "int":
    return _pycplex_platform.CPXXembwrite(env, lp, filename_str)

def CPXXfeasoptext(env: 'CPXCENVptr', lp: 'CPXLPptr', grpcnt: 'CPXDIM', concnt: 'CPXNNZ', py_grppref: 'double const *', py_grpbeg: 'CPXNNZ const *', py_grpind: 'CPXDIM const *', grptype: 'char const *') -> "int":
    return _pycplex_platform.CPXXfeasoptext(env, lp, grpcnt, concnt, py_grppref, py_grpbeg, py_grpind, grptype)

def CPXXhybnetopt(env: 'CPXCENVptr', lp: 'CPXLPptr', method: 'int') -> "int":
    return _pycplex_platform.CPXXhybnetopt(env, lp, method)

def CPXXlpopt(env: 'CPXCENVptr', lp: 'CPXLPptr') -> "int":
    return _pycplex_platform.CPXXlpopt(env, lp)

def CPXXpivotin(env: 'CPXCENVptr', lp: 'CPXLPptr', rlist: 'CPXDIM const *', rlen: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXpivotin(env, lp, rlist, rlen)

def CPXXpivotout(env: 'CPXCENVptr', lp: 'CPXLPptr', clist: 'CPXDIM const *', clen: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXpivotout(env, lp, clist, clen)

def CPXXpreslvwrite(env: 'CPXCENVptr', lp: 'CPXLPptr', filename_str: 'char const *', objoff_p: 'double *') -> "int":
    return _pycplex_platform.CPXXpreslvwrite(env, lp, filename_str, objoff_p)

def CPXXpresolve(env: 'CPXCENVptr', lp: 'CPXLPptr', method: 'int') -> "int":
    return _pycplex_platform.CPXXpresolve(env, lp, method)

def CPXXprimopt(env: 'CPXCENVptr', lp: 'CPXLPptr') -> "int":
    return _pycplex_platform.CPXXprimopt(env, lp)

def CPXXrefineconflictext(env: 'CPXCENVptr', lp: 'CPXLPptr', grpcnt: 'CPXNNZ', concnt: 'CPXNNZ', py_grppref: 'double const *', py_grpbeg: 'CPXNNZ const *', py_grpind: 'CPXDIM const *', grptype: 'char const *') -> "int":
    return _pycplex_platform.CPXXrefineconflictext(env, lp, grpcnt, concnt, py_grppref, py_grpbeg, py_grpind, grptype)

def CPXXsiftopt(env: 'CPXCENVptr', lp: 'CPXLPptr') -> "int":
    return _pycplex_platform.CPXXsiftopt(env, lp)

def CPXXstrongbranch(env: 'CPXCENVptr', lp: 'CPXLPptr', goodlist: 'CPXDIM const *', goodlen: 'CPXDIM', downpen: 'double *', uppen: 'double *', itlim: 'CPXCNT') -> "int":
    return _pycplex_platform.CPXXstrongbranch(env, lp, goodlist, goodlen, downpen, uppen, itlim)

def CPXXbaropt(env: 'CPXCENVptr', lp: 'CPXLPptr') -> "int":
    return _pycplex_platform.CPXXbaropt(env, lp)

def CPXXhybbaropt(env: 'CPXCENVptr', lp: 'CPXLPptr', method: 'int') -> "int":
    return _pycplex_platform.CPXXhybbaropt(env, lp, method)

def CPXXqpindefcertificate(env: 'CPXCENVptr', lp: 'CPXCLPptr', x: 'double *') -> "int":
    return _pycplex_platform.CPXXqpindefcertificate(env, lp, x)

def CPXXqpopt(env: 'CPXCENVptr', lp: 'CPXLPptr') -> "int":
    return _pycplex_platform.CPXXqpopt(env, lp)

def CPXXmipopt(env: 'CPXCENVptr', lp: 'CPXLPptr') -> "int":
    return _pycplex_platform.CPXXmipopt(env, lp)

def CPXXpopulate(env: 'CPXCENVptr', lp: 'CPXLPptr') -> "int":
    return _pycplex_platform.CPXXpopulate(env, lp)

def CPXXrefinemipstartconflictext(env: 'CPXCENVptr', lp: 'CPXLPptr', mipstartindex: 'int', grpcnt: 'CPXNNZ', concnt: 'CPXNNZ', py_grppref: 'double const *', py_grpbeg: 'CPXNNZ const *', py_grpind: 'CPXDIM const *', grptype_mipstart: 'char const *') -> "int":
    return _pycplex_platform.CPXXrefinemipstartconflictext(env, lp, mipstartindex, grpcnt, concnt, py_grppref, py_grpbeg, py_grpind, grptype_mipstart)

def CPXXtuneparam(env: 'CPXENVptr', lp: 'CPXLPptr', intcnt: 'int', intnum: 'int const *', intval: 'int const *', dblcnt: 'int', dblnum: 'int const *', dblval: 'double const *', strcnt: 'int', strnum: 'int const *', strval: 'char const *const *', tunestat_p: 'int *') -> "int":
    return _pycplex_platform.CPXXtuneparam(env, lp, intcnt, intnum, intval, dblcnt, dblnum, dblval, strcnt, strnum, strval, tunestat_p)

def CPXXtuneparamprobset(env: 'CPXENVptr', filecnt: 'int', filename: 'char const *const *', filetype: 'char const *const *', intcnt: 'int', intind: 'int const *', intval: 'int const *', dblcnt: 'int', dblind: 'int const *', dblval: 'double const *', strcnt: 'int', strind: 'int const *', strval: 'char const *const *', tunestat_p: 'int *') -> "int":
    return _pycplex_platform.CPXXtuneparamprobset(env, filecnt, filename, filetype, intcnt, intind, intval, dblcnt, dblind, dblval, strcnt, strind, strval, tunestat_p)

def CPXErunseeds(env: 'CPXCENVptr', lp: 'CPXLPptr', cnt: 'int') -> "int":
    return _pycplex_platform.CPXErunseeds(env, lp, cnt)

def CPXXwriteannotations(env: 'CPXCENVptr', lp: 'CPXCLPptr', filename: 'char const *') -> "int":
    return _pycplex_platform.CPXXwriteannotations(env, lp, filename)

def CPXXwritebendersannotation(env: 'CPXCENVptr', lp: 'CPXCLPptr', filename: 'char const *') -> "int":
    return _pycplex_platform.CPXXwritebendersannotation(env, lp, filename)

def CPXXclpwrite(env: 'CPXCENVptr', lp: 'CPXCLPptr', filename_str: 'char const *') -> "int":
    return _pycplex_platform.CPXXclpwrite(env, lp, filename_str)

def CPXXwriteprob(env: 'CPXCENVptr', lp: 'CPXCLPptr', filename_str: 'char const *', filetype_str: 'char const *'=None) -> "int":
    return _pycplex_platform.CPXXwriteprob(env, lp, filename_str, filetype_str)

def CPXXmbasewrite(env: 'CPXCENVptr', lp: 'CPXCLPptr', filename_str: 'char const *') -> "int":
    return _pycplex_platform.CPXXmbasewrite(env, lp, filename_str)

def CPXXsolwrite(env: 'CPXCENVptr', lp: 'CPXCLPptr', filename_str: 'char const *') -> "int":
    return _pycplex_platform.CPXXsolwrite(env, lp, filename_str)

def CPXXsolwritesolnpool(env: 'CPXCENVptr', lp: 'CPXCLPptr', soln: 'int', filename_str: 'char const *') -> "int":
    return _pycplex_platform.CPXXsolwritesolnpool(env, lp, soln, filename_str)

def CPXXsolwritesolnpoolall(env: 'CPXCENVptr', lp: 'CPXCLPptr', filename_str: 'char const *') -> "int":
    return _pycplex_platform.CPXXsolwritesolnpoolall(env, lp, filename_str)

def CPXXdperwrite(env: 'CPXCENVptr', lp: 'CPXLPptr', filename_str: 'char const *', epsilon: 'double') -> "int":
    return _pycplex_platform.CPXXdperwrite(env, lp, filename_str, epsilon)

def CPXXpperwrite(env: 'CPXCENVptr', lp: 'CPXLPptr', filename_str: 'char const *', epsilon: 'double') -> "int":
    return _pycplex_platform.CPXXpperwrite(env, lp, filename_str, epsilon)

def CPXXdualwrite(env: 'CPXCENVptr', lp: 'CPXCLPptr', filename_str: 'char const *', objshift_p: 'double *') -> "int":
    return _pycplex_platform.CPXXdualwrite(env, lp, filename_str, objshift_p)

def CPXXwriteparam(env: 'CPXCENVptr', filename_str: 'char const *') -> "int":
    return _pycplex_platform.CPXXwriteparam(env, filename_str)

def CPXXordwrite(env: 'CPXCENVptr', lp: 'CPXCLPptr', filename_str: 'char const *') -> "int":
    return _pycplex_platform.CPXXordwrite(env, lp, filename_str)

def CPXXwritemipstarts(env: 'CPXCENVptr', lp: 'CPXCLPptr', filename_str: 'char const *', begin: 'int', end: 'int') -> "int":
    return _pycplex_platform.CPXXwritemipstarts(env, lp, filename_str, begin, end)

def CPXXfltwrite(env: 'CPXCENVptr', lp: 'CPXCLPptr', filename_str: 'char const *') -> "int":
    return _pycplex_platform.CPXXfltwrite(env, lp, filename_str)

def CPXXreadcopyannotations(env: 'CPXCENVptr', lp: 'CPXLPptr', filename: 'char const *') -> "int":
    return _pycplex_platform.CPXXreadcopyannotations(env, lp, filename)

def CPXXreadcopyprob(env: 'CPXCENVptr', lp: 'CPXLPptr', filename_str: 'char const *', filetype_str: 'char const *'=None) -> "int":
    return _pycplex_platform.CPXXreadcopyprob(env, lp, filename_str, filetype_str)

def CPXXreadcopybase(env: 'CPXCENVptr', lp: 'CPXLPptr', filename_str: 'char const *') -> "int":
    return _pycplex_platform.CPXXreadcopybase(env, lp, filename_str)

def CPXXreadcopystartinfo(env: 'CPXCENVptr', lp: 'CPXLPptr', filename_str: 'char const *') -> "int":
    return _pycplex_platform.CPXXreadcopystartinfo(env, lp, filename_str)

def CPXXreadcopyparam(env: 'CPXENVptr', filename_str: 'char const *') -> "int":
    return _pycplex_platform.CPXXreadcopyparam(env, filename_str)

def CPXXreadcopyorder(env: 'CPXCENVptr', lp: 'CPXLPptr', filename_str: 'char const *') -> "int":
    return _pycplex_platform.CPXXreadcopyorder(env, lp, filename_str)

def CPXXreadcopysolnpoolfilters(env: 'CPXCENVptr', lp: 'CPXLPptr', filename_str: 'char const *') -> "int":
    return _pycplex_platform.CPXXreadcopysolnpoolfilters(env, lp, filename_str)

def CPXXreadcopymipstarts(env: 'CPXCENVptr', lp: 'CPXLPptr', filename_str: 'char const *') -> "int":
    return _pycplex_platform.CPXXreadcopymipstarts(env, lp, filename_str)

def CPXXmultiobjopt(env: 'CPXCENVptr', lp: 'CPXLPptr', paramsets: 'CPXCPARAMSETptr const *') -> "int":
    return _pycplex_platform.CPXXmultiobjopt(env, lp, paramsets)

def pack_env_lp_ptr(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "PyObject *":
    return _pycplex_platform.pack_env_lp_ptr(env, lp)

def Pylolmat_to_CHBmat(lolmat: 'PyObject *', env_lp_ptr: 'PyObject *', py_row_col: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.Pylolmat_to_CHBmat(lolmat, env_lp_ptr, py_row_col)

def free_CHBmat(HBMat: 'PyObject *') -> "void":
    return _pycplex_platform.free_CHBmat(HBMat)

def int_list_to_C_array(list: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.int_list_to_C_array(list)

def long_list_to_C_array(list: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.long_list_to_C_array(list)

def double_list_to_C_array(list: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.double_list_to_C_array(list)

def free_int_C_array(Pyptr: 'PyObject *') -> "void":
    return _pycplex_platform.free_int_C_array(Pyptr)

def free_long_C_array(Pyptr: 'PyObject *') -> "void":
    return _pycplex_platform.free_long_C_array(Pyptr)

def free_double_C_array(Pyptr: 'PyObject *') -> "void":
    return _pycplex_platform.free_double_C_array(Pyptr)

def allocate_int_C_array(size: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.allocate_int_C_array(size)

def allocate_long_C_array(size: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.allocate_long_C_array(size)

def allocate_double_C_array(size: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.allocate_double_C_array(size)

def set_int_C_Array(array: 'PyObject *', index: 'PyObject *', value: 'PyObject *') -> "void":
    return _pycplex_platform.set_int_C_Array(array, index, value)

def set_long_C_Array(array: 'PyObject *', index: 'PyObject *', value: 'PyObject *') -> "void":
    return _pycplex_platform.set_long_C_Array(array, index, value)

def set_double_C_Array(array: 'PyObject *', index: 'PyObject *', value: 'PyObject *') -> "void":
    return _pycplex_platform.set_double_C_Array(array, index, value)

def CPXX_fast_newcols(env_lp_ptr: 'PyObject *', nb: 'PyObject *', lb: 'PyObject *', ub: 'PyObject *', xctype: 'PyObject *') -> "void":
    return _pycplex_platform.CPXX_fast_newcols(env_lp_ptr, nb, lb, ub, xctype)

def CPXX_has_non_default_lb(env_lp_ptr: 'PyObject *', begin: 'PyObject *', end: 'PyObject *') -> "int":
    return _pycplex_platform.CPXX_has_non_default_lb(env_lp_ptr, begin, end)

def CPXX_has_non_default_ub(env_lp_ptr: 'PyObject *', begin: 'PyObject *', end: 'PyObject *') -> "int":
    return _pycplex_platform.CPXX_has_non_default_ub(env_lp_ptr, begin, end)

def CPXX_has_name(env_lp_ptr: 'PyObject *', begin: 'PyObject *', end: 'PyObject *') -> "int":
    return _pycplex_platform.CPXX_has_name(env_lp_ptr, begin, end)

def CPXX_fast_get_rows(env_lp_ptr: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.CPXX_fast_get_rows(env_lp_ptr)

def CPXX_free_rows(rows: 'PyObject *') -> "void":
    return _pycplex_platform.CPXX_free_rows(rows)

def CPXX_fast_getcolname(env_lp_ptr: 'PyObject *', begin: 'PyObject *', end: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.CPXX_fast_getcolname(env_lp_ptr, begin, end)

def CPXX_fast_getrowname(env_lp_ptr: 'PyObject *', begin: 'PyObject *', end: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.CPXX_fast_getrowname(env_lp_ptr, begin, end)

def CPXX_fast_getsosname(env_lp_ptr: 'PyObject *', begin: 'PyObject *', end: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.CPXX_fast_getsosname(env_lp_ptr, begin, end)

def CPXX_fast_getmipstartname(env_lp_ptr: 'PyObject *', begin: 'PyObject *', end: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.CPXX_fast_getmipstartname(env_lp_ptr, begin, end)

def CPXX_free_getname(names: 'PyObject *') -> "void":
    return _pycplex_platform.CPXX_free_getname(names)

def CPXX_fast_getobj(env_lp_ptr: 'PyObject *', begin: 'PyObject *', end: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.CPXX_fast_getobj(env_lp_ptr, begin, end)

def CPXX_fast_multiobjgetobj(env_lp_ptr: 'PyObject *', index: 'PyObject *', begin: 'PyObject *', end: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.CPXX_fast_multiobjgetobj(env_lp_ptr, index, begin, end)

def CPXX_free_getobj(coefs: 'PyObject *') -> "void":
    return _pycplex_platform.CPXX_free_getobj(coefs)

def CPXX_fast_multiobjgetoffset(env_lp_ptr: 'PyObject *', index: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.CPXX_fast_multiobjgetoffset(env_lp_ptr, index)

def CPXX_fast_multiobjgetweight(env_lp_ptr: 'PyObject *', index: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.CPXX_fast_multiobjgetweight(env_lp_ptr, index)

def CPXX_fast_multiobjgetpriority(env_lp_ptr: 'PyObject *', index: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.CPXX_fast_multiobjgetpriority(env_lp_ptr, index)

def CPXX_fast_multiobjgetabstol(env_lp_ptr: 'PyObject *', index: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.CPXX_fast_multiobjgetabstol(env_lp_ptr, index)

def CPXX_fast_multiobjgetreltol(env_lp_ptr: 'PyObject *', index: 'PyObject *') -> "PyObject *":
    return _pycplex_platform.CPXX_fast_multiobjgetreltol(env_lp_ptr, index)

def CPXXcreateprob(env: 'CPXCENVptr', status_p: 'int *', probname_str: 'char const *') -> "CPXLPptr":
    return _pycplex_platform.CPXXcreateprob(env, status_p, probname_str)

def CPXXcloneprob(env: 'CPXCENVptr', lp: 'CPXCLPptr', status_p: 'int *') -> "CPXLPptr":
    return _pycplex_platform.CPXXcloneprob(env, lp, status_p)

def CPXXcopylpwnames(env: 'CPXCENVptr', lp: 'CPXLPptr', numcols: 'CPXDIM', numrows: 'CPXDIM', objsense: 'int', py_obj: 'double const *', py_rhs: 'double const *', sense: 'char const *', py_matbeg: 'CPXNNZ const *', py_matcnt: 'CPXDIM const *', py_matind: 'CPXDIM const *', py_matval: 'double const *', py_lb: 'double const *', py_ub: 'double const *', py_rngval: 'double const *', colname: 'char const *const *', rowname: 'char const *const *') -> "int":
    return _pycplex_platform.CPXXcopylpwnames(env, lp, numcols, numrows, objsense, py_obj, py_rhs, sense, py_matbeg, py_matcnt, py_matind, py_matval, py_lb, py_ub, py_rngval, colname, rowname)

def CPXXcopyobjname(env: 'CPXCENVptr', lp: 'CPXLPptr', objname_str: 'char const *') -> "int":
    return _pycplex_platform.CPXXcopyobjname(env, lp, objname_str)

def CPXXcopybase(env: 'CPXCENVptr', lp: 'CPXLPptr', cstat: 'int const *', rstat: 'int const *') -> "int":
    return _pycplex_platform.CPXXcopybase(env, lp, cstat, rstat)

def CPXXcleanup(env: 'CPXCENVptr', lp: 'CPXLPptr', eps: 'double') -> "int":
    return _pycplex_platform.CPXXcleanup(env, lp, eps)

def CPXXcopystart(env: 'CPXCENVptr', lp: 'CPXLPptr', cstat: 'int const *', rstat: 'int const *', cprim: 'double const *', rprim: 'double const *', cdual: 'double const *', rdual: 'double const *') -> "int":
    return _pycplex_platform.CPXXcopystart(env, lp, cstat, rstat, cprim, rprim, cdual, rdual)

def CPXXfreeprob(env: 'CPXCENVptr', lp_p: 'CPXLPptr *') -> "int":
    return _pycplex_platform.CPXXfreeprob(env, lp_p)

def CPXXpivot(env: 'CPXCENVptr', lp: 'CPXLPptr', jenter: 'CPXDIM', jleave: 'CPXDIM', leavestat: 'int') -> "int":
    return _pycplex_platform.CPXXpivot(env, lp, jenter, jleave, leavestat)

def CPXXsolninfo(env: 'CPXCENVptr', lp: 'CPXCLPptr', solnmethod_p: 'int *', solntype_p: 'int *', pfeasind_p: 'int *', dfeasind_p: 'int *') -> "int":
    return _pycplex_platform.CPXXsolninfo(env, lp, solnmethod_p, solntype_p, pfeasind_p, dfeasind_p)

def CPXXgetstat(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "int":
    return _pycplex_platform.CPXXgetstat(env, lp)

def CPXXgetstatstring(env: 'CPXCENVptr', statind: 'int', stat_buffer_str: 'char *') -> "char *":
    return _pycplex_platform.CPXXgetstatstring(env, statind, stat_buffer_str)

def CPXXgetmethod(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "int":
    return _pycplex_platform.CPXXgetmethod(env, lp)

def CPXXgetobjval(env: 'CPXCENVptr', lp: 'CPXCLPptr', objval_p: 'double *') -> "int":
    return _pycplex_platform.CPXXgetobjval(env, lp, objval_p)

def CPXXgetx(env: 'CPXCENVptr', lp: 'CPXCLPptr', x: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetx(env, lp, x, begin, end)

def CPXXgetax(env: 'CPXCENVptr', lp: 'CPXCLPptr', x: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetax(env, lp, x, begin, end)

def CPXXgetpi(env: 'CPXCENVptr', lp: 'CPXCLPptr', pi: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetpi(env, lp, pi, begin, end)

def CPXXgetslack(env: 'CPXCENVptr', lp: 'CPXCLPptr', slack: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetslack(env, lp, slack, begin, end)

def CPXXgetrowinfeas(env: 'CPXCENVptr', lp: 'CPXCLPptr', x: 'double const *', infeasout: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetrowinfeas(env, lp, x, infeasout, begin, end)

def CPXXgetcolinfeas(env: 'CPXCENVptr', lp: 'CPXCLPptr', x: 'double const *', infeasout: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetcolinfeas(env, lp, x, infeasout, begin, end)

def CPXXgetdj(env: 'CPXCENVptr', lp: 'CPXCLPptr', dj: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetdj(env, lp, dj, begin, end)

def CPXXgetgrad(env: 'CPXCENVptr', lp: 'CPXCLPptr', j: 'CPXDIM', head: 'CPXDIM *', y: 'double *') -> "int":
    return _pycplex_platform.CPXXgetgrad(env, lp, j, head, y)

def CPXXgetijdiv(env: 'CPXCENVptr', lp: 'CPXCLPptr', idiv_p: 'CPXDIM *', jdiv_p: 'CPXDIM *') -> "int":
    return _pycplex_platform.CPXXgetijdiv(env, lp, idiv_p, jdiv_p)

def CPXXgetbase(env: 'CPXCENVptr', lp: 'CPXCLPptr', cstat: 'int *', rstat: 'int *') -> "int":
    return _pycplex_platform.CPXXgetbase(env, lp, cstat, rstat)

def CPXXgetitcnt(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "CPXLONG":
    return _pycplex_platform.CPXXgetitcnt(env, lp)

def CPXXgetphase1cnt(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "CPXLONG":
    return _pycplex_platform.CPXXgetphase1cnt(env, lp)

def CPXXgetsiftitcnt(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "CPXLONG":
    return _pycplex_platform.CPXXgetsiftitcnt(env, lp)

def CPXXgetsiftphase1cnt(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "CPXLONG":
    return _pycplex_platform.CPXXgetsiftphase1cnt(env, lp)

def CPXXgetbaritcnt(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "CPXLONG":
    return _pycplex_platform.CPXXgetbaritcnt(env, lp)

def CPXXgetcrossppushcnt(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "CPXLONG":
    return _pycplex_platform.CPXXgetcrossppushcnt(env, lp)

def CPXXgetcrosspexchcnt(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "CPXLONG":
    return _pycplex_platform.CPXXgetcrosspexchcnt(env, lp)

def CPXXgetcrossdpushcnt(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "CPXLONG":
    return _pycplex_platform.CPXXgetcrossdpushcnt(env, lp)

def CPXXgetcrossdexchcnt(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "CPXLONG":
    return _pycplex_platform.CPXXgetcrossdexchcnt(env, lp)

def CPXXgetpsbcnt(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "int":
    return _pycplex_platform.CPXXgetpsbcnt(env, lp)

def CPXXgetdsbcnt(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "int":
    return _pycplex_platform.CPXXgetdsbcnt(env, lp)

def CPXXgetdblquality(env: 'CPXCENVptr', lp: 'CPXCLPptr', quality_p: 'double *', what: 'int') -> "int":
    return _pycplex_platform.CPXXgetdblquality(env, lp, quality_p, what)

def CPXXgetsolnpooldblquality(env: 'CPXCENVptr', lp: 'CPXCLPptr', soln: 'int', quality_p: 'double *', what: 'int') -> "int":
    return _pycplex_platform.CPXXgetsolnpooldblquality(env, lp, soln, quality_p, what)

def CPXXgetintquality(env: 'CPXCENVptr', lp: 'CPXCLPptr', quality_p: 'int *', what: 'int') -> "int":
    return _pycplex_platform.CPXXgetintquality(env, lp, quality_p, what)

def CPXXgetsolnpoolintquality(env: 'CPXCENVptr', lp: 'CPXCLPptr', soln: 'int', quality_p: 'int *', what: 'int') -> "int":
    return _pycplex_platform.CPXXgetsolnpoolintquality(env, lp, soln, quality_p, what)

def CPXXrhssa(env: 'CPXCENVptr', lp: 'CPXCLPptr', begin: 'CPXDIM', end: 'CPXDIM', lower: 'double *', upper: 'double *') -> "int":
    return _pycplex_platform.CPXXrhssa(env, lp, begin, end, lower, upper)

def CPXXboundsa(env: 'CPXCENVptr', lp: 'CPXCLPptr', begin: 'CPXDIM', end: 'CPXDIM', lblower: 'double *', lbupper: 'double *', ublower: 'double *', ubupper: 'double *') -> "int":
    return _pycplex_platform.CPXXboundsa(env, lp, begin, end, lblower, lbupper, ublower, ubupper)

def CPXXobjsa(env: 'CPXCENVptr', lp: 'CPXCLPptr', begin: 'CPXDIM', end: 'CPXDIM', lower: 'double *', upper: 'double *') -> "int":
    return _pycplex_platform.CPXXobjsa(env, lp, begin, end, lower, upper)

def CPXXgetconflictext(env: 'CPXCENVptr', lp: 'CPXCLPptr', grpstat: 'int *', beg: 'CPXNNZ', end: 'CPXNNZ') -> "int":
    return _pycplex_platform.CPXXgetconflictext(env, lp, grpstat, beg, end)

def CPXXgetconflictnumgroups(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "CPXNNZ":
    return _pycplex_platform.CPXXgetconflictnumgroups(env, lp)

def CPXXgetconflictgroups(env: 'CPXCENVptr', lp: 'CPXCLPptr', concnt_p: 'CPXNNZ *') -> "CPXDIM":
    return _pycplex_platform.CPXXgetconflictgroups(env, lp, concnt_p)

def CPXXgetconflictnumpasses(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "CPXCNT":
    return _pycplex_platform.CPXXgetconflictnumpasses(env, lp)

def CPXXnewrows(env: 'CPXCENVptr', lp: 'CPXLPptr', rcnt: 'CPXDIM', py_rhs: 'double const *', sense: 'char const *', py_rngval: 'double const *', rowname: 'char const *const *') -> "int":
    return _pycplex_platform.CPXXnewrows(env, lp, rcnt, py_rhs, sense, py_rngval, rowname)

def CPXXaddrows(env: 'CPXCENVptr', lp: 'CPXLPptr', ccnt: 'CPXDIM', rcnt: 'CPXDIM', nzcnt: 'CPXNNZ', py_rhs: 'double const *', sense: 'char const *', py_matbeg: 'CPXNNZ const *', colname: 'char const *const *', rowname: 'char const *const *') -> "int":
    return _pycplex_platform.CPXXaddrows(env, lp, ccnt, rcnt, nzcnt, py_rhs, sense, py_matbeg, colname, rowname)

def CPXXnewcols(env: 'CPXCENVptr', lp: 'CPXLPptr', ccnt: 'CPXDIM', py_obj: 'double const *', py_lb: 'double const *', py_ub: 'double const *', xctype: 'char const *', colname: 'char const *const *') -> "int":
    return _pycplex_platform.CPXXnewcols(env, lp, ccnt, py_obj, py_lb, py_ub, xctype, colname)

def CPXXaddcols(env: 'CPXCENVptr', lp: 'CPXLPptr', ccnt: 'CPXDIM', nzcnt: 'CPXNNZ', py_obj: 'double const *', py_matbeg: 'CPXNNZ const *', py_lb: 'double const *', py_ub: 'double const *', colname: 'char const *const *') -> "int":
    return _pycplex_platform.CPXXaddcols(env, lp, ccnt, nzcnt, py_obj, py_matbeg, py_lb, py_ub, colname)

def CPXXdelrows(env: 'CPXCENVptr', lp: 'CPXLPptr', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXdelrows(env, lp, begin, end)

def CPXXdelcols(env: 'CPXCENVptr', lp: 'CPXLPptr', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXdelcols(env, lp, begin, end)

def CPXXchgrowname(env: 'CPXCENVptr', lp: 'CPXLPptr', cnt: 'CPXDIM', py_indices: 'CPXDIM const *', newname: 'char const *const *') -> "int":
    return _pycplex_platform.CPXXchgrowname(env, lp, cnt, py_indices, newname)

def CPXXchgcolname(env: 'CPXCENVptr', lp: 'CPXLPptr', cnt: 'CPXDIM', py_indices: 'CPXDIM const *', newname: 'char const *const *') -> "int":
    return _pycplex_platform.CPXXchgcolname(env, lp, cnt, py_indices, newname)

def CPXXdelnames(env: 'CPXCENVptr', lp: 'CPXLPptr') -> "int":
    return _pycplex_platform.CPXXdelnames(env, lp)

def CPXXchgprobname(env: 'CPXCENVptr', lp: 'CPXLPptr', probname_str: 'char const *') -> "int":
    return _pycplex_platform.CPXXchgprobname(env, lp, probname_str)

def CPXXchgcoeflist(env: 'CPXCENVptr', lp: 'CPXLPptr', numcoefs: 'CPXNNZ', py_rowlist: 'CPXDIM const *', py_collist: 'CPXDIM const *', py_vallist: 'double const *') -> "int":
    return _pycplex_platform.CPXXchgcoeflist(env, lp, numcoefs, py_rowlist, py_collist, py_vallist)

def CPXXchgbds(env: 'CPXCENVptr', lp: 'CPXLPptr', cnt: 'CPXDIM', py_indices: 'CPXDIM const *', lu: 'char const *', py_bd: 'double const *') -> "int":
    return _pycplex_platform.CPXXchgbds(env, lp, cnt, py_indices, lu, py_bd)

def CPXXchgobj(env: 'CPXCENVptr', lp: 'CPXLPptr', cnt: 'CPXDIM', py_indices: 'CPXDIM const *', py_values: 'double const *') -> "int":
    return _pycplex_platform.CPXXchgobj(env, lp, cnt, py_indices, py_values)

def CPXXchgrhs(env: 'CPXCENVptr', lp: 'CPXLPptr', cnt: 'CPXDIM', py_indices: 'CPXDIM const *', py_values: 'double const *') -> "int":
    return _pycplex_platform.CPXXchgrhs(env, lp, cnt, py_indices, py_values)

def CPXXchgrngval(env: 'CPXCENVptr', lp: 'CPXLPptr', cnt: 'CPXDIM', py_indices: 'CPXDIM const *', py_values: 'double const *') -> "int":
    return _pycplex_platform.CPXXchgrngval(env, lp, cnt, py_indices, py_values)

def CPXXchgsense(env: 'CPXCENVptr', lp: 'CPXLPptr', cnt: 'CPXDIM', py_indices: 'CPXDIM const *', sense: 'char const *') -> "int":
    return _pycplex_platform.CPXXchgsense(env, lp, cnt, py_indices, sense)

def CPXXchgobjsen(env: 'CPXCENVptr', lp: 'CPXLPptr', maxormin: 'int') -> "int":
    return _pycplex_platform.CPXXchgobjsen(env, lp, maxormin)

def CPXXchgprobtype(env: 'CPXCENVptr', lp: 'CPXLPptr', type: 'int') -> "int":
    return _pycplex_platform.CPXXchgprobtype(env, lp, type)

def CPXXchgprobtypesolnpool(env: 'CPXCENVptr', lp: 'CPXLPptr', type: 'int', soln: 'int') -> "int":
    return _pycplex_platform.CPXXchgprobtypesolnpool(env, lp, type, soln)

def CPXXcompletelp(env: 'CPXCENVptr', lp: 'CPXLPptr') -> "int":
    return _pycplex_platform.CPXXcompletelp(env, lp)

def CPXXpreaddrows(env: 'CPXCENVptr', lp: 'CPXLPptr', rcnt: 'CPXDIM', nzcnt: 'CPXNNZ', py_rhs: 'double const *', sense: 'char const *', py_rmatbeg: 'CPXNNZ const *', py_rmatind: 'CPXDIM const *', py_rmatval: 'double const *', rowname: 'char const *const *') -> "int":
    return _pycplex_platform.CPXXpreaddrows(env, lp, rcnt, nzcnt, py_rhs, sense, py_rmatbeg, py_rmatind, py_rmatval, rowname)

def CPXXprechgobj(env: 'CPXCENVptr', lp: 'CPXLPptr', cnt: 'CPXDIM', indices: 'CPXDIM const *', values: 'double const *') -> "int":
    return _pycplex_platform.CPXXprechgobj(env, lp, cnt, indices, values)

def CPXXgetnumcols(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "int":
    return _pycplex_platform.CPXXgetnumcols(env, lp)

def CPXXgetnumrows(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "int":
    return _pycplex_platform.CPXXgetnumrows(env, lp)

def CPXXgetnumnz(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "CPXNNZ":
    return _pycplex_platform.CPXXgetnumnz(env, lp)

def CPXXgetobjsen(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "int":
    return _pycplex_platform.CPXXgetobjsen(env, lp)

def CPXXgetobj(env: 'CPXCENVptr', lp: 'CPXCLPptr', obj: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetobj(env, lp, obj, begin, end)

def CPXXgetrhs(env: 'CPXCENVptr', lp: 'CPXCLPptr', rhs: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetrhs(env, lp, rhs, begin, end)

def CPXXgetsense(env: 'CPXCENVptr', lp: 'CPXCLPptr', sense: 'char *') -> "CPXDIM":
    return _pycplex_platform.CPXXgetsense(env, lp, sense)

def CPXXgetcols(env: 'CPXCENVptr', lp: 'CPXCLPptr', nzcnt_p: 'CPXNNZ *') -> "CPXDIM":
    return _pycplex_platform.CPXXgetcols(env, lp, nzcnt_p)

def CPXXgetrows(env: 'CPXCENVptr', lp: 'CPXCLPptr', nzcnt_p: 'CPXNNZ *') -> "CPXDIM":
    return _pycplex_platform.CPXXgetrows(env, lp, nzcnt_p)

def CPXXgetlb(env: 'CPXCENVptr', lp: 'CPXCLPptr', lb: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetlb(env, lp, lb, begin, end)

def CPXXgetub(env: 'CPXCENVptr', lp: 'CPXCLPptr', ub: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetub(env, lp, ub, begin, end)

def CPXXgetrngval(env: 'CPXCENVptr', lp: 'CPXCLPptr', rngval: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetrngval(env, lp, rngval, begin, end)

def CPXXgetprobname(env: 'CPXCENVptr', lp: 'CPXCLPptr', buf_str: 'char *') -> "CPXSIZE *":
    return _pycplex_platform.CPXXgetprobname(env, lp, buf_str)

def CPXXgetobjname(env: 'CPXCENVptr', lp: 'CPXCLPptr', buf_str: 'char *') -> "CPXSIZE *":
    return _pycplex_platform.CPXXgetobjname(env, lp, buf_str)

def CPXXgetcolname(env: 'CPXCENVptr', lp: 'CPXCLPptr', name: 'char **') -> "CPXDIM":
    return _pycplex_platform.CPXXgetcolname(env, lp, name)

def CPXXgetrowname(env: 'CPXCENVptr', lp: 'CPXCLPptr', name: 'char **') -> "CPXDIM":
    return _pycplex_platform.CPXXgetrowname(env, lp, name)

def CPXXgetcoef(env: 'CPXCENVptr', lp: 'CPXCLPptr', i: 'CPXDIM', j: 'CPXDIM', coef_p: 'double *') -> "int":
    return _pycplex_platform.CPXXgetcoef(env, lp, i, j, coef_p)

def CPXXgetrowindex(env: 'CPXCENVptr', lp: 'CPXCLPptr', lname_str: 'char const *', index_p: 'CPXDIM *') -> "int":
    return _pycplex_platform.CPXXgetrowindex(env, lp, lname_str, index_p)

def CPXXgetcolindex(env: 'CPXCENVptr', lp: 'CPXCLPptr', lname_str: 'char const *', index_p: 'CPXDIM *') -> "int":
    return _pycplex_platform.CPXXgetcolindex(env, lp, lname_str, index_p)

def CPXXgetprobtype(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "int":
    return _pycplex_platform.CPXXgetprobtype(env, lp)

def CPXXsetdefaults(env: 'CPXENVptr') -> "int":
    return _pycplex_platform.CPXXsetdefaults(env)

def CPXXsetintparam(env: 'CPXENVptr', whichparam: 'int', newvalue: 'int') -> "int":
    return _pycplex_platform.CPXXsetintparam(env, whichparam, newvalue)

def CPXXsetlongparam(env: 'CPXENVptr', whichparam: 'int', newvalue: 'CPXLONG') -> "int":
    return _pycplex_platform.CPXXsetlongparam(env, whichparam, newvalue)

def CPXXsetdblparam(env: 'CPXENVptr', whichparam: 'int', newvalue: 'double') -> "int":
    return _pycplex_platform.CPXXsetdblparam(env, whichparam, newvalue)

def CPXXsetstrparam(env: 'CPXENVptr', whichparam: 'int', newvalue_str: 'char const *') -> "int":
    return _pycplex_platform.CPXXsetstrparam(env, whichparam, newvalue_str)

def CPXXgetintparam(env: 'CPXCENVptr', whichparam: 'int', value_p: 'int *') -> "int":
    return _pycplex_platform.CPXXgetintparam(env, whichparam, value_p)

def CPXXgetlongparam(env: 'CPXCENVptr', whichparam: 'int', value_p: 'CPXLONG *') -> "int":
    return _pycplex_platform.CPXXgetlongparam(env, whichparam, value_p)

def CPXXgetdblparam(env: 'CPXCENVptr', whichparam: 'int', value_p: 'double *') -> "int":
    return _pycplex_platform.CPXXgetdblparam(env, whichparam, value_p)

def CPXXgetstrparam(env: 'CPXCENVptr', whichparam: 'int', param_buffer_str: 'char *') -> "char *":
    return _pycplex_platform.CPXXgetstrparam(env, whichparam, param_buffer_str)

def CPXXinfointparam(env: 'CPXCENVptr', whichparam: 'int', defvalue_p: 'int *', minvalue_p: 'int *', maxvalue_p: 'int *') -> "int":
    return _pycplex_platform.CPXXinfointparam(env, whichparam, defvalue_p, minvalue_p, maxvalue_p)

def CPXXinfolongparam(env: 'CPXCENVptr', whichparam: 'int', defvalue_p: 'CPXLONG *', minvalue_p: 'CPXLONG *', maxvalue_p: 'CPXLONG *') -> "int":
    return _pycplex_platform.CPXXinfolongparam(env, whichparam, defvalue_p, minvalue_p, maxvalue_p)

def CPXXinfodblparam(env: 'CPXCENVptr', whichparam: 'int', defvalue_p: 'double *', minvalue_p: 'double *', maxvalue_p: 'double *') -> "int":
    return _pycplex_platform.CPXXinfodblparam(env, whichparam, defvalue_p, minvalue_p, maxvalue_p)

def CPXXinfostrparam(env: 'CPXCENVptr', whichparam: 'int', param_buffer_str: 'char *') -> "char *":
    return _pycplex_platform.CPXXinfostrparam(env, whichparam, param_buffer_str)

def CPXXgetparamtype(env: 'CPXCENVptr', whichparam: 'int', paramtype: 'int *') -> "int":
    return _pycplex_platform.CPXXgetparamtype(env, whichparam, paramtype)

def CPXXEfixparam(env: 'CPXCENVptr', paramnum: 'int') -> "int":
    return _pycplex_platform.CPXXEfixparam(env, paramnum)

def CPXXversion(env: 'CPXCENVptr') -> "CPXCCHARptr":
    return _pycplex_platform.CPXXversion(env)

def CPXXversionnumber(env: 'CPXCENVptr', version_p: 'int *') -> "int":
    return _pycplex_platform.CPXXversionnumber(env, version_p)

def CPXXopenCPLEX(status_p: 'int *') -> "CPXENVptr":
    return _pycplex_platform.CPXXopenCPLEX(status_p)

def CPXXcloseCPLEX(env_p: 'CPXENVptr *') -> "int":
    return _pycplex_platform.CPXXcloseCPLEX(env_p)

def CPXXgetchannels(env: 'CPXCENVptr', cpxresults_p: 'CPXCHANNELptr *', cpxwarning_p: 'CPXCHANNELptr *', cpxerror_p: 'CPXCHANNELptr *', cpxlog_p: 'CPXCHANNELptr *') -> "int":
    return _pycplex_platform.CPXXgetchannels(env, cpxresults_p, cpxwarning_p, cpxerror_p, cpxlog_p)

def CPXXaddfuncdest(env: 'CPXCENVptr', channel: 'CPXCHANNELptr', handle: 'void *') -> "int":
    return _pycplex_platform.CPXXaddfuncdest(env, channel, handle)

def CPXXdelfuncdest(env: 'CPXCENVptr', channel: 'CPXCHANNELptr', handle: 'void *') -> "int":
    return _pycplex_platform.CPXXdelfuncdest(env, channel, handle)

def CPXXgeterrorstring(env: 'CPXCENVptr', errcode: 'int', error_buffer_str: 'char *') -> "char *":
    return _pycplex_platform.CPXXgeterrorstring(env, errcode, error_buffer_str)

def CPXXsetlpcallbackfunc(env: 'CPXENVptr', lpcallback: 'int (*)(CPXCENVptr,void *,int,void *)') -> "int":
    return _pycplex_platform.CPXXsetlpcallbackfunc(env, lpcallback)

def CPXXsetnetcallbackfunc(env: 'CPXENVptr', netcallback: 'int (*)(CPXCENVptr,void *,int,void *)') -> "int":
    return _pycplex_platform.CPXXsetnetcallbackfunc(env, netcallback)

def CPXXsettuningcallbackfunc(env: 'CPXENVptr', tuningcallback: 'int (*)(CPXCENVptr,void *,int,void *)') -> "int":
    return _pycplex_platform.CPXXsettuningcallbackfunc(env, tuningcallback)

def CPXXsetterminate(env: 'CPXENVptr', terminate_p: 'int volatile *') -> "int":
    return _pycplex_platform.CPXXsetterminate(env, terminate_p)

def CPXXgetbhead(env: 'CPXCENVptr', lp: 'CPXCLPptr', head: 'CPXDIM *', x: 'double *') -> "int":
    return _pycplex_platform.CPXXgetbhead(env, lp, head, x)

def CPXXbinvcol(env: 'CPXCENVptr', lp: 'CPXCLPptr', j: 'CPXDIM', x: 'double *') -> "int":
    return _pycplex_platform.CPXXbinvcol(env, lp, j, x)

def CPXXbinvrow(env: 'CPXCENVptr', lp: 'CPXCLPptr', i: 'CPXDIM', y: 'double *') -> "int":
    return _pycplex_platform.CPXXbinvrow(env, lp, i, y)

def CPXXbinvacol(env: 'CPXCENVptr', lp: 'CPXCLPptr', j: 'CPXDIM', x: 'double *') -> "int":
    return _pycplex_platform.CPXXbinvacol(env, lp, j, x)

def CPXXbinvarow(env: 'CPXCENVptr', lp: 'CPXCLPptr', i: 'CPXDIM', z: 'double *') -> "int":
    return _pycplex_platform.CPXXbinvarow(env, lp, i, z)

def CPXXftran(env: 'CPXCENVptr', lp: 'CPXCLPptr', x: 'double *') -> "int":
    return _pycplex_platform.CPXXftran(env, lp, x)

def CPXXbtran(env: 'CPXCENVptr', lp: 'CPXCLPptr', y: 'double *') -> "int":
    return _pycplex_platform.CPXXbtran(env, lp, y)

def CPXXgetijrow(env: 'CPXCENVptr', lp: 'CPXCLPptr', i: 'CPXDIM', j: 'CPXDIM', row_p: 'int *') -> "int":
    return _pycplex_platform.CPXXgetijrow(env, lp, i, j, row_p)

def CPXXgetray(env: 'CPXCENVptr', lp: 'CPXCLPptr', z: 'double *') -> "int":
    return _pycplex_platform.CPXXgetray(env, lp, z)

def CPXXmdleave(env: 'CPXCENVptr', lp: 'CPXLPptr', goodlist: 'CPXDIM const *', goodlen: 'CPXDIM', downratio: 'double *', upratio: 'double *') -> "int":
    return _pycplex_platform.CPXXmdleave(env, lp, goodlist, goodlen, downratio, upratio)

def CPXXdualfarkas(env: 'CPXCENVptr', lp: 'CPXCLPptr', y: 'double *', proof_p: 'double *') -> "int":
    return _pycplex_platform.CPXXdualfarkas(env, lp, y, proof_p)

def CPXXchgobjoffset(env: 'CPXCENVptr', lp: 'CPXLPptr', offset: 'double') -> "int":
    return _pycplex_platform.CPXXchgobjoffset(env, lp, offset)

def CPXXgetobjoffset(env: 'CPXCENVptr', lp: 'CPXCLPptr', objoffset_p: 'double *') -> "int":
    return _pycplex_platform.CPXXgetobjoffset(env, lp, objoffset_p)

def CPXXgetbasednorms(env: 'CPXCENVptr', lp: 'CPXCLPptr', cstat: 'int *', rstat: 'int *', dnorm: 'double *') -> "int":
    return _pycplex_platform.CPXXgetbasednorms(env, lp, cstat, rstat, dnorm)

def CPXXgetdnorms(env: 'CPXCENVptr', lp: 'CPXCLPptr', norm: 'double *', head: 'CPXDIM *', len_p: 'CPXDIM *') -> "int":
    return _pycplex_platform.CPXXgetdnorms(env, lp, norm, head, len_p)

def CPXXgetpnorms(env: 'CPXCENVptr', lp: 'CPXCLPptr', cnorm: 'double *', rnorm: 'double *', len_p: 'CPXDIM *') -> "int":
    return _pycplex_platform.CPXXgetpnorms(env, lp, cnorm, rnorm, len_p)

def CPXXtightenbds(env: 'CPXCENVptr', lp: 'CPXLPptr', cnt: 'CPXDIM', indices: 'CPXDIM const *', lu: 'char const *', bd: 'double const *') -> "int":
    return _pycplex_platform.CPXXtightenbds(env, lp, cnt, indices, lu, bd)

def CPXXbasicpresolve(env: 'CPXCENVptr', lp: 'CPXLPptr', redlb: 'double *', redub: 'double *', rstat: 'int *') -> "int":
    return _pycplex_platform.CPXXbasicpresolve(env, lp, redlb, redub, rstat)

def CPXXslackfromx(env: 'CPXCENVptr', lp: 'CPXCLPptr', x: 'double const *', slack: 'double *') -> "int":
    return _pycplex_platform.CPXXslackfromx(env, lp, x, slack)

def CPXXdjfrompi(env: 'CPXCENVptr', lp: 'CPXCLPptr', pi: 'double const *', dj: 'double *') -> "int":
    return _pycplex_platform.CPXXdjfrompi(env, lp, pi, dj)

def CPXXqpdjfrompi(env: 'CPXCENVptr', lp: 'CPXCLPptr', pi: 'double const *', x: 'double const *', dj: 'double *') -> "int":
    return _pycplex_platform.CPXXqpdjfrompi(env, lp, pi, x, dj)

def CPXXfreepresolve(env: 'CPXCENVptr', lp: 'CPXLPptr') -> "int":
    return _pycplex_platform.CPXXfreepresolve(env, lp)

def CPXXgetredlp(env: 'CPXCENVptr', lp: 'CPXCLPptr', redlp_p: 'CPXCLPptr *') -> "int":
    return _pycplex_platform.CPXXgetredlp(env, lp, redlp_p)

def CPXXcrushx(env: 'CPXCENVptr', lp: 'CPXCLPptr', x: 'double const *', prex: 'double *') -> "int":
    return _pycplex_platform.CPXXcrushx(env, lp, x, prex)

def CPXXuncrushx(env: 'CPXCENVptr', lp: 'CPXCLPptr', x: 'double *', prex: 'double const *') -> "int":
    return _pycplex_platform.CPXXuncrushx(env, lp, x, prex)

def CPXXcrushpi(env: 'CPXCENVptr', lp: 'CPXCLPptr', pi: 'double const *', prepi: 'double *') -> "int":
    return _pycplex_platform.CPXXcrushpi(env, lp, pi, prepi)

def CPXXuncrushpi(env: 'CPXCENVptr', lp: 'CPXCLPptr', pi: 'double *', prepi: 'double const *') -> "int":
    return _pycplex_platform.CPXXuncrushpi(env, lp, pi, prepi)

def CPXXcrushform(env: 'CPXCENVptr', lp: 'CPXCLPptr', len: 'CPXDIM', ind: 'CPXDIM const *', val: 'double const *', plen_p: 'CPXDIM *', poffset_p: 'double *', pind: 'CPXDIM *', pval: 'double *') -> "int":
    return _pycplex_platform.CPXXcrushform(env, lp, len, ind, val, plen_p, poffset_p, pind, pval)

def CPXXuncrushform(env: 'CPXCENVptr', lp: 'CPXCLPptr', plen: 'CPXDIM', pind: 'CPXDIM const *', pval: 'double const *', len_p: 'CPXDIM *', offset_p: 'double *', ind: 'CPXDIM *', val: 'double *') -> "int":
    return _pycplex_platform.CPXXuncrushform(env, lp, plen, pind, pval, len_p, offset_p, ind, val)

def CPXXgetprestat(env: 'CPXCENVptr', lp: 'CPXCLPptr', prestat_p: 'CPXDIM *', pcstat: 'CPXDIM *', prstat: 'CPXDIM *', ocstat: 'CPXDIM *', orstat: 'CPXDIM *') -> "int":
    return _pycplex_platform.CPXXgetprestat(env, lp, prestat_p, pcstat, prstat, ocstat, orstat)

def CPXXcopyprotected(env: 'CPXCENVptr', lp: 'CPXLPptr', cnt: 'CPXDIM', indices: 'CPXDIM const *') -> "int":
    return _pycplex_platform.CPXXcopyprotected(env, lp, cnt, indices)

def CPXXgetprotected(env: 'CPXCENVptr', lp: 'CPXCLPptr', cnt_p: 'CPXDIM *', indices: 'CPXDIM *', pspace: 'CPXDIM', surplus_p: 'CPXDIM *') -> "int":
    return _pycplex_platform.CPXXgetprotected(env, lp, cnt_p, indices, pspace, surplus_p)

def CPXXgettime(env: 'CPXCENVptr', timestamp: 'double *') -> "int":
    return _pycplex_platform.CPXXgettime(env, timestamp)

def CPXXgetdettime(env: 'CPXCENVptr', timestamp: 'double *') -> "int":
    return _pycplex_platform.CPXXgetdettime(env, timestamp)

def CPXXcopyorder(env: 'CPXCENVptr', lp: 'CPXLPptr', cnt: 'CPXDIM', indices: 'CPXDIM const *', priority: 'CPXDIM const *', direction: 'int const *') -> "int":
    return _pycplex_platform.CPXXcopyorder(env, lp, cnt, indices, priority, direction)

def CPXXchgmipstarts(env: 'CPXCENVptr', lp: 'CPXLPptr', mcnt: 'int', py_mipstartindices: 'int const *', nzcnt: 'CPXNNZ', py_beg: 'CPXNNZ const *', py_varindices: 'CPXDIM const *', py_values: 'double const *', py_effortlevel: 'int const *') -> "int":
    return _pycplex_platform.CPXXchgmipstarts(env, lp, mcnt, py_mipstartindices, nzcnt, py_beg, py_varindices, py_values, py_effortlevel)

def CPXXaddmipstarts(env: 'CPXCENVptr', lp: 'CPXLPptr', mcnt: 'int', nzcnt: 'CPXNNZ', py_beg: 'CPXNNZ const *', py_varindices: 'CPXDIM const *', py_values: 'double const *', py_effortlevel: 'int const *', mipstartname: 'char const *const *') -> "int":
    return _pycplex_platform.CPXXaddmipstarts(env, lp, mcnt, nzcnt, py_beg, py_varindices, py_values, py_effortlevel, mipstartname)

def CPXXdelmipstarts(env: 'CPXCENVptr', lp: 'CPXLPptr', begin: 'int', end: 'int') -> "int":
    return _pycplex_platform.CPXXdelmipstarts(env, lp, begin, end)

def CPXXgetmipitcnt(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "CPXLONG":
    return _pycplex_platform.CPXXgetmipitcnt(env, lp)

def CPXXgetbestobjval(env: 'CPXCENVptr', lp: 'CPXCLPptr', objval_p: 'double *') -> "int":
    return _pycplex_platform.CPXXgetbestobjval(env, lp, objval_p)

def CPXXgetmiprelgap(env: 'CPXCENVptr', lp: 'CPXCLPptr', gap_p: 'double *') -> "int":
    return _pycplex_platform.CPXXgetmiprelgap(env, lp, gap_p)

def CPXXgetcutoff(env: 'CPXCENVptr', lp: 'CPXCLPptr', cutoff_p: 'double *') -> "int":
    return _pycplex_platform.CPXXgetcutoff(env, lp, cutoff_p)

def CPXXgetnodecnt(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "CPXLONG":
    return _pycplex_platform.CPXXgetnodecnt(env, lp)

def CPXXgetnodeleftcnt(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "CPXLONG":
    return _pycplex_platform.CPXXgetnodeleftcnt(env, lp)

def CPXXgetnodeint(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "CPXLONG":
    return _pycplex_platform.CPXXgetnodeint(env, lp)

def CPXXgetnumcuts(env: 'CPXCENVptr', lp: 'CPXCLPptr', cuttype: 'int', num_p: 'CPXDIM *') -> "int":
    return _pycplex_platform.CPXXgetnumcuts(env, lp, cuttype, num_p)

def CPXXgetnummipstarts(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "int":
    return _pycplex_platform.CPXXgetnummipstarts(env, lp)

def CPXXgetmipstarts(env: 'CPXCENVptr', lp: 'CPXCLPptr', nzcnt_p: 'CPXNNZ *', beg: 'CPXNNZ *', varindices: 'CPXDIM *', values: 'double *', effortlevel: 'int *', startspace: 'CPXNNZ', surplus_p: 'CPXNNZ *', begin: 'int', end: 'int') -> "int":
    return _pycplex_platform.CPXXgetmipstarts(env, lp, nzcnt_p, beg, varindices, values, effortlevel, startspace, surplus_p, begin, end)

def CPXXgetmipstartname(env: 'CPXCENVptr', lp: 'CPXCLPptr', name: 'char **') -> "int":
    return _pycplex_platform.CPXXgetmipstartname(env, lp, name)

def CPXXgetmipstartindex(env: 'CPXCENVptr', lp: 'CPXCLPptr', lname_str: 'char const *', index_p: 'int *') -> "int":
    return _pycplex_platform.CPXXgetmipstartindex(env, lp, lname_str, index_p)

def CPXXgetsubstat(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "int":
    return _pycplex_platform.CPXXgetsubstat(env, lp)

def CPXXchgctype(env: 'CPXCENVptr', lp: 'CPXLPptr', cnt: 'CPXDIM', py_indices: 'CPXDIM const *', xctype: 'char const *') -> "int":
    return _pycplex_platform.CPXXchgctype(env, lp, cnt, py_indices, xctype)

def CPXXaddsos(env: 'CPXCENVptr', lp: 'CPXLPptr', numsos: 'CPXDIM', numsosnz: 'CPXNNZ', sostype: 'char const *', py_sosbeg: 'CPXNNZ const *', py_sosind: 'CPXDIM const *', py_soswt: 'double const *', sosname: 'char const *const *') -> "int":
    return _pycplex_platform.CPXXaddsos(env, lp, numsos, numsosnz, sostype, py_sosbeg, py_sosind, py_soswt, sosname)

def CPXXdelsos(env: 'CPXCENVptr', lp: 'CPXLPptr', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXdelsos(env, lp, begin, end)

def CPXXgetctype(env: 'CPXCENVptr', lp: 'CPXCLPptr', xctype: 'char *') -> "CPXDIM":
    return _pycplex_platform.CPXXgetctype(env, lp, xctype)

def CPXXgetnumsos(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "int":
    return _pycplex_platform.CPXXgetnumsos(env, lp)

def CPXXgetsos(env: 'CPXCENVptr', lp: 'CPXCLPptr', numsosnz_p: 'CPXNNZ *') -> "CPXDIM":
    return _pycplex_platform.CPXXgetsos(env, lp, numsosnz_p)

def CPXXgetsosname(env: 'CPXCENVptr', lp: 'CPXCLPptr', name: 'char **') -> "CPXDIM":
    return _pycplex_platform.CPXXgetsosname(env, lp, name)

def CPXXgetsosindex(env: 'CPXCENVptr', lp: 'CPXCLPptr', lname_str: 'char const *', index_p: 'CPXDIM *') -> "int":
    return _pycplex_platform.CPXXgetsosindex(env, lp, lname_str, index_p)

def CPXXgetsosinfeas(env: 'CPXCENVptr', lp: 'CPXCLPptr', x: 'double const *', infeasout: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetsosinfeas(env, lp, x, infeasout, begin, end)

def CPXXaddindconstraints(env: 'CPXCENVptr', lp: 'CPXLPptr', indcnt: 'CPXDIM', py_type: 'int const *', py_indvar: 'CPXDIM const *', py_complemented: 'int const *', nzcnt: 'CPXNNZ', py_rhs: 'double const *', sense: 'char const *', linbeg: 'CPXNNZ const *', indname: 'char const *const *') -> "int":
    return _pycplex_platform.CPXXaddindconstraints(env, lp, indcnt, py_type, py_indvar, py_complemented, nzcnt, py_rhs, sense, linbeg, indname)

def CPXXgetindconstraints(env: 'CPXCENVptr', lp: 'CPXCLPptr', type: 'int *') -> "CPXDIM":
    return _pycplex_platform.CPXXgetindconstraints(env, lp, type)

def CPXXgetnumindconstrs(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "int":
    return _pycplex_platform.CPXXgetnumindconstrs(env, lp)

def CPXXgetindconstrindex(env: 'CPXCENVptr', lp: 'CPXCLPptr', lname_str: 'char const *', index_p: 'CPXDIM *') -> "int":
    return _pycplex_platform.CPXXgetindconstrindex(env, lp, lname_str, index_p)

def CPXXgetindconstrname(env: 'CPXCENVptr', lp: 'CPXCLPptr', buf_str: 'char *', which: 'CPXDIM') -> "CPXSIZE *":
    return _pycplex_platform.CPXXgetindconstrname(env, lp, buf_str, which)

def CPXXgetindconstrslack(env: 'CPXCENVptr', lp: 'CPXCLPptr', indslack: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetindconstrslack(env, lp, indslack, begin, end)

def CPXXindconstrslackfromx(env: 'CPXCENVptr', lp: 'CPXCLPptr', x: 'double const *', indslack: 'double *') -> "int":
    return _pycplex_platform.CPXXindconstrslackfromx(env, lp, x, indslack)

def CPXXgetindconstrinfeas(env: 'CPXCENVptr', lp: 'CPXCLPptr', x: 'double const *', infeasout: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetindconstrinfeas(env, lp, x, infeasout, begin, end)

def CPXXdelindconstrs(env: 'CPXCENVptr', lp: 'CPXLPptr', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXdelindconstrs(env, lp, begin, end)

def CPXXgetnumint(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "int":
    return _pycplex_platform.CPXXgetnumint(env, lp)

def CPXXgetnumbin(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "int":
    return _pycplex_platform.CPXXgetnumbin(env, lp)

def CPXXgetnumsemicont(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "int":
    return _pycplex_platform.CPXXgetnumsemicont(env, lp)

def CPXXgetnumsemiint(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "int":
    return _pycplex_platform.CPXXgetnumsemiint(env, lp)

def CPXXgetorder(env: 'CPXCENVptr', lp: 'CPXCLPptr', cnt_p: 'CPXDIM *', indices: 'CPXDIM *', priority: 'CPXDIM *', direction: 'int *', ordspace: 'CPXDIM', surplus_p: 'CPXDIM *') -> "int":
    return _pycplex_platform.CPXXgetorder(env, lp, cnt_p, indices, priority, direction, ordspace, surplus_p)

def CPXXgetsolnpoolnumfilters(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "int":
    return _pycplex_platform.CPXXgetsolnpoolnumfilters(env, lp)

def CPXXaddsolnpooldivfilter(env: 'CPXCENVptr', lp: 'CPXLPptr', lower_bound: 'double', upper_bound: 'double', nzcnt: 'CPXDIM', ind: 'CPXDIM const *', weight: 'double const *', refval: 'double const *', lname_str: 'char const *') -> "int":
    return _pycplex_platform.CPXXaddsolnpooldivfilter(env, lp, lower_bound, upper_bound, nzcnt, ind, weight, refval, lname_str)

def CPXXaddsolnpoolrngfilter(env: 'CPXCENVptr', lp: 'CPXLPptr', lb: 'double', ub: 'double', nzcnt: 'CPXDIM', ind: 'int const *', val: 'double const *', lname_str: 'char const *') -> "int":
    return _pycplex_platform.CPXXaddsolnpoolrngfilter(env, lp, lb, ub, nzcnt, ind, val, lname_str)

def CPXXgetsolnpoolfiltertype(env: 'CPXCENVptr', lp: 'CPXCLPptr', ftype_p: 'int *', which: 'int') -> "int":
    return _pycplex_platform.CPXXgetsolnpoolfiltertype(env, lp, ftype_p, which)

def CPXXgetsolnpooldivfilter(env: 'CPXCENVptr', lp: 'CPXCLPptr', lowercutoff_p: 'double *', upper_cutoff_p: 'double *', nzcnt_p: 'CPXDIM *', ind: 'CPXDIM *', val: 'double *', refval: 'double *', space: 'CPXDIM', surplus_p: 'CPXDIM *', which: 'int') -> "int":
    return _pycplex_platform.CPXXgetsolnpooldivfilter(env, lp, lowercutoff_p, upper_cutoff_p, nzcnt_p, ind, val, refval, space, surplus_p, which)

def CPXXgetsolnpoolrngfilter(env: 'CPXCENVptr', lp: 'CPXCLPptr', lb_p: 'double *', ub_p: 'double *', nzcnt_p: 'CPXDIM *', ind: 'CPXDIM *', val: 'double *', space: 'CPXDIM', surplus_p: 'CPXDIM *', which: 'int') -> "int":
    return _pycplex_platform.CPXXgetsolnpoolrngfilter(env, lp, lb_p, ub_p, nzcnt_p, ind, val, space, surplus_p, which)

def CPXXgetsolnpoolfiltername(env: 'CPXCENVptr', lp: 'CPXCLPptr', buf_str: 'char *', which: 'int') -> "CPXSIZE *":
    return _pycplex_platform.CPXXgetsolnpoolfiltername(env, lp, buf_str, which)

def CPXXgetsolnpoolfilterindex(env: 'CPXCENVptr', lp: 'CPXCLPptr', lname_str: 'char const *', index_p: 'int *') -> "int":
    return _pycplex_platform.CPXXgetsolnpoolfilterindex(env, lp, lname_str, index_p)

def CPXXdelsolnpoolfilters(env: 'CPXCENVptr', lp: 'CPXLPptr', begin: 'int', end: 'int') -> "int":
    return _pycplex_platform.CPXXdelsolnpoolfilters(env, lp, begin, end)

def CPXXgetsolnpoolnumsolns(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "int":
    return _pycplex_platform.CPXXgetsolnpoolnumsolns(env, lp)

def CPXXgetsolnpoolnumreplaced(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "int":
    return _pycplex_platform.CPXXgetsolnpoolnumreplaced(env, lp)

def CPXXgetsolnpoolmeanobjval(env: 'CPXCENVptr', lp: 'CPXCLPptr', meanobjval_p: 'double *') -> "int":
    return _pycplex_platform.CPXXgetsolnpoolmeanobjval(env, lp, meanobjval_p)

def CPXXgetsolnpoolobjval(env: 'CPXCENVptr', lp: 'CPXCLPptr', soln: 'int', objval_p: 'double *') -> "int":
    return _pycplex_platform.CPXXgetsolnpoolobjval(env, lp, soln, objval_p)

def CPXXgetsolnpoolx(env: 'CPXCENVptr', lp: 'CPXCLPptr', soln: 'int', x: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetsolnpoolx(env, lp, soln, x, begin, end)

def CPXXgetsolnpoolslack(env: 'CPXCENVptr', lp: 'CPXCLPptr', soln: 'int', slack: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetsolnpoolslack(env, lp, soln, slack, begin, end)

def CPXXgetsolnpoolqconstrslack(env: 'CPXCENVptr', lp: 'CPXCLPptr', soln: 'int', qcslack: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetsolnpoolqconstrslack(env, lp, soln, qcslack, begin, end)

def CPXXgetsolnpoolsolnname(env: 'CPXCENVptr', lp: 'CPXCLPptr', buf_str: 'char *', which: 'int') -> "CPXSIZE *":
    return _pycplex_platform.CPXXgetsolnpoolsolnname(env, lp, buf_str, which)

def CPXXgetsolnpoolsolnindex(env: 'CPXCENVptr', lp: 'CPXCLPptr', lname_str: 'char const *', index_p: 'int *') -> "int":
    return _pycplex_platform.CPXXgetsolnpoolsolnindex(env, lp, lname_str, index_p)

def CPXXdelsolnpoolsolns(env: 'CPXCENVptr', lp: 'CPXLPptr', begin: 'int', end: 'int') -> "int":
    return _pycplex_platform.CPXXdelsolnpoolsolns(env, lp, begin, end)

def CPXXsetinfocallbackfunc(env: 'CPXENVptr', infocallback: 'int (*)(CPXCENVptr,void *,int,void *)') -> "int":
    return _pycplex_platform.CPXXsetinfocallbackfunc(env, infocallback)

def CPXXsetmipcallbackfunc(env: 'CPXENVptr', mipcallback: 'int (*)(CPXCENVptr,void *,int,void *)') -> "int":
    return _pycplex_platform.CPXXsetmipcallbackfunc(env, mipcallback)

def CPXXsetbranchcallbackfunc(env: 'CPXENVptr', branchcallback: 'int (*)(CPXCENVptr,void *,int,void *,int,CPXDIM,int,CPXDIM,CPXDIM const *,CPXDIM const *,char const *,double const *,double const *,int *)') -> "int":
    return _pycplex_platform.CPXXsetbranchcallbackfunc(env, branchcallback)

def CPXXsetbranchnosolncallbackfunc(env: 'CPXENVptr', branchnosolncallback: 'int (*)(CPXCENVptr,void *,int,void *,int,CPXDIM,int,CPXDIM,CPXDIM const *,CPXDIM const *,char const *,double const *,double const *,int *)') -> "int":
    return _pycplex_platform.CPXXsetbranchnosolncallbackfunc(env, branchnosolncallback)

def CPXXsetlazyconstraintcallbackfunc(env: 'CPXENVptr', lazyconcallback: 'int (*)(CPXCENVptr,void *,int,void *,int *)') -> "int":
    return _pycplex_platform.CPXXsetlazyconstraintcallbackfunc(env, lazyconcallback)

def CPXXsetusercutcallbackfunc(env: 'CPXENVptr', usercutcallback: 'int (*)(CPXCENVptr,void *,int,void *,int *)') -> "int":
    return _pycplex_platform.CPXXsetusercutcallbackfunc(env, usercutcallback)

def CPXXsetnodecallbackfunc(env: 'CPXENVptr', nodecallback: 'int (*)(CPXCENVptr,void *,int,void *,CPXCNT *,int *)') -> "int":
    return _pycplex_platform.CPXXsetnodecallbackfunc(env, nodecallback)

def CPXXsetheuristiccallbackfunc(env: 'CPXENVptr', heuristiccallback: 'int (*)(CPXCENVptr,void *,int,void *,double *,double *,int *,int *)') -> "int":
    return _pycplex_platform.CPXXsetheuristiccallbackfunc(env, heuristiccallback)

def CPXXsetincumbentcallbackfunc(env: 'CPXENVptr', incumbentcallback: 'int (*)(CPXCENVptr,void *,int,void *,double,double *,int *,int *)') -> "int":
    return _pycplex_platform.CPXXsetincumbentcallbackfunc(env, incumbentcallback)

def CPXXsetsolvecallbackfunc(env: 'CPXENVptr', solvecallback: 'int (*)(CPXCENVptr,void *,int,void *,int *)') -> "int":
    return _pycplex_platform.CPXXsetsolvecallbackfunc(env, solvecallback)

def CPXXgetcallbacknodeinfo(env: 'CPXCENVptr', nodeindex: 'CPXCNT') -> "void *":
    return _pycplex_platform.CPXXgetcallbacknodeinfo(env, nodeindex)

def CPXXcallbacksetuserhandle(env: 'CPXCENVptr', userhandle: 'void *') -> "void **":
    return _pycplex_platform.CPXXcallbacksetuserhandle(env, userhandle)

def CPXXcallbacksetnodeuserhandle(env: 'CPXCENVptr', nodeindex: 'CPXCNT') -> "void **":
    return _pycplex_platform.CPXXcallbacksetnodeuserhandle(env, nodeindex)

def CPXXgetcallbackseqinfo(env: 'CPXCENVptr', nodeindex: 'CPXCNT') -> "void *":
    return _pycplex_platform.CPXXgetcallbackseqinfo(env, nodeindex)

def CPXXgetcallbacksosinfo(env: 'CPXCENVptr', sosindex: 'CPXDIM', member: 'CPXDIM', whichinfo: 'int', result_p: 'void *') -> "int":
    return _pycplex_platform.CPXXgetcallbacksosinfo(env, sosindex, member, whichinfo, result_p)

def CPXXgetcallbackindicatorinfo(env: 'CPXCENVptr', iindex: 'CPXDIM', whichinfo: 'int', result_p: 'void *') -> "int":
    return _pycplex_platform.CPXXgetcallbackindicatorinfo(env, iindex, whichinfo, result_p)

def CPXXcutcallbackadd(env: 'CPXCENVptr', nzcnt: 'CPXDIM', rhs: 'double', sense: 'int', cutind: 'int const *', cutval: 'double const *', purgeable: 'int') -> "int":
    return _pycplex_platform.CPXXcutcallbackadd(env, nzcnt, rhs, sense, cutind, cutval, purgeable)

def CPXXcutcallbackaddlocal(env: 'CPXCENVptr', nzcnt: 'CPXDIM', rhs: 'double', sense: 'int', cutind: 'CPXDIM const *', cutval: 'double const *') -> "int":
    return _pycplex_platform.CPXXcutcallbackaddlocal(env, nzcnt, rhs, sense, cutind, cutval)

def CPXXbranchcallbackbranchgeneral(env: 'CPXCENVptr', varcnt: 'CPXDIM', varind: 'CPXDIM const *', varlu: 'char const *', varbd: 'double const *', rcnt: 'CPXDIM', nzcnt: 'CPXNNZ', rhs: 'double const *', sense: 'char const *', rmatbeg: 'CPXNNZ const *', rmatind: 'CPXDIM const *', rmatval: 'double const *', nodeest: 'double', userhandle: 'void *', seqnum_p: 'CPXCNT *') -> "int":
    return _pycplex_platform.CPXXbranchcallbackbranchgeneral(env, varcnt, varind, varlu, varbd, rcnt, nzcnt, rhs, sense, rmatbeg, rmatind, rmatval, nodeest, userhandle, seqnum_p)

def CPXXbranchcallbackbranchasCPLEX(env: 'CPXCENVptr', num: 'int', userhandle: 'void *', seqnum_p: 'CPXCNT *') -> "int":
    return _pycplex_platform.CPXXbranchcallbackbranchasCPLEX(env, num, userhandle, seqnum_p)

def CPXXgetcallbacknodex(env: 'CPXCENVptr', x: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetcallbacknodex(env, x, begin, end)

def CPXXgetcallbacknodeobjval(env: 'CPXCENVptr', objval_p: 'double *') -> "int":
    return _pycplex_platform.CPXXgetcallbacknodeobjval(env, objval_p)

def CPXXgetcallbackorder(env: 'CPXCENVptr', priority: 'CPXDIM *', direction: 'int *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetcallbackorder(env, priority, direction, begin, end)

def CPXXgetcallbackpseudocosts(env: 'CPXCENVptr', uppc: 'double *', downpc: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetcallbackpseudocosts(env, uppc, downpc, begin, end)

def CPXXgetcallbackincumbent(env: 'CPXCENVptr', x: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetcallbackincumbent(env, x, begin, end)

def CPXXgetcallbacknodeintfeas(env: 'CPXCENVptr', feas: 'int *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetcallbacknodeintfeas(env, feas, begin, end)

def CPXXgetcallbackgloballb(env: 'CPXCENVptr', lb: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetcallbackgloballb(env, lb, begin, end)

def CPXXgetcallbackglobalub(env: 'CPXCENVptr', ub: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetcallbackglobalub(env, ub, begin, end)

def CPXXgetcallbacknodelb(env: 'CPXCENVptr', lb: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetcallbacknodelb(env, lb, begin, end)

def CPXXgetcallbacknodeub(env: 'CPXCENVptr', ub: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetcallbacknodeub(env, ub, begin, end)

def CPXXgetcallbacknodestat(env: 'CPXCENVptr', nodestat_p: 'int *') -> "int":
    return _pycplex_platform.CPXXgetcallbacknodestat(env, nodestat_p)

def CPXXaddusercuts(env: 'CPXCENVptr', lp: 'CPXLPptr', rcnt: 'CPXDIM', nzcnt: 'CPXNNZ', py_rhs: 'double const *', sense: 'char const *', py_rmatbeg: 'CPXNNZ const *', py_rmatind: 'CPXDIM const *', py_rmatval: 'double const *', rowname: 'char const *const *') -> "int":
    return _pycplex_platform.CPXXaddusercuts(env, lp, rcnt, nzcnt, py_rhs, sense, py_rmatbeg, py_rmatind, py_rmatval, rowname)

def CPXXaddlazyconstraints(env: 'CPXCENVptr', lp: 'CPXLPptr', rcnt: 'CPXDIM', nzcnt: 'CPXNNZ', py_rhs: 'double const *', sense: 'char const *', py_rmatbeg: 'CPXNNZ const *', py_rmatind: 'CPXDIM const *', py_rmatval: 'double const *', rowname: 'char const *const *') -> "int":
    return _pycplex_platform.CPXXaddlazyconstraints(env, lp, rcnt, nzcnt, py_rhs, sense, py_rmatbeg, py_rmatind, py_rmatval, rowname)

def CPXXfreeusercuts(env: 'CPXCENVptr', lp: 'CPXLPptr') -> "int":
    return _pycplex_platform.CPXXfreeusercuts(env, lp)

def CPXXfreelazyconstraints(env: 'CPXCENVptr', lp: 'CPXLPptr') -> "int":
    return _pycplex_platform.CPXXfreelazyconstraints(env, lp)

def CPXXcopyquad(env: 'CPXCENVptr', lp: 'CPXLPptr', py_qmatbeg: 'CPXNNZ const *', py_qmatcnt: 'CPXDIM const *', py_qmatind: 'CPXDIM const *', py_qmatval: 'double const *') -> "int":
    return _pycplex_platform.CPXXcopyquad(env, lp, py_qmatbeg, py_qmatcnt, py_qmatind, py_qmatval)

def CPXXcopyqpsep(env: 'CPXCENVptr', lp: 'CPXLPptr', py_qsepvec: 'double const *') -> "int":
    return _pycplex_platform.CPXXcopyqpsep(env, lp, py_qsepvec)

def CPXXchgqpcoef(env: 'CPXCENVptr', lp: 'CPXLPptr', i: 'CPXDIM', j: 'CPXDIM', newvalue: 'double') -> "int":
    return _pycplex_platform.CPXXchgqpcoef(env, lp, i, j, newvalue)

def CPXXgetnumqpnz(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "CPXNNZ":
    return _pycplex_platform.CPXXgetnumqpnz(env, lp)

def CPXXgetnumquad(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "int":
    return _pycplex_platform.CPXXgetnumquad(env, lp)

def CPXXgetqpcoef(env: 'CPXCENVptr', lp: 'CPXCLPptr', rownum: 'CPXDIM', colnum: 'CPXDIM', coef_p: 'double *') -> "int":
    return _pycplex_platform.CPXXgetqpcoef(env, lp, rownum, colnum, coef_p)

def CPXXgetquad(env: 'CPXCENVptr', lp: 'CPXCLPptr', nzcnt_p: 'CPXNNZ *', qmatbeg: 'CPXNNZ *', qmatind: 'CPXDIM *', qmatval: 'double *', qmatspace: 'CPXNNZ', surplus_p: 'CPXNNZ *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetquad(env, lp, nzcnt_p, qmatbeg, qmatind, qmatval, qmatspace, surplus_p, begin, end)

def CPXXaddqconstr(env: 'CPXCENVptr', lp: 'CPXLPptr', linnzcnt: 'CPXDIM', quadnzcnt: 'CPXNNZ', rhs: 'double', sense: 'int', py_linind: 'CPXDIM const *', py_linval: 'double const *', py_quadrow: 'CPXDIM const *', py_quadcol: 'CPXDIM const *', py_quadval: 'double const *', lname_str: 'char const *') -> "int":
    return _pycplex_platform.CPXXaddqconstr(env, lp, linnzcnt, quadnzcnt, rhs, sense, py_linind, py_linval, py_quadrow, py_quadcol, py_quadval, lname_str)

def CPXXdelqconstrs(env: 'CPXCENVptr', lp: 'CPXLPptr', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXdelqconstrs(env, lp, begin, end)

def CPXXgetnumqconstrs(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "int":
    return _pycplex_platform.CPXXgetnumqconstrs(env, lp)

def CPXXgetqconstrindex(env: 'CPXCENVptr', lp: 'CPXCLPptr', lname_str: 'char const *', index_p: 'CPXDIM *') -> "int":
    return _pycplex_platform.CPXXgetqconstrindex(env, lp, lname_str, index_p)

def CPXXgetqconstr(env: 'CPXCENVptr', lp: 'CPXCLPptr', linnzcnt_p: 'CPXDIM *') -> "CPXDIM":
    return _pycplex_platform.CPXXgetqconstr(env, lp, linnzcnt_p)

def CPXXgetqconstrname(env: 'CPXCENVptr', lp: 'CPXCLPptr', buf_str: 'char *', which: 'CPXDIM') -> "CPXSIZE *":
    return _pycplex_platform.CPXXgetqconstrname(env, lp, buf_str, which)

def CPXXgetqconstrslack(env: 'CPXCENVptr', lp: 'CPXCLPptr', qcslack: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetqconstrslack(env, lp, qcslack, begin, end)

def CPXXqconstrslackfromx(env: 'CPXCENVptr', lp: 'CPXCLPptr', x: 'double const *', qcslack: 'double *') -> "int":
    return _pycplex_platform.CPXXqconstrslackfromx(env, lp, x, qcslack)

def CPXXgetqconstrinfeas(env: 'CPXCENVptr', lp: 'CPXCLPptr', x: 'double const *', infeasout: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetqconstrinfeas(env, lp, x, infeasout, begin, end)

def CPXXgetxqxax(env: 'CPXCENVptr', lp: 'CPXCLPptr', xqxax: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetxqxax(env, lp, xqxax, begin, end)

def CPXXgetqconstrdslack(env: 'CPXCENVptr', lp: 'CPXCLPptr', qind: 'CPXDIM') -> "CPXDIM *":
    return _pycplex_platform.CPXXgetqconstrdslack(env, lp, qind)

def CPXXnewlongannotation(env: 'CPXCENVptr', lp: 'CPXLPptr', annotationname_str: 'char const *', defval: 'CPXLONG') -> "int":
    return _pycplex_platform.CPXXnewlongannotation(env, lp, annotationname_str, defval)

def CPXXnewdblannotation(env: 'CPXCENVptr', lp: 'CPXLPptr', annotationname_str: 'char const *', defval: 'double') -> "int":
    return _pycplex_platform.CPXXnewdblannotation(env, lp, annotationname_str, defval)

def CPXXdellongannotations(env: 'CPXCENVptr', lp: 'CPXLPptr', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXdellongannotations(env, lp, begin, end)

def CPXXdeldblannotations(env: 'CPXCENVptr', lp: 'CPXLPptr', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXdeldblannotations(env, lp, begin, end)

def CPXXgetlongannotationindex(env: 'CPXCENVptr', lp: 'CPXCLPptr', annotationname_str: 'char const *', index_p: 'CPXDIM *') -> "int":
    return _pycplex_platform.CPXXgetlongannotationindex(env, lp, annotationname_str, index_p)

def CPXXgetdblannotationindex(env: 'CPXCENVptr', lp: 'CPXCLPptr', annotationname_str: 'char const *', index_p: 'CPXDIM *') -> "int":
    return _pycplex_platform.CPXXgetdblannotationindex(env, lp, annotationname_str, index_p)

def CPXXgetlongannotationname(env: 'CPXCENVptr', lp: 'CPXCLPptr', idx: 'CPXDIM', buf_str: 'char *') -> "CPXSIZE *":
    return _pycplex_platform.CPXXgetlongannotationname(env, lp, idx, buf_str)

def CPXXgetdblannotationname(env: 'CPXCENVptr', lp: 'CPXCLPptr', idx: 'CPXDIM', buf_str: 'char *') -> "CPXSIZE *":
    return _pycplex_platform.CPXXgetdblannotationname(env, lp, idx, buf_str)

def CPXXgetnumlongannotations(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "int":
    return _pycplex_platform.CPXXgetnumlongannotations(env, lp)

def CPXXgetnumdblannotations(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "int":
    return _pycplex_platform.CPXXgetnumdblannotations(env, lp)

def CPXXgetlongannotationdefval(env: 'CPXCENVptr', lp: 'CPXCLPptr', idx: 'CPXDIM', defval_p: 'CPXLONG *') -> "int":
    return _pycplex_platform.CPXXgetlongannotationdefval(env, lp, idx, defval_p)

def CPXXgetdblannotationdefval(env: 'CPXCENVptr', lp: 'CPXCLPptr', idx: 'CPXDIM', defval_p: 'double *') -> "int":
    return _pycplex_platform.CPXXgetdblannotationdefval(env, lp, idx, defval_p)

def CPXXsetdblannotations(env: 'CPXCENVptr', lp: 'CPXLPptr', idx: 'CPXDIM', objtype: 'int', cnt: 'CPXDIM', indices: 'CPXDIM const *', values: 'double const *') -> "int":
    return _pycplex_platform.CPXXsetdblannotations(env, lp, idx, objtype, cnt, indices, values)

def CPXXsetlongannotations(env: 'CPXCENVptr', lp: 'CPXLPptr', idx: 'CPXDIM', objtype: 'int', cnt: 'CPXDIM', indices: 'CPXDIM const *', values: 'CPXLONG const *') -> "int":
    return _pycplex_platform.CPXXsetlongannotations(env, lp, idx, objtype, cnt, indices, values)

def CPXXgetlongannotations(env: 'CPXCENVptr', lp: 'CPXCLPptr', idx: 'CPXDIM', objtype: 'int', annotation: 'CPXLONG *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetlongannotations(env, lp, idx, objtype, annotation, begin, end)

def CPXXgetdblannotations(env: 'CPXCENVptr', lp: 'CPXCLPptr', idx: 'CPXDIM', objtype: 'int', annotation: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXgetdblannotations(env, lp, idx, objtype, annotation, begin, end)

def CPXXaddpwl(env: 'CPXCENVptr', lp: 'CPXLPptr', vary: 'CPXDIM', varx: 'CPXDIM', preslope: 'double', postslope: 'double', nbreaks: 'CPXDIM', py_breakx: 'double const *', py_breaky: 'double const *', pwlname: 'char const *') -> "int":
    return _pycplex_platform.CPXXaddpwl(env, lp, vary, varx, preslope, postslope, nbreaks, py_breakx, py_breaky, pwlname)

def CPXXdelpwl(env: 'CPXCENVptr', lp: 'CPXLPptr', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXdelpwl(env, lp, begin, end)

def CPXXgetnumpwl(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "CPXDIM":
    return _pycplex_platform.CPXXgetnumpwl(env, lp)

def CPXXgetpwl(env: 'CPXCENVptr', lp: 'CPXCLPptr', pwlindex: 'CPXDIM') -> "CPXDIM *":
    return _pycplex_platform.CPXXgetpwl(env, lp, pwlindex)

def CPXXgetpwlindex(env: 'CPXCENVptr', lp: 'CPXCLPptr', lname_str: 'char const *', index_p: 'CPXDIM *') -> "int":
    return _pycplex_platform.CPXXgetpwlindex(env, lp, lname_str, index_p)

def CPXXgetpwlname(env: 'CPXCENVptr', lp: 'CPXCLPptr', buf_str: 'char *', which: 'CPXDIM') -> "CPXSIZE *":
    return _pycplex_platform.CPXXgetpwlname(env, lp, buf_str, which)

def CPXXgetnumlazyconstraints(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "CPXDIM":
    return _pycplex_platform.CPXXgetnumlazyconstraints(env, lp)

def CPXXgetnumusercuts(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "CPXDIM":
    return _pycplex_platform.CPXXgetnumusercuts(env, lp)

def CPXEgetprobstats(ienv: 'CPXCENVptr', lp: 'CPXLPptr', objs_p: 'int *', rows_p: 'int *', cols_p: 'int *', objcnt_p: 'int *', rhscnt_p: 'int *', nzcnt_p: 'int *', ecnt_p: 'int *', gcnt_p: 'int *', lcnt_p: 'int *', rngcnt_p: 'int *', ncnt_p: 'int *', fcnt_p: 'int *', xcnt_p: 'int *', bcnt_p: 'int *', ocnt_p: 'int *', bicnt_p: 'int *', icnt_p: 'int *', scnt_p: 'int *', sicnt_p: 'int *', qpcnt_p: 'int *', qpnzcnt_p: 'int *', nqconstr_p: 'int *', qrhscnt_p: 'int *', qlcnt_p: 'int *', qgcnt_p: 'int *', quadnzcnt_p: 'int *', linnzcnt_p: 'int *', nindconstr_p: 'int *', indrhscnt_p: 'int *', indnzcnt_p: 'int *', indcompcnt_p: 'int *', indlcnt_p: 'int *', indecnt_p: 'int *', indgcnt_p: 'int *', maxcoef_p: 'double *', mincoef_p: 'double *', minrhs_p: 'double *', maxrhs_p: 'double *', minrng_p: 'double *', maxrng_p: 'double *', minobj_p: 'double *', maxobj_p: 'double *', minlb_p: 'double *', maxub_p: 'double *', minqcoef_p: 'double *', maxqcoef_p: 'double *', minqcq_p: 'double *', maxqcq_p: 'double *', minqcl_p: 'double *', maxqcl_p: 'double *', minqcr_p: 'double *', maxqcr_p: 'double *', minind_p: 'double *', maxind_p: 'double *', minindrhs_p: 'double *', maxindrhs_p: 'double *', minlazy_p: 'double *', maxlazy_p: 'double *', minlazyrhs_p: 'double *', maxlazyrhs_p: 'double *', minucut_p: 'double *', maxucut_p: 'double *', minucutrhs_p: 'double *', maxucutrhs_p: 'double *', nsos_p: 'int *', nsos1_p: 'int *', sos1nmem_p: 'int *', sos1type_p: 'int *', nsos2_p: 'int *', sos2nmem_p: 'int *', sos2type_p: 'int *', lazyrhscnt: 'int *', lazygcnt: 'int *', lazylcnt: 'int *', lazyecnt: 'int *', lazycnt: 'int *', lazynzcnt: 'int *', ucutrhscnt: 'int *', ucutgcnt: 'int *', ucutlcnt: 'int *', ucutecnt: 'int *', ucutcnt: 'int *', ucutnzcnt: 'int *', npwl_p: 'int *', npwlbreaks_p: 'int *') -> "int":
    return _pycplex_platform.CPXEgetprobstats(ienv, lp, objs_p, rows_p, cols_p, objcnt_p, rhscnt_p, nzcnt_p, ecnt_p, gcnt_p, lcnt_p, rngcnt_p, ncnt_p, fcnt_p, xcnt_p, bcnt_p, ocnt_p, bicnt_p, icnt_p, scnt_p, sicnt_p, qpcnt_p, qpnzcnt_p, nqconstr_p, qrhscnt_p, qlcnt_p, qgcnt_p, quadnzcnt_p, linnzcnt_p, nindconstr_p, indrhscnt_p, indnzcnt_p, indcompcnt_p, indlcnt_p, indecnt_p, indgcnt_p, maxcoef_p, mincoef_p, minrhs_p, maxrhs_p, minrng_p, maxrng_p, minobj_p, maxobj_p, minlb_p, maxub_p, minqcoef_p, maxqcoef_p, minqcq_p, maxqcq_p, minqcl_p, maxqcl_p, minqcr_p, maxqcr_p, minind_p, maxind_p, minindrhs_p, maxindrhs_p, minlazy_p, maxlazy_p, minlazyrhs_p, maxlazyrhs_p, minucut_p, maxucut_p, minucutrhs_p, maxucutrhs_p, nsos_p, nsos1_p, sos1nmem_p, sos1type_p, nsos2_p, sos2nmem_p, sos2type_p, lazyrhscnt, lazygcnt, lazylcnt, lazyecnt, lazycnt, lazynzcnt, ucutrhscnt, ucutgcnt, ucutlcnt, ucutecnt, ucutcnt, ucutnzcnt, npwl_p, npwlbreaks_p)

def CPXEgethist(ienv: 'CPXCENVptr', lp: 'CPXLPptr', key: 'int', hist: 'int *') -> "int":
    return _pycplex_platform.CPXEgethist(ienv, lp, key, hist)

def CPXEgetqualitymetrics(env: 'CPXCENVptr', lp: 'CPXCLPptr', soln: 'int', data: 'double *', idata: 'int *') -> "int":
    return _pycplex_platform.CPXEgetqualitymetrics(env, lp, soln, data, idata)

def CPXEshowquality(env: 'CPXCENVptr', lp: 'CPXCLPptr', soln: 'int') -> "int":
    return _pycplex_platform.CPXEshowquality(env, lp, soln)

def CPXXgetnumcores(env: 'CPXCENVptr', numcores_p: 'int *') -> "int":
    return _pycplex_platform.CPXXgetnumcores(env, numcores_p)

def CPXXcallbacksetfunc(env: 'CPXENVptr', lp: 'CPXLPptr', contextmask: 'CPXLONG', callback: 'int (*)(CPXCALLBACKCONTEXTptr,CPXLONG,void *)') -> "int":
    return _pycplex_platform.CPXXcallbacksetfunc(env, lp, contextmask, callback)

def CPXXcallbackgetinfoint(context: 'CPXCALLBACKCONTEXTptr', what: 'CPXCALLBACKINFO') -> "int":
    return _pycplex_platform.CPXXcallbackgetinfoint(context, what)

def CPXXcallbackgetinfolong(context: 'CPXCALLBACKCONTEXTptr', what: 'CPXCALLBACKINFO') -> "int":
    return _pycplex_platform.CPXXcallbackgetinfolong(context, what)

def CPXXcallbackgetinfodbl(context: 'CPXCALLBACKCONTEXTptr', what: 'CPXCALLBACKINFO') -> "int":
    return _pycplex_platform.CPXXcallbackgetinfodbl(context, what)

def CPXXcallbackabort(context: 'CPXCALLBACKCONTEXTptr') -> "void":
    return _pycplex_platform.CPXXcallbackabort(context)

def CPXXcallbackcandidateispoint(context: 'CPXCALLBACKCONTEXTptr', bounded_p: 'int *') -> "int":
    return _pycplex_platform.CPXXcallbackcandidateispoint(context, bounded_p)

def CPXXcallbackcandidateisray(context: 'CPXCALLBACKCONTEXTptr', ray_p: 'int *') -> "int":
    return _pycplex_platform.CPXXcallbackcandidateisray(context, ray_p)

def CPXXcallbackgetcandidatepoint(context: 'CPXCALLBACKCONTEXTptr', x: 'double *', begin: 'CPXDIM', end: 'CPXDIM', obj_p: 'double *') -> "int":
    return _pycplex_platform.CPXXcallbackgetcandidatepoint(context, x, begin, end, obj_p)

def CPXXcallbackgetcandidateray(context: 'CPXCALLBACKCONTEXTptr', x: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXcallbackgetcandidateray(context, x, begin, end)

def CPXXcallbackgetrelaxationpoint(context: 'CPXCALLBACKCONTEXTptr', x: 'double *', begin: 'CPXDIM', end: 'CPXDIM', obj_p: 'double *') -> "int":
    return _pycplex_platform.CPXXcallbackgetrelaxationpoint(context, x, begin, end, obj_p)

def CPXXcallbackgetrelaxationstatus(context: 'CPXCALLBACKCONTEXTptr', nodelpstat_p: 'int *', flags: 'CPXLONG') -> "int":
    return _pycplex_platform.CPXXcallbackgetrelaxationstatus(context, nodelpstat_p, flags)

def CPXXcallbackmakebranch(context: 'CPXCALLBACKCONTEXTptr', varcnt: 'CPXDIM', py_varind: 'CPXDIM const *', py_varlu: 'char const *', py_varbd: 'double const *', rcnt: 'CPXDIM', nzcnt: 'CPXNNZ', py_rhs: 'double const *', py_sense: 'char const *', py_rmatbeg: 'CPXNNZ const *', py_rmatind: 'CPXDIM const *', py_rmatval: 'double const *', nodeest: 'double', seqnum_p: 'CPXCNT *') -> "int":
    return _pycplex_platform.CPXXcallbackmakebranch(context, varcnt, py_varind, py_varlu, py_varbd, rcnt, nzcnt, py_rhs, py_sense, py_rmatbeg, py_rmatind, py_rmatval, nodeest, seqnum_p)

def CPXXcallbackprunenode(context: 'CPXCALLBACKCONTEXTptr') -> "int":
    return _pycplex_platform.CPXXcallbackprunenode(context)

def CPXXcallbackexitcutloop(context: 'CPXCALLBACKCONTEXTptr') -> "int":
    return _pycplex_platform.CPXXcallbackexitcutloop(context)

def CPXXcallbackgetincumbent(context: 'CPXCALLBACKCONTEXTptr', x: 'double *', begin: 'CPXDIM', end: 'CPXDIM', obj_p: 'double *') -> "int":
    return _pycplex_platform.CPXXcallbackgetincumbent(context, x, begin, end, obj_p)

def CPXXcallbackgetlocallb(context: 'CPXCALLBACKCONTEXTptr', lb: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXcallbackgetlocallb(context, lb, begin, end)

def CPXXcallbackgetlocalub(context: 'CPXCALLBACKCONTEXTptr', ub: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXcallbackgetlocalub(context, ub, begin, end)

def CPXXcallbackgetgloballb(context: 'CPXCALLBACKCONTEXTptr', lb: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXcallbackgetgloballb(context, lb, begin, end)

def CPXXcallbackgetglobalub(context: 'CPXCALLBACKCONTEXTptr', ub: 'double *', begin: 'CPXDIM', end: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXcallbackgetglobalub(context, ub, begin, end)

def CPXXcallbackpostheursoln(context: 'CPXCALLBACKCONTEXTptr', cnt: 'CPXDIM', ind: 'CPXDIM const *', val: 'double const *', obj: 'double', type: 'CPXCALLBACKSOLUTIONSTRATEGY') -> "int":
    return _pycplex_platform.CPXXcallbackpostheursoln(context, cnt, ind, val, obj, type)

def CPXXcallbackaddusercuts(context: 'CPXCALLBACKCONTEXTptr', rcnt: 'CPXDIM', nzcnt: 'CPXNNZ', py_rhs: 'double const *', sense: 'char const *', py_cutbeg: 'CPXNNZ const *', py_cutmanagement: 'int const *', py_local: 'int const *') -> "int":
    return _pycplex_platform.CPXXcallbackaddusercuts(context, rcnt, nzcnt, py_rhs, sense, py_cutbeg, py_cutmanagement, py_local)

def CPXXcallbackrejectcandidate(context: 'CPXCALLBACKCONTEXTptr', rcnt: 'CPXDIM', nzcnt: 'CPXNNZ', py_rhs: 'double const *', sense: 'char const *', py_cutbeg: 'CPXNNZ const *') -> "int":
    return _pycplex_platform.CPXXcallbackrejectcandidate(context, rcnt, nzcnt, py_rhs, sense, py_cutbeg)

def CPXXcallbackrejectcandidatelocal(context: 'CPXCALLBACKCONTEXTptr', rcnt: 'CPXDIM', nzcnt: 'CPXNNZ', py_rhs: 'double const *', sense: 'char const *', py_cutbeg: 'CPXNNZ const *') -> "int":
    return _pycplex_platform.CPXXcallbackrejectcandidatelocal(context, rcnt, nzcnt, py_rhs, sense, py_cutbeg)

def CPXXmodelasstcallbacksetfunc(env: 'CPXENVptr', lp: 'CPXLPptr', callback: 'int (*)(int,char const *,void *)') -> "int":
    return _pycplex_platform.CPXXmodelasstcallbacksetfunc(env, lp, callback)

def CPXXgetnumobjs(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "CPXDIM":
    return _pycplex_platform.CPXXgetnumobjs(env, lp)

def CPXXmultiobjchgattribs(env: 'CPXCENVptr', lp: 'CPXLPptr', objind: 'CPXDIM', offset: 'double', weight: 'double', priority: 'CPXDIM', abstol: 'double', reltol: 'double', name: 'char const *') -> "int":
    return _pycplex_platform.CPXXmultiobjchgattribs(env, lp, objind, offset, weight, priority, abstol, reltol, name)

def CPXXmultiobjgetindex(env: 'CPXCENVptr', lp: 'CPXCLPptr', lname_str: 'char const *', index_p: 'CPXDIM *') -> "int":
    return _pycplex_platform.CPXXmultiobjgetindex(env, lp, lname_str, index_p)

def CPXXmultiobjgetname(env: 'CPXCENVptr', lp: 'CPXCLPptr', objind: 'CPXDIM', buf_str: 'char *') -> "CPXSIZE *":
    return _pycplex_platform.CPXXmultiobjgetname(env, lp, objind, buf_str)

def CPXXmultiobjgetobj(env: 'CPXCENVptr', lp: 'CPXCLPptr', n: 'CPXDIM', coeffs: 'double *', begin: 'CPXDIM', end: 'CPXDIM', offset_p: 'double *', weight_p: 'double *', priority_p: 'CPXDIM *', abstol_p: 'double *', reltol_p: 'double *') -> "int":
    return _pycplex_platform.CPXXmultiobjgetobj(env, lp, n, coeffs, begin, end, offset_p, weight_p, priority_p, abstol_p, reltol_p)

def CPXXmultiobjgetobjval(env: 'CPXCENVptr', lp: 'CPXCLPptr', n: 'CPXDIM', objval_p: 'double *') -> "int":
    return _pycplex_platform.CPXXmultiobjgetobjval(env, lp, n, objval_p)

def CPXXmultiobjgetobjvalbypriority(env: 'CPXCENVptr', lp: 'CPXCLPptr', priority: 'CPXDIM', objval_p: 'double *') -> "int":
    return _pycplex_platform.CPXXmultiobjgetobjvalbypriority(env, lp, priority, objval_p)

def CPXXmultiobjsetobj(env: 'CPXCENVptr', lp: 'CPXLPptr', n: 'CPXDIM', objnz: 'CPXDIM', py_objind: 'CPXDIM const *', py_objval: 'double const *', offset: 'double', weight: 'double', priority: 'CPXDIM', abstol: 'double', reltol: 'double', objname: 'char const *') -> "int":
    return _pycplex_platform.CPXXmultiobjsetobj(env, lp, n, objnz, py_objind, py_objval, offset, weight, priority, abstol, reltol, objname)

def CPXXsetnumobjs(env: 'CPXCENVptr', lp: 'CPXCLPptr', n: 'CPXDIM') -> "int":
    return _pycplex_platform.CPXXsetnumobjs(env, lp, n)

def CPXXmultiobjgetdblinfo(env: 'CPXCENVptr', lp: 'CPXCLPptr', subprob: 'CPXDIM', info_p: 'double *', what: 'int') -> "int":
    return _pycplex_platform.CPXXmultiobjgetdblinfo(env, lp, subprob, info_p, what)

def CPXXmultiobjgetintinfo(env: 'CPXCENVptr', lp: 'CPXCLPptr', subprob: 'CPXDIM', info_p: 'int *', what: 'int') -> "int":
    return _pycplex_platform.CPXXmultiobjgetintinfo(env, lp, subprob, info_p, what)

def CPXXmultiobjgetlonginfo(env: 'CPXCENVptr', lp: 'CPXCLPptr', subprob: 'CPXDIM', info_p: 'CPXLONG *', what: 'int') -> "int":
    return _pycplex_platform.CPXXmultiobjgetlonginfo(env, lp, subprob, info_p, what)

def CPXXmultiobjgetnumsolves(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "CPXDIM":
    return _pycplex_platform.CPXXmultiobjgetnumsolves(env, lp)

def CPXEgetnumprios(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "int":
    return _pycplex_platform.CPXEgetnumprios(env, lp)

def CPXEismultiobj(env: 'CPXCENVptr', lp: 'CPXCLPptr') -> "int":
    return _pycplex_platform.CPXEismultiobj(env, lp)

def CPXXparamsetadddbl(env: 'CPXCENVptr', ps: 'CPXPARAMSETptr', whichparam: 'int', newvalue: 'double') -> "int":
    return _pycplex_platform.CPXXparamsetadddbl(env, ps, whichparam, newvalue)

def CPXXparamsetaddint(env: 'CPXCENVptr', ps: 'CPXPARAMSETptr', whichparam: 'int', newvalue: 'CPXINT') -> "int":
    return _pycplex_platform.CPXXparamsetaddint(env, ps, whichparam, newvalue)

def CPXXparamsetaddlong(env: 'CPXCENVptr', ps: 'CPXPARAMSETptr', whichparam: 'int', newvalue: 'CPXLONG') -> "int":
    return _pycplex_platform.CPXXparamsetaddlong(env, ps, whichparam, newvalue)

def CPXXparamsetaddstr(env: 'CPXCENVptr', ps: 'CPXPARAMSETptr', whichparam: 'int', svalue: 'char const *') -> "int":
    return _pycplex_platform.CPXXparamsetaddstr(env, ps, whichparam, svalue)

def CPXXparamsetapply(env: 'CPXENVptr', ps: 'CPXCPARAMSETptr') -> "int":
    return _pycplex_platform.CPXXparamsetapply(env, ps)

def CPXXparamsetcopy(targetenv: 'CPXCENVptr', targetps: 'CPXPARAMSETptr', sourceps: 'CPXCPARAMSETptr') -> "int":
    return _pycplex_platform.CPXXparamsetcopy(targetenv, targetps, sourceps)

def CPXXparamsetcreate(env: 'CPXCENVptr', status_p: 'int *') -> "CPXPARAMSETptr":
    return _pycplex_platform.CPXXparamsetcreate(env, status_p)

def CPXXparamsetdel(env: 'CPXCENVptr', ps: 'CPXPARAMSETptr', whichparam: 'int') -> "int":
    return _pycplex_platform.CPXXparamsetdel(env, ps, whichparam)

def CPXXparamsetfree(env: 'CPXCENVptr', ps_p: 'CPXPARAMSETptr *') -> "int":
    return _pycplex_platform.CPXXparamsetfree(env, ps_p)

def CPXXparamsetgetdbl(env: 'CPXCENVptr', ps: 'CPXCPARAMSETptr', whichparam: 'int', dval_p: 'double *') -> "int":
    return _pycplex_platform.CPXXparamsetgetdbl(env, ps, whichparam, dval_p)

def CPXXparamsetgetids(env: 'CPXCENVptr', ps: 'CPXCPARAMSETptr', cnt_p: 'int *') -> "int *":
    return _pycplex_platform.CPXXparamsetgetids(env, ps, cnt_p)

def CPXXparamsetgetint(env: 'CPXCENVptr', ps: 'CPXCPARAMSETptr', whichparam: 'int', ival_p: 'CPXINT *') -> "int":
    return _pycplex_platform.CPXXparamsetgetint(env, ps, whichparam, ival_p)

def CPXXparamsetgetlong(env: 'CPXCENVptr', ps: 'CPXCPARAMSETptr', whichparam: 'int', ival_p: 'CPXLONG *') -> "int":
    return _pycplex_platform.CPXXparamsetgetlong(env, ps, whichparam, ival_p)

def CPXXparamsetgetstr(env: 'CPXCENVptr', ps: 'CPXCPARAMSETptr', whichparam: 'int', param_buffer_str: 'char *') -> "char *":
    return _pycplex_platform.CPXXparamsetgetstr(env, ps, whichparam, param_buffer_str)

def CPXXparamsetreadcopy(env: 'CPXENVptr', ps: 'CPXPARAMSETptr', filename_str: 'char const *') -> "int":
    return _pycplex_platform.CPXXparamsetreadcopy(env, ps, filename_str)

def CPXXparamsetwrite(env: 'CPXCENVptr', ps: 'CPXCPARAMSETptr', filename_str: 'char const *') -> "int":
    return _pycplex_platform.CPXXparamsetwrite(env, ps, filename_str)

def CPXEwriteprobdev(env: 'CPXCENVptr', lp: 'CPXCLPptr', filename_str: 'char const *') -> "char const *":
    return _pycplex_platform.CPXEwriteprobdev(env, lp, filename_str)
class intPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _pycplex_platform.intPtr_swiginit(self, _pycplex_platform.new_intPtr())
    __swig_destroy__ = _pycplex_platform.delete_intPtr

    def assign(self, value: 'int') -> "void":
        return _pycplex_platform.intPtr_assign(self, value)

    def value(self) -> "int":
        return _pycplex_platform.intPtr_value(self)

    def cast(self) -> "int *":
        return _pycplex_platform.intPtr_cast(self)

    @staticmethod
    def frompointer(t: 'int *') -> "intPtr *":
        return _pycplex_platform.intPtr_frompointer(t)

# Register intPtr in _pycplex_platform:
_pycplex_platform.intPtr_swigregister(intPtr)

def intPtr_frompointer(t: 'int *') -> "intPtr *":
    return _pycplex_platform.intPtr_frompointer(t)

class cpxlongPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _pycplex_platform.cpxlongPtr_swiginit(self, _pycplex_platform.new_cpxlongPtr())
    __swig_destroy__ = _pycplex_platform.delete_cpxlongPtr

    def assign(self, value: 'long long') -> "void":
        return _pycplex_platform.cpxlongPtr_assign(self, value)

    def value(self) -> "long long":
        return _pycplex_platform.cpxlongPtr_value(self)

    def cast(self) -> "long long *":
        return _pycplex_platform.cpxlongPtr_cast(self)

    @staticmethod
    def frompointer(t: 'long long *') -> "cpxlongPtr *":
        return _pycplex_platform.cpxlongPtr_frompointer(t)

# Register cpxlongPtr in _pycplex_platform:
_pycplex_platform.cpxlongPtr_swigregister(cpxlongPtr)

def cpxlongPtr_frompointer(t: 'long long *') -> "cpxlongPtr *":
    return _pycplex_platform.cpxlongPtr_frompointer(t)

class doublePtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _pycplex_platform.doublePtr_swiginit(self, _pycplex_platform.new_doublePtr())
    __swig_destroy__ = _pycplex_platform.delete_doublePtr

    def assign(self, value: 'double') -> "void":
        return _pycplex_platform.doublePtr_assign(self, value)

    def value(self) -> "double":
        return _pycplex_platform.doublePtr_value(self)

    def cast(self) -> "double *":
        return _pycplex_platform.doublePtr_cast(self)

    @staticmethod
    def frompointer(t: 'double *') -> "doublePtr *":
        return _pycplex_platform.doublePtr_frompointer(t)

# Register doublePtr in _pycplex_platform:
_pycplex_platform.doublePtr_swigregister(doublePtr)

def doublePtr_frompointer(t: 'double *') -> "doublePtr *":
    return _pycplex_platform.doublePtr_frompointer(t)

class CPXLPptrPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _pycplex_platform.CPXLPptrPtr_swiginit(self, _pycplex_platform.new_CPXLPptrPtr())
    __swig_destroy__ = _pycplex_platform.delete_CPXLPptrPtr

    def assign(self, value: 'CPXLPptr') -> "void":
        return _pycplex_platform.CPXLPptrPtr_assign(self, value)

    def value(self) -> "CPXLPptr":
        return _pycplex_platform.CPXLPptrPtr_value(self)

    def cast(self) -> "CPXLPptr *":
        return _pycplex_platform.CPXLPptrPtr_cast(self)

    @staticmethod
    def frompointer(t: 'CPXLPptr *') -> "CPXLPptrPtr *":
        return _pycplex_platform.CPXLPptrPtr_frompointer(t)

# Register CPXLPptrPtr in _pycplex_platform:
_pycplex_platform.CPXLPptrPtr_swigregister(CPXLPptrPtr)

def CPXLPptrPtr_frompointer(t: 'CPXLPptr *') -> "CPXLPptrPtr *":
    return _pycplex_platform.CPXLPptrPtr_frompointer(t)

class CPXENVptrPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _pycplex_platform.CPXENVptrPtr_swiginit(self, _pycplex_platform.new_CPXENVptrPtr())
    __swig_destroy__ = _pycplex_platform.delete_CPXENVptrPtr

    def assign(self, value: 'CPXENVptr') -> "void":
        return _pycplex_platform.CPXENVptrPtr_assign(self, value)

    def value(self) -> "CPXENVptr":
        return _pycplex_platform.CPXENVptrPtr_value(self)

    def cast(self) -> "CPXENVptr *":
        return _pycplex_platform.CPXENVptrPtr_cast(self)

    @staticmethod
    def frompointer(t: 'CPXENVptr *') -> "CPXENVptrPtr *":
        return _pycplex_platform.CPXENVptrPtr_frompointer(t)

# Register CPXENVptrPtr in _pycplex_platform:
_pycplex_platform.CPXENVptrPtr_swigregister(CPXENVptrPtr)

def CPXENVptrPtr_frompointer(t: 'CPXENVptr *') -> "CPXENVptrPtr *":
    return _pycplex_platform.CPXENVptrPtr_frompointer(t)

class CPXCHANNELptrPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _pycplex_platform.CPXCHANNELptrPtr_swiginit(self, _pycplex_platform.new_CPXCHANNELptrPtr())
    __swig_destroy__ = _pycplex_platform.delete_CPXCHANNELptrPtr

    def assign(self, value: 'CPXCHANNELptr') -> "void":
        return _pycplex_platform.CPXCHANNELptrPtr_assign(self, value)

    def value(self) -> "CPXCHANNELptr":
        return _pycplex_platform.CPXCHANNELptrPtr_value(self)

    def cast(self) -> "CPXCHANNELptr *":
        return _pycplex_platform.CPXCHANNELptrPtr_cast(self)

    @staticmethod
    def frompointer(t: 'CPXCHANNELptr *') -> "CPXCHANNELptrPtr *":
        return _pycplex_platform.CPXCHANNELptrPtr_frompointer(t)

# Register CPXCHANNELptrPtr in _pycplex_platform:
_pycplex_platform.CPXCHANNELptrPtr_swigregister(CPXCHANNELptrPtr)

def CPXCHANNELptrPtr_frompointer(t: 'CPXCHANNELptr *') -> "CPXCHANNELptrPtr *":
    return _pycplex_platform.CPXCHANNELptrPtr_frompointer(t)

class CPXPARAMSETptrPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _pycplex_platform.CPXPARAMSETptrPtr_swiginit(self, _pycplex_platform.new_CPXPARAMSETptrPtr())
    __swig_destroy__ = _pycplex_platform.delete_CPXPARAMSETptrPtr

    def assign(self, value: 'CPXPARAMSETptr') -> "void":
        return _pycplex_platform.CPXPARAMSETptrPtr_assign(self, value)

    def value(self) -> "CPXPARAMSETptr":
        return _pycplex_platform.CPXPARAMSETptrPtr_value(self)

    def cast(self) -> "CPXPARAMSETptr *":
        return _pycplex_platform.CPXPARAMSETptrPtr_cast(self)

    @staticmethod
    def frompointer(t: 'CPXPARAMSETptr *') -> "CPXPARAMSETptrPtr *":
        return _pycplex_platform.CPXPARAMSETptrPtr_frompointer(t)

# Register CPXPARAMSETptrPtr in _pycplex_platform:
_pycplex_platform.CPXPARAMSETptrPtr_swigregister(CPXPARAMSETptrPtr)

def CPXPARAMSETptrPtr_frompointer(t: 'CPXPARAMSETptr *') -> "CPXPARAMSETptrPtr *":
    return _pycplex_platform.CPXPARAMSETptrPtr_frompointer(t)

class intArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nelements: 'size_t'):
        _pycplex_platform.intArray_swiginit(self, _pycplex_platform.new_intArray(nelements))
    __swig_destroy__ = _pycplex_platform.delete_intArray

    def __getitem__(self, index: 'size_t') -> "int":
        return _pycplex_platform.intArray___getitem__(self, index)

    def __setitem__(self, index: 'size_t', value: 'int') -> "void":
        return _pycplex_platform.intArray___setitem__(self, index, value)

    def cast(self) -> "int *":
        return _pycplex_platform.intArray_cast(self)

    @staticmethod
    def frompointer(t: 'int *') -> "intArray *":
        return _pycplex_platform.intArray_frompointer(t)

# Register intArray in _pycplex_platform:
_pycplex_platform.intArray_swigregister(intArray)

def intArray_frompointer(t: 'int *') -> "intArray *":
    return _pycplex_platform.intArray_frompointer(t)

class doubleArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nelements: 'size_t'):
        _pycplex_platform.doubleArray_swiginit(self, _pycplex_platform.new_doubleArray(nelements))
    __swig_destroy__ = _pycplex_platform.delete_doubleArray

    def __getitem__(self, index: 'size_t') -> "double":
        return _pycplex_platform.doubleArray___getitem__(self, index)

    def __setitem__(self, index: 'size_t', value: 'double') -> "void":
        return _pycplex_platform.doubleArray___setitem__(self, index, value)

    def cast(self) -> "double *":
        return _pycplex_platform.doubleArray_cast(self)

    @staticmethod
    def frompointer(t: 'double *') -> "doubleArray *":
        return _pycplex_platform.doubleArray_frompointer(t)

# Register doubleArray in _pycplex_platform:
_pycplex_platform.doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t: 'double *') -> "doubleArray *":
    return _pycplex_platform.doubleArray_frompointer(t)

class longArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nelements: 'size_t'):
        _pycplex_platform.longArray_swiginit(self, _pycplex_platform.new_longArray(nelements))
    __swig_destroy__ = _pycplex_platform.delete_longArray

    def __getitem__(self, index: 'size_t') -> "long long":
        return _pycplex_platform.longArray___getitem__(self, index)

    def __setitem__(self, index: 'size_t', value: 'long long') -> "void":
        return _pycplex_platform.longArray___setitem__(self, index, value)

    def cast(self) -> "long long *":
        return _pycplex_platform.longArray_cast(self)

    @staticmethod
    def frompointer(t: 'long long *') -> "longArray *":
        return _pycplex_platform.longArray_frompointer(t)

# Register longArray in _pycplex_platform:
_pycplex_platform.longArray_swigregister(longArray)

def longArray_frompointer(t: 'long long *') -> "longArray *":
    return _pycplex_platform.longArray_frompointer(t)

class intCArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nelements: 'size_t'):
        _pycplex_platform.intCArray_swiginit(self, _pycplex_platform.new_intCArray(nelements))
    __swig_destroy__ = _pycplex_platform.delete_intCArray

    def __getitem__(self, index: 'size_t') -> "int":
        return _pycplex_platform.intCArray___getitem__(self, index)

    def __setitem__(self, index: 'size_t', value: 'int') -> "void":
        return _pycplex_platform.intCArray___setitem__(self, index, value)

    def cast(self) -> "int *":
        return _pycplex_platform.intCArray_cast(self)

    @staticmethod
    def frompointer(t: 'int *') -> "intCArray *":
        return _pycplex_platform.intCArray_frompointer(t)

# Register intCArray in _pycplex_platform:
_pycplex_platform.intCArray_swigregister(intCArray)

def intCArray_frompointer(t: 'int *') -> "intCArray *":
    return _pycplex_platform.intCArray_frompointer(t)

class doubleCArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nelements: 'size_t'):
        _pycplex_platform.doubleCArray_swiginit(self, _pycplex_platform.new_doubleCArray(nelements))
    __swig_destroy__ = _pycplex_platform.delete_doubleCArray

    def __getitem__(self, index: 'size_t') -> "double":
        return _pycplex_platform.doubleCArray___getitem__(self, index)

    def __setitem__(self, index: 'size_t', value: 'double') -> "void":
        return _pycplex_platform.doubleCArray___setitem__(self, index, value)

    def cast(self) -> "double *":
        return _pycplex_platform.doubleCArray_cast(self)

    @staticmethod
    def frompointer(t: 'double *') -> "doubleCArray *":
        return _pycplex_platform.doubleCArray_frompointer(t)

# Register doubleCArray in _pycplex_platform:
_pycplex_platform.doubleCArray_swigregister(doubleCArray)

def doubleCArray_frompointer(t: 'double *') -> "doubleCArray *":
    return _pycplex_platform.doubleCArray_frompointer(t)

class longCArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nelements: 'size_t'):
        _pycplex_platform.longCArray_swiginit(self, _pycplex_platform.new_longCArray(nelements))
    __swig_destroy__ = _pycplex_platform.delete_longCArray

    def __getitem__(self, index: 'size_t') -> "long long":
        return _pycplex_platform.longCArray___getitem__(self, index)

    def __setitem__(self, index: 'size_t', value: 'long long') -> "void":
        return _pycplex_platform.longCArray___setitem__(self, index, value)

    def cast(self) -> "long long *":
        return _pycplex_platform.longCArray_cast(self)

    @staticmethod
    def frompointer(t: 'long long *') -> "longCArray *":
        return _pycplex_platform.longCArray_frompointer(t)

# Register longCArray in _pycplex_platform:
_pycplex_platform.longCArray_swigregister(longCArray)

def longCArray_frompointer(t: 'long long *') -> "longCArray *":
    return _pycplex_platform.longCArray_frompointer(t)


def monkeypatch(cpx_array_class):
    cpx_array_class_dict = cpx_array_class.__dict__
    def _generic_repr(self):
        return _generic_str(self)
#def _generic_bool(self):
#    return True
    def _generic_str(self):
        return f"[{', '.join(str(i) for i in self)}]"
    def _generic_eq(self, obj):
        if len(self) != len(obj):
            return False
        for a,b in zip(self, obj):
           if a != b:
              return False
        return True
# now we patch
    cpx_array_class.__eq__ = _generic_eq
    cpx_array_class.__str__ = _generic_str
    cpx_array_class.__repr__ = _generic_repr
#cpx_array_class.__bool__ = _generic_bool

def monkeypatch2(cpx_array_class):
    cpx_array_class_dict = cpx_array_class.__dict__
    def _generic_len(self):
        return self._size
    def _generic_iter(self):
        for i in range(self._size):
            yield self[i]
# now we patch
    cpx_array_class.__iter__ = _generic_iter
    cpx_array_class.__len__ = _generic_len

class viewArray():
    def __init__(self, array, start, end):
        self._array = array
        self._start = start
        self._end = end
    def __setitem__(self, index, obj):
        self._array[self._start+index] = obj
    def __getitem__(self, index):
        return self._array[self._start+index]
    def __iter__(self):
        for i in range(self._start, self._end):
            yield self._array[i]
    def __len__(self):
        return self._end-self._start

class intArray(intCArray):
    def __init__(self, nbelements):
        intCArray.__init__(self, nbelements)
        self._size = nbelements
#def __getitem__(self, index):
#    return intCArray.__getitem__(self, index)

class doubleArray(doubleCArray):
    def __init__(self, nbelements):
        doubleCArray.__init__(self, nbelements)
        self._size = nbelements
#def __getitem__(self, index):
#    return doubleCArray.__getitem__(self, index)

class longArray(longCArray):
    def __init__(self, nbelements):
        longCArray.__init__(self, nbelements)
        self._size = nbelements
#def __getitem__(self, index):
#    return longCArray.__getitem__(self, index)

monkeypatch(doubleArray)
monkeypatch(longArray)
monkeypatch(intArray)

monkeypatch2(doubleArray)
monkeypatch2(longArray)
monkeypatch2(intArray)

monkeypatch(viewArray)
def _getArrayView(inputarray, start, end):
    return viewArray(inputarray, start, end)

class C_Array():
   def __init__(self, size, elt):
      self._arrayC = elt
      self._size = size
   def __len__(self):
      return self._size
class intC_array(C_Array):
   def __init(self, size, elt):
      C_Array.__init__(self, elt)
   def __setitem__(self, index, value):
      set_int_C_Array(self._arrayC, index, value)
class longC_array(C_Array):
   def __init(self, size, elt):
      C_Array.__init__(self, elt)
   def __setitem__(self, index, value):
      set_long_C_Array(self._arrayC, index, value)
class doubleC_array(C_Array):
   def __init(self, size, elt):
      C_Array.__init__(self, elt)
   def __setitem__(self, index, value):
      set_double_C_Array(self._arrayC, index, value)




